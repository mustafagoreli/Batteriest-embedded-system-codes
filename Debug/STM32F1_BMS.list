
STM32F1_BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007780  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08007890  08007890  00017890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd4  08007cd4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cdc  08007cdc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cdc  08007cdc  00017cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001e0  08007ec4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08007ec4  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fe8  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba2  00000000  00000000  000281f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  00029d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002a678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018514  00000000  00000000  0002aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f19  00000000  00000000  000433b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086df5  00000000  00000000  0004d2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d40c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a0  00000000  00000000  000d4114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007878 	.word	0x08007878

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007878 	.word	0x08007878

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__gesf2>:
 8000d58:	f04f 3cff 	mov.w	ip, #4294967295
 8000d5c:	e006      	b.n	8000d6c <__cmpsf2+0x4>
 8000d5e:	bf00      	nop

08000d60 <__lesf2>:
 8000d60:	f04f 0c01 	mov.w	ip, #1
 8000d64:	e002      	b.n	8000d6c <__cmpsf2+0x4>
 8000d66:	bf00      	nop

08000d68 <__cmpsf2>:
 8000d68:	f04f 0c01 	mov.w	ip, #1
 8000d6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d7c:	bf18      	it	ne
 8000d7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d82:	d011      	beq.n	8000da8 <__cmpsf2+0x40>
 8000d84:	b001      	add	sp, #4
 8000d86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d8a:	bf18      	it	ne
 8000d8c:	ea90 0f01 	teqne	r0, r1
 8000d90:	bf58      	it	pl
 8000d92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d96:	bf88      	it	hi
 8000d98:	17c8      	asrhi	r0, r1, #31
 8000d9a:	bf38      	it	cc
 8000d9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000da0:	bf18      	it	ne
 8000da2:	f040 0001 	orrne.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dac:	d102      	bne.n	8000db4 <__cmpsf2+0x4c>
 8000dae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000db2:	d105      	bne.n	8000dc0 <__cmpsf2+0x58>
 8000db4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000db8:	d1e4      	bne.n	8000d84 <__cmpsf2+0x1c>
 8000dba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dbe:	d0e1      	beq.n	8000d84 <__cmpsf2+0x1c>
 8000dc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_cfrcmple>:
 8000dc8:	4684      	mov	ip, r0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	4661      	mov	r1, ip
 8000dce:	e7ff      	b.n	8000dd0 <__aeabi_cfcmpeq>

08000dd0 <__aeabi_cfcmpeq>:
 8000dd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dd2:	f7ff ffc9 	bl	8000d68 <__cmpsf2>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	bf48      	it	mi
 8000dda:	f110 0f00 	cmnmi.w	r0, #0
 8000dde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000de0 <__aeabi_fcmpeq>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff fff4 	bl	8000dd0 <__aeabi_cfcmpeq>
 8000de8:	bf0c      	ite	eq
 8000dea:	2001      	moveq	r0, #1
 8000dec:	2000      	movne	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmplt>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffea 	bl	8000dd0 <__aeabi_cfcmpeq>
 8000dfc:	bf34      	ite	cc
 8000dfe:	2001      	movcc	r0, #1
 8000e00:	2000      	movcs	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmple>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffe0 	bl	8000dd0 <__aeabi_cfcmpeq>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpge>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffd2 	bl	8000dc8 <__aeabi_cfrcmple>
 8000e24:	bf94      	ite	ls
 8000e26:	2001      	movls	r0, #1
 8000e28:	2000      	movhi	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <__aeabi_fcmpgt>:
 8000e30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e34:	f7ff ffc8 	bl	8000dc8 <__aeabi_cfrcmple>
 8000e38:	bf34      	ite	cc
 8000e3a:	2001      	movcc	r0, #1
 8000e3c:	2000      	movcs	r0, #0
 8000e3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e42:	bf00      	nop

08000e44 <__aeabi_uldivmod>:
 8000e44:	b953      	cbnz	r3, 8000e5c <__aeabi_uldivmod+0x18>
 8000e46:	b94a      	cbnz	r2, 8000e5c <__aeabi_uldivmod+0x18>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	bf08      	it	eq
 8000e4c:	2800      	cmpeq	r0, #0
 8000e4e:	bf1c      	itt	ne
 8000e50:	f04f 31ff 	movne.w	r1, #4294967295
 8000e54:	f04f 30ff 	movne.w	r0, #4294967295
 8000e58:	f000 b976 	b.w	8001148 <__aeabi_idiv0>
 8000e5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e64:	f000 f806 	bl	8000e74 <__udivmoddi4>
 8000e68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e70:	b004      	add	sp, #16
 8000e72:	4770      	bx	lr

08000e74 <__udivmoddi4>:
 8000e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e78:	9e08      	ldr	r6, [sp, #32]
 8000e7a:	460d      	mov	r5, r1
 8000e7c:	4604      	mov	r4, r0
 8000e7e:	4688      	mov	r8, r1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d14d      	bne.n	8000f20 <__udivmoddi4+0xac>
 8000e84:	428a      	cmp	r2, r1
 8000e86:	4694      	mov	ip, r2
 8000e88:	d968      	bls.n	8000f5c <__udivmoddi4+0xe8>
 8000e8a:	fab2 f282 	clz	r2, r2
 8000e8e:	b152      	cbz	r2, 8000ea6 <__udivmoddi4+0x32>
 8000e90:	fa01 f302 	lsl.w	r3, r1, r2
 8000e94:	f1c2 0120 	rsb	r1, r2, #32
 8000e98:	fa20 f101 	lsr.w	r1, r0, r1
 8000e9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea0:	ea41 0803 	orr.w	r8, r1, r3
 8000ea4:	4094      	lsls	r4, r2
 8000ea6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000eaa:	fbb8 f7f1 	udiv	r7, r8, r1
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb01 8817 	mls	r8, r1, r7, r8
 8000eb6:	fb07 f00e 	mul.w	r0, r7, lr
 8000eba:	0c23      	lsrs	r3, r4, #16
 8000ebc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec0:	4298      	cmp	r0, r3
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x66>
 8000ec4:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec8:	f107 35ff 	add.w	r5, r7, #4294967295
 8000ecc:	f080 811e 	bcs.w	800110c <__udivmoddi4+0x298>
 8000ed0:	4298      	cmp	r0, r3
 8000ed2:	f240 811b 	bls.w	800110c <__udivmoddi4+0x298>
 8000ed6:	3f02      	subs	r7, #2
 8000ed8:	4463      	add	r3, ip
 8000eda:	1a1b      	subs	r3, r3, r0
 8000edc:	fbb3 f0f1 	udiv	r0, r3, r1
 8000ee0:	fb01 3310 	mls	r3, r1, r0, r3
 8000ee4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee8:	b2a4      	uxth	r4, r4
 8000eea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eee:	45a6      	cmp	lr, r4
 8000ef0:	d90a      	bls.n	8000f08 <__udivmoddi4+0x94>
 8000ef2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000efa:	f080 8109 	bcs.w	8001110 <__udivmoddi4+0x29c>
 8000efe:	45a6      	cmp	lr, r4
 8000f00:	f240 8106 	bls.w	8001110 <__udivmoddi4+0x29c>
 8000f04:	4464      	add	r4, ip
 8000f06:	3802      	subs	r0, #2
 8000f08:	2100      	movs	r1, #0
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f12:	b11e      	cbz	r6, 8000f1c <__udivmoddi4+0xa8>
 8000f14:	2300      	movs	r3, #0
 8000f16:	40d4      	lsrs	r4, r2
 8000f18:	e9c6 4300 	strd	r4, r3, [r6]
 8000f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0xc2>
 8000f24:	2e00      	cmp	r6, #0
 8000f26:	f000 80ee 	beq.w	8001106 <__udivmoddi4+0x292>
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	e9c6 0500 	strd	r0, r5, [r6]
 8000f30:	4608      	mov	r0, r1
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	fab3 f183 	clz	r1, r3
 8000f3a:	2900      	cmp	r1, #0
 8000f3c:	d14a      	bne.n	8000fd4 <__udivmoddi4+0x160>
 8000f3e:	42ab      	cmp	r3, r5
 8000f40:	d302      	bcc.n	8000f48 <__udivmoddi4+0xd4>
 8000f42:	4282      	cmp	r2, r0
 8000f44:	f200 80fc 	bhi.w	8001140 <__udivmoddi4+0x2cc>
 8000f48:	1a84      	subs	r4, r0, r2
 8000f4a:	eb65 0303 	sbc.w	r3, r5, r3
 8000f4e:	2001      	movs	r0, #1
 8000f50:	4698      	mov	r8, r3
 8000f52:	2e00      	cmp	r6, #0
 8000f54:	d0e2      	beq.n	8000f1c <__udivmoddi4+0xa8>
 8000f56:	e9c6 4800 	strd	r4, r8, [r6]
 8000f5a:	e7df      	b.n	8000f1c <__udivmoddi4+0xa8>
 8000f5c:	b902      	cbnz	r2, 8000f60 <__udivmoddi4+0xec>
 8000f5e:	deff      	udf	#255	; 0xff
 8000f60:	fab2 f282 	clz	r2, r2
 8000f64:	2a00      	cmp	r2, #0
 8000f66:	f040 8091 	bne.w	800108c <__udivmoddi4+0x218>
 8000f6a:	eba1 000c 	sub.w	r0, r1, ip
 8000f6e:	2101      	movs	r1, #1
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb0 f3f7 	udiv	r3, r0, r7
 8000f7c:	fb07 0013 	mls	r0, r7, r3, r0
 8000f80:	0c25      	lsrs	r5, r4, #16
 8000f82:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000f86:	fb0e f003 	mul.w	r0, lr, r3
 8000f8a:	42a8      	cmp	r0, r5
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x12c>
 8000f8e:	eb1c 0505 	adds.w	r5, ip, r5
 8000f92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f96:	d202      	bcs.n	8000f9e <__udivmoddi4+0x12a>
 8000f98:	42a8      	cmp	r0, r5
 8000f9a:	f200 80ce 	bhi.w	800113a <__udivmoddi4+0x2c6>
 8000f9e:	4643      	mov	r3, r8
 8000fa0:	1a2d      	subs	r5, r5, r0
 8000fa2:	fbb5 f0f7 	udiv	r0, r5, r7
 8000fa6:	fb07 5510 	mls	r5, r7, r0, r5
 8000faa:	fb0e fe00 	mul.w	lr, lr, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fb4:	45a6      	cmp	lr, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x156>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000fc0:	d202      	bcs.n	8000fc8 <__udivmoddi4+0x154>
 8000fc2:	45a6      	cmp	lr, r4
 8000fc4:	f200 80b6 	bhi.w	8001134 <__udivmoddi4+0x2c0>
 8000fc8:	4628      	mov	r0, r5
 8000fca:	eba4 040e 	sub.w	r4, r4, lr
 8000fce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000fd2:	e79e      	b.n	8000f12 <__udivmoddi4+0x9e>
 8000fd4:	f1c1 0720 	rsb	r7, r1, #32
 8000fd8:	408b      	lsls	r3, r1
 8000fda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000fde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000fe2:	fa25 fa07 	lsr.w	sl, r5, r7
 8000fe6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fea:	fbba f8f9 	udiv	r8, sl, r9
 8000fee:	fa20 f307 	lsr.w	r3, r0, r7
 8000ff2:	fb09 aa18 	mls	sl, r9, r8, sl
 8000ff6:	408d      	lsls	r5, r1
 8000ff8:	fa1f fe8c 	uxth.w	lr, ip
 8000ffc:	431d      	orrs	r5, r3
 8000ffe:	fa00 f301 	lsl.w	r3, r0, r1
 8001002:	fb08 f00e 	mul.w	r0, r8, lr
 8001006:	0c2c      	lsrs	r4, r5, #16
 8001008:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800100c:	42a0      	cmp	r0, r4
 800100e:	fa02 f201 	lsl.w	r2, r2, r1
 8001012:	d90b      	bls.n	800102c <__udivmoddi4+0x1b8>
 8001014:	eb1c 0404 	adds.w	r4, ip, r4
 8001018:	f108 3aff 	add.w	sl, r8, #4294967295
 800101c:	f080 8088 	bcs.w	8001130 <__udivmoddi4+0x2bc>
 8001020:	42a0      	cmp	r0, r4
 8001022:	f240 8085 	bls.w	8001130 <__udivmoddi4+0x2bc>
 8001026:	f1a8 0802 	sub.w	r8, r8, #2
 800102a:	4464      	add	r4, ip
 800102c:	1a24      	subs	r4, r4, r0
 800102e:	fbb4 f0f9 	udiv	r0, r4, r9
 8001032:	fb09 4410 	mls	r4, r9, r0, r4
 8001036:	fb00 fe0e 	mul.w	lr, r0, lr
 800103a:	b2ad      	uxth	r5, r5
 800103c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001040:	45a6      	cmp	lr, r4
 8001042:	d908      	bls.n	8001056 <__udivmoddi4+0x1e2>
 8001044:	eb1c 0404 	adds.w	r4, ip, r4
 8001048:	f100 35ff 	add.w	r5, r0, #4294967295
 800104c:	d26c      	bcs.n	8001128 <__udivmoddi4+0x2b4>
 800104e:	45a6      	cmp	lr, r4
 8001050:	d96a      	bls.n	8001128 <__udivmoddi4+0x2b4>
 8001052:	3802      	subs	r0, #2
 8001054:	4464      	add	r4, ip
 8001056:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800105a:	fba0 9502 	umull	r9, r5, r0, r2
 800105e:	eba4 040e 	sub.w	r4, r4, lr
 8001062:	42ac      	cmp	r4, r5
 8001064:	46c8      	mov	r8, r9
 8001066:	46ae      	mov	lr, r5
 8001068:	d356      	bcc.n	8001118 <__udivmoddi4+0x2a4>
 800106a:	d053      	beq.n	8001114 <__udivmoddi4+0x2a0>
 800106c:	2e00      	cmp	r6, #0
 800106e:	d069      	beq.n	8001144 <__udivmoddi4+0x2d0>
 8001070:	ebb3 0208 	subs.w	r2, r3, r8
 8001074:	eb64 040e 	sbc.w	r4, r4, lr
 8001078:	fa22 f301 	lsr.w	r3, r2, r1
 800107c:	fa04 f707 	lsl.w	r7, r4, r7
 8001080:	431f      	orrs	r7, r3
 8001082:	40cc      	lsrs	r4, r1
 8001084:	e9c6 7400 	strd	r7, r4, [r6]
 8001088:	2100      	movs	r1, #0
 800108a:	e747      	b.n	8000f1c <__udivmoddi4+0xa8>
 800108c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001090:	f1c2 0120 	rsb	r1, r2, #32
 8001094:	fa25 f301 	lsr.w	r3, r5, r1
 8001098:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800109c:	fa20 f101 	lsr.w	r1, r0, r1
 80010a0:	4095      	lsls	r5, r2
 80010a2:	430d      	orrs	r5, r1
 80010a4:	fbb3 f1f7 	udiv	r1, r3, r7
 80010a8:	fb07 3311 	mls	r3, r7, r1, r3
 80010ac:	fa1f fe8c 	uxth.w	lr, ip
 80010b0:	0c28      	lsrs	r0, r5, #16
 80010b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010b6:	fb01 f30e 	mul.w	r3, r1, lr
 80010ba:	4283      	cmp	r3, r0
 80010bc:	fa04 f402 	lsl.w	r4, r4, r2
 80010c0:	d908      	bls.n	80010d4 <__udivmoddi4+0x260>
 80010c2:	eb1c 0000 	adds.w	r0, ip, r0
 80010c6:	f101 38ff 	add.w	r8, r1, #4294967295
 80010ca:	d22f      	bcs.n	800112c <__udivmoddi4+0x2b8>
 80010cc:	4283      	cmp	r3, r0
 80010ce:	d92d      	bls.n	800112c <__udivmoddi4+0x2b8>
 80010d0:	3902      	subs	r1, #2
 80010d2:	4460      	add	r0, ip
 80010d4:	1ac0      	subs	r0, r0, r3
 80010d6:	fbb0 f3f7 	udiv	r3, r0, r7
 80010da:	fb07 0013 	mls	r0, r7, r3, r0
 80010de:	b2ad      	uxth	r5, r5
 80010e0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80010e4:	fb03 f00e 	mul.w	r0, r3, lr
 80010e8:	42a8      	cmp	r0, r5
 80010ea:	d908      	bls.n	80010fe <__udivmoddi4+0x28a>
 80010ec:	eb1c 0505 	adds.w	r5, ip, r5
 80010f0:	f103 38ff 	add.w	r8, r3, #4294967295
 80010f4:	d216      	bcs.n	8001124 <__udivmoddi4+0x2b0>
 80010f6:	42a8      	cmp	r0, r5
 80010f8:	d914      	bls.n	8001124 <__udivmoddi4+0x2b0>
 80010fa:	3b02      	subs	r3, #2
 80010fc:	4465      	add	r5, ip
 80010fe:	1a28      	subs	r0, r5, r0
 8001100:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001104:	e738      	b.n	8000f78 <__udivmoddi4+0x104>
 8001106:	4631      	mov	r1, r6
 8001108:	4630      	mov	r0, r6
 800110a:	e707      	b.n	8000f1c <__udivmoddi4+0xa8>
 800110c:	462f      	mov	r7, r5
 800110e:	e6e4      	b.n	8000eda <__udivmoddi4+0x66>
 8001110:	4618      	mov	r0, r3
 8001112:	e6f9      	b.n	8000f08 <__udivmoddi4+0x94>
 8001114:	454b      	cmp	r3, r9
 8001116:	d2a9      	bcs.n	800106c <__udivmoddi4+0x1f8>
 8001118:	ebb9 0802 	subs.w	r8, r9, r2
 800111c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001120:	3801      	subs	r0, #1
 8001122:	e7a3      	b.n	800106c <__udivmoddi4+0x1f8>
 8001124:	4643      	mov	r3, r8
 8001126:	e7ea      	b.n	80010fe <__udivmoddi4+0x28a>
 8001128:	4628      	mov	r0, r5
 800112a:	e794      	b.n	8001056 <__udivmoddi4+0x1e2>
 800112c:	4641      	mov	r1, r8
 800112e:	e7d1      	b.n	80010d4 <__udivmoddi4+0x260>
 8001130:	46d0      	mov	r8, sl
 8001132:	e77b      	b.n	800102c <__udivmoddi4+0x1b8>
 8001134:	4464      	add	r4, ip
 8001136:	3802      	subs	r0, #2
 8001138:	e747      	b.n	8000fca <__udivmoddi4+0x156>
 800113a:	3b02      	subs	r3, #2
 800113c:	4465      	add	r5, ip
 800113e:	e72f      	b.n	8000fa0 <__udivmoddi4+0x12c>
 8001140:	4608      	mov	r0, r1
 8001142:	e706      	b.n	8000f52 <__udivmoddi4+0xde>
 8001144:	4631      	mov	r1, r6
 8001146:	e6e9      	b.n	8000f1c <__udivmoddi4+0xa8>

08001148 <__aeabi_idiv0>:
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <ADC_Select_Current>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_Current() {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001160:	2301      	movs	r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001164:	2304      	movs	r3, #4
 8001166:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <ADC_Select_Current+0x38>)
 800116e:	f001 f971 	bl	8002454 <HAL_ADC_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <ADC_Select_Current+0x30>
		Error_Handler();
 8001178:	f000 fc28 	bl	80019cc <Error_Handler>
	}
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200001fc 	.word	0x200001fc

08001188 <ADC_Select_Temperature>:
void ADC_Select_Temperature() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001198:	2301      	movs	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800119c:	2301      	movs	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80011a0:	2305      	movs	r3, #5
 80011a2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <ADC_Select_Temperature+0x38>)
 80011aa:	f001 f953 	bl	8002454 <HAL_ADC_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <ADC_Select_Temperature+0x30>
		Error_Handler();
 80011b4:	f000 fc0a 	bl	80019cc <Error_Handler>
	}
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001fc 	.word	0x200001fc

080011c4 <ADC_Select_Voltage>:
void ADC_Select_Voltage() {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d8:	2301      	movs	r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80011dc:	2306      	movs	r3, #6
 80011de:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <ADC_Select_Voltage+0x38>)
 80011e6:	f001 f935 	bl	8002454 <HAL_ADC_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <ADC_Select_Voltage+0x30>
		Error_Handler();
 80011f0:	f000 fbec 	bl	80019cc <Error_Handler>
	}
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200001fc 	.word	0x200001fc

08001200 <Get_ADC_Value>:
uint16_t Get_ADC_Value() {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
	uint16_t adc_value = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start(&hadc1);
 800120a:	480b      	ldr	r0, [pc, #44]	; (8001238 <Get_ADC_Value+0x38>)
 800120c:	f000 ff36 	bl	800207c <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 200) == HAL_OK) {
 8001210:	21c8      	movs	r1, #200	; 0xc8
 8001212:	4809      	ldr	r0, [pc, #36]	; (8001238 <Get_ADC_Value+0x38>)
 8001214:	f001 f80c 	bl	8002230 <HAL_ADC_PollForConversion>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d104      	bne.n	8001228 <Get_ADC_Value+0x28>
		adc_value = HAL_ADC_GetValue(&hadc1);
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <Get_ADC_Value+0x38>)
 8001220:	f001 f90c 	bl	800243c <HAL_ADC_GetValue>
 8001224:	4603      	mov	r3, r0
 8001226:	80fb      	strh	r3, [r7, #6]
	}
	HAL_ADC_Stop(&hadc1);
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <Get_ADC_Value+0x38>)
 800122a:	f000 ffd5 	bl	80021d8 <HAL_ADC_Stop>
	return adc_value;
 800122e:	88fb      	ldrh	r3, [r7, #6]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200001fc 	.word	0x200001fc
 800123c:	00000000 	.word	0x00000000

08001240 <Get_ADC_Voltage>:
float Get_ADC_Voltage(uint16_t *adc_value_buffer) {
 8001240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
	uint64_t sum_adc_value = 0;
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t i = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]
	for (; i < number_of_read; i++) {
 800125a:	e013      	b.n	8001284 <Get_ADC_Voltage+0x44>
		sum_adc_value = sum_adc_value + adc_value_buffer[i];
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	4413      	add	r3, r2
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	2200      	movs	r2, #0
 800126a:	461c      	mov	r4, r3
 800126c:	4615      	mov	r5, r2
 800126e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001272:	eb12 0804 	adds.w	r8, r2, r4
 8001276:	eb43 0905 	adc.w	r9, r3, r5
 800127a:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (; i < number_of_read; i++) {
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	3301      	adds	r3, #1
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	2b63      	cmp	r3, #99	; 0x63
 8001288:	d9e8      	bls.n	800125c <Get_ADC_Voltage+0x1c>
	}

	sum_adc_value = sum_adc_value / number_of_read;
 800128a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800128e:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	f7ff fdd5 	bl	8000e44 <__aeabi_uldivmod>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return (float) (sum_adc_value / 4095.0) * 3.106 * 2.0 * correction_value;
 80012a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012a6:	f7ff f8eb 	bl	8000480 <__aeabi_ul2d>
 80012aa:	a31b      	add	r3, pc, #108	; (adr r3, 8001318 <Get_ADC_Voltage+0xd8>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	f7ff fa46 	bl	8000740 <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fbee 	bl	8000a9c <__aeabi_d2f>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f8ba 	bl	800043c <__aeabi_f2d>
 80012c8:	a315      	add	r3, pc, #84	; (adr r3, 8001320 <Get_ADC_Voltage+0xe0>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff f90d 	bl	80004ec <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	f7fe ff4f 	bl	8000180 <__adddf3>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4614      	mov	r4, r2
 80012e8:	461d      	mov	r5, r3
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <Get_ADC_Voltage+0xe8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f8a4 	bl	800043c <__aeabi_f2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7ff f8f6 	bl	80004ec <__aeabi_dmul>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fbc8 	bl	8000a9c <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001318:	00000000 	.word	0x00000000
 800131c:	40affe00 	.word	0x40affe00
 8001320:	872b020c 	.word	0x872b020c
 8001324:	4008d916 	.word	0x4008d916
 8001328:	20000000 	.word	0x20000000

0800132c <Get_Battery_Current>:
float Get_Battery_Current(float voltage) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	return (float) (voltage - 2.5) / (0.075);
 8001334:	490b      	ldr	r1, [pc, #44]	; (8001364 <Get_Battery_Current+0x38>)
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fc04 	bl	8000b44 <__aeabi_fsub>
 800133c:	4603      	mov	r3, r0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f87c 	bl	800043c <__aeabi_f2d>
 8001344:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <Get_Battery_Current+0x3c>)
 800134a:	f7ff f9f9 	bl	8000740 <__aeabi_ddiv>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f7ff fba1 	bl	8000a9c <__aeabi_d2f>
 800135a:	4603      	mov	r3, r0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40200000 	.word	0x40200000
 8001368:	3fb33333 	.word	0x3fb33333
 800136c:	00000000 	.word	0x00000000

08001370 <Thermistor>:
double Thermistor(int analogValue) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	double temperature;
	temperature = log(((40950000 / analogValue) - 10000));
 8001378:	4a33      	ldr	r2, [pc, #204]	; (8001448 <Thermistor+0xd8>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001380:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8001384:	3b10      	subs	r3, #16
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f846 	bl	8000418 <__aeabi_i2d>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f006 f884 	bl	80074a0 <log>
 8001398:	e9c7 0102 	strd	r0, r1, [r7, #8]
	temperature = 1
			/ (0.001129148
					+ (0.000234125
							+ (0.0000000876741 * temperature * temperature))
 800139c:	a322      	add	r3, pc, #136	; (adr r3, 8001428 <Thermistor+0xb8>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013a6:	f7ff f8a1 	bl	80004ec <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013b6:	f7ff f899 	bl	80004ec <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	a31b      	add	r3, pc, #108	; (adr r3, 8001430 <Thermistor+0xc0>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7fe feda 	bl	8000180 <__adddf3>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
							* temperature);
 80013d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013d8:	f7ff f888 	bl	80004ec <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
					+ (0.000234125
 80013e4:	a314      	add	r3, pc, #80	; (adr r3, 8001438 <Thermistor+0xc8>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7fe fec9 	bl	8000180 <__adddf3>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
	temperature = 1
 80013f2:	f04f 0000 	mov.w	r0, #0
 80013f6:	4915      	ldr	r1, [pc, #84]	; (800144c <Thermistor+0xdc>)
 80013f8:	f7ff f9a2 	bl	8000740 <__aeabi_ddiv>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temperature = temperature - 273.15;
 8001404:	a30e      	add	r3, pc, #56	; (adr r3, 8001440 <Thermistor+0xd0>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800140e:	f7fe feb5 	bl	800017c <__aeabi_dsub>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return temperature;
 800141a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	14170d19 	.word	0x14170d19
 800142c:	3e7788eb 	.word	0x3e7788eb
 8001430:	6fb4c3c2 	.word	0x6fb4c3c2
 8001434:	3f2eafee 	.word	0x3f2eafee
 8001438:	6edeb890 	.word	0x6edeb890
 800143c:	3f527ffd 	.word	0x3f527ffd
 8001440:	66666666 	.word	0x66666666
 8001444:	40711266 	.word	0x40711266
 8001448:	0270d8f0 	.word	0x0270d8f0
 800144c:	3ff00000 	.word	0x3ff00000

08001450 <Battery_Management_System>:
void Battery_Management_System() {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	switch (relayStatus) {
 8001454:	4b25      	ldr	r3, [pc, #148]	; (80014ec <Battery_Management_System+0x9c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d02b      	beq.n	80014b4 <Battery_Management_System+0x64>
 800145c:	2b02      	cmp	r3, #2
 800145e:	dc43      	bgt.n	80014e8 <Battery_Management_System+0x98>
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <Battery_Management_System+0x1a>
 8001464:	2b01      	cmp	r3, #1
 8001466:	d00b      	beq.n	8001480 <Battery_Management_System+0x30>
		if (stBattery.voltage <= stTestParameter.dischargeCutOffVoltage) {
			relayStatusChange(RelayStatus_Idle);
		}
		break;
	}
}
 8001468:	e03e      	b.n	80014e8 <Battery_Management_System+0x98>
		HAL_GPIO_WritePin(relay1_GPIO_Port, relay1_Pin, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2110      	movs	r1, #16
 800146e:	4820      	ldr	r0, [pc, #128]	; (80014f0 <Battery_Management_System+0xa0>)
 8001470:	f001 fec8 	bl	8003204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(relay2_GPIO_Port, relay2_Pin, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	2120      	movs	r1, #32
 8001478:	481d      	ldr	r0, [pc, #116]	; (80014f0 <Battery_Management_System+0xa0>)
 800147a:	f001 fec3 	bl	8003204 <HAL_GPIO_WritePin>
		break;
 800147e:	e033      	b.n	80014e8 <Battery_Management_System+0x98>
		HAL_GPIO_WritePin(relay1_GPIO_Port, relay1_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2110      	movs	r1, #16
 8001484:	481a      	ldr	r0, [pc, #104]	; (80014f0 <Battery_Management_System+0xa0>)
 8001486:	f001 febd 	bl	8003204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(relay2_GPIO_Port, relay2_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	2120      	movs	r1, #32
 800148e:	4818      	ldr	r0, [pc, #96]	; (80014f0 <Battery_Management_System+0xa0>)
 8001490:	f001 feb8 	bl	8003204 <HAL_GPIO_WritePin>
		if (stBattery.voltage >= stTestParameter.chargeCutOffVoltage) {
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <Battery_Management_System+0xa4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <Battery_Management_System+0xa8>)
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fcbc 	bl	8000e1c <__aeabi_fcmpge>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d100      	bne.n	80014ac <Battery_Management_System+0x5c>
		break;
 80014aa:	e01d      	b.n	80014e8 <Battery_Management_System+0x98>
			relayStatusChange(RelayStatus_Idle);
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <Battery_Management_System+0x9c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
		break;
 80014b2:	e019      	b.n	80014e8 <Battery_Management_System+0x98>
		HAL_GPIO_WritePin(relay1_GPIO_Port, relay1_Pin, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2110      	movs	r1, #16
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <Battery_Management_System+0xa0>)
 80014ba:	f001 fea3 	bl	8003204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(relay2_GPIO_Port, relay2_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2120      	movs	r1, #32
 80014c2:	480b      	ldr	r0, [pc, #44]	; (80014f0 <Battery_Management_System+0xa0>)
 80014c4:	f001 fe9e 	bl	8003204 <HAL_GPIO_WritePin>
		if (stBattery.voltage <= stTestParameter.dischargeCutOffVoltage) {
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <Battery_Management_System+0xa4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <Battery_Management_System+0xa8>)
 80014ce:	6852      	ldr	r2, [r2, #4]
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fc98 	bl	8000e08 <__aeabi_fcmple>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d100      	bne.n	80014e0 <Battery_Management_System+0x90>
		break;
 80014de:	e002      	b.n	80014e6 <Battery_Management_System+0x96>
			relayStatusChange(RelayStatus_Idle);
 80014e0:	4b02      	ldr	r3, [pc, #8]	; (80014ec <Battery_Management_System+0x9c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
		break;
 80014e6:	bf00      	nop
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000458 	.word	0x20000458
 80014f0:	40010800 	.word	0x40010800
 80014f4:	200002b8 	.word	0x200002b8
 80014f8:	2000046c 	.word	0x2000046c

080014fc <__io_putchar>:
int __io_putchar(uint8_t ch) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 8001506:	1df9      	adds	r1, r7, #7
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	2201      	movs	r2, #1
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <__io_putchar+0x20>)
 800150e:	f002 fc6e 	bl	8003dee <HAL_UART_Transmit>
	return ch;
 8001512:	79fb      	ldrb	r3, [r7, #7]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000022c 	.word	0x2000022c

08001520 <UART_Cmd>:

void UART_Cmd(char *cmd) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	if (!strcmp(cmd, IDLE)) {
 8001528:	4911      	ldr	r1, [pc, #68]	; (8001570 <UART_Cmd+0x50>)
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7fe fe10 	bl	8000150 <strcmp>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d103      	bne.n	800153e <UART_Cmd+0x1e>
		relayStatusChange(RelayStatus_Idle);
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <UART_Cmd+0x54>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
	} else if (!strcmp(cmd, CHARGE)) {
		relayStatusChange(RelayStatus_Charge);
	} else if (!strcmp(cmd, DISCHARGE)) {
		relayStatusChange(RelayStatus_Discharge);
	}
}
 800153c:	e014      	b.n	8001568 <UART_Cmd+0x48>
	} else if (!strcmp(cmd, CHARGE)) {
 800153e:	490e      	ldr	r1, [pc, #56]	; (8001578 <UART_Cmd+0x58>)
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7fe fe05 	bl	8000150 <strcmp>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d103      	bne.n	8001554 <UART_Cmd+0x34>
		relayStatusChange(RelayStatus_Charge);
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <UART_Cmd+0x54>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
}
 8001552:	e009      	b.n	8001568 <UART_Cmd+0x48>
	} else if (!strcmp(cmd, DISCHARGE)) {
 8001554:	4909      	ldr	r1, [pc, #36]	; (800157c <UART_Cmd+0x5c>)
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7fe fdfa 	bl	8000150 <strcmp>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <UART_Cmd+0x48>
		relayStatusChange(RelayStatus_Discharge);
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <UART_Cmd+0x54>)
 8001564:	2202      	movs	r2, #2
 8001566:	701a      	strb	r2, [r3, #0]
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	08007890 	.word	0x08007890
 8001574:	20000458 	.word	0x20000458
 8001578:	08007898 	.word	0x08007898
 800157c:	080078a0 	.word	0x080078a0

08001580 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <HAL_UARTEx_RxEventCallback+0x58>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d11c      	bne.n	80015d0 <HAL_UARTEx_RxEventCallback+0x50>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) stUSART1.buffer, 10);
 8001596:	220a      	movs	r2, #10
 8001598:	4910      	ldr	r1, [pc, #64]	; (80015dc <HAL_UARTEx_RxEventCallback+0x5c>)
 800159a:	4811      	ldr	r0, [pc, #68]	; (80015e0 <HAL_UARTEx_RxEventCallback+0x60>)
 800159c:	f002 fcb9 	bl	8003f12 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HAL_UARTEx_RxEventCallback+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_UARTEx_RxEventCallback+0x64>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0204 	bic.w	r2, r2, #4
 80015ae:	601a      	str	r2, [r3, #0]
		for (uint8_t i = Size; i < 10; i++) {
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	e006      	b.n	80015c4 <HAL_UARTEx_RxEventCallback+0x44>
			stUSART1.buffer[i] = 0;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_UARTEx_RxEventCallback+0x5c>)
 80015ba:	2100      	movs	r1, #0
 80015bc:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = Size; i < 10; i++) {
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	3301      	adds	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2b09      	cmp	r3, #9
 80015c8:	d9f5      	bls.n	80015b6 <HAL_UARTEx_RxEventCallback+0x36>
		}
		stUSART1.update = true;
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_UARTEx_RxEventCallback+0x5c>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	729a      	strb	r2, [r3, #10]
	}
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40013800 	.word	0x40013800
 80015dc:	2000045c 	.word	0x2000045c
 80015e0:	2000022c 	.word	0x2000022c
 80015e4:	20000270 	.word	0x20000270

080015e8 <Systick_Init>:
void Systick_Init() {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80015ec:	f002 f9ec 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4a09      	ldr	r2, [pc, #36]	; (8001618 <Systick_Init+0x30>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 f9bf 	bl	800297e <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001600:	2004      	movs	r0, #4
 8001602:	f001 f9c9 	bl	8002998 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	f04f 30ff 	mov.w	r0, #4294967295
 800160e:	f001 f98c 	bl	800292a <HAL_NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	10624dd3 	.word	0x10624dd3

0800161c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001622:	f000 fbf1 	bl	8001e08 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001626:	f000 f8cb 	bl	80017c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800162a:	f000 f991 	bl	8001950 <MX_GPIO_Init>
	MX_DMA_Init();
 800162e:	f000 f971 	bl	8001914 <MX_DMA_Init>
	MX_ADC1_Init();
 8001632:	f000 f91d 	bl	8001870 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8001636:	f000 f943 	bl	80018c0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) stUSART1.buffer, 10);
 800163a:	220a      	movs	r2, #10
 800163c:	4951      	ldr	r1, [pc, #324]	; (8001784 <main+0x168>)
 800163e:	4852      	ldr	r0, [pc, #328]	; (8001788 <main+0x16c>)
 8001640:	f002 fc67 	bl	8003f12 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001644:	4b51      	ldr	r3, [pc, #324]	; (800178c <main+0x170>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b50      	ldr	r3, [pc, #320]	; (800178c <main+0x170>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0204 	bic.w	r2, r2, #4
 8001652:	601a      	str	r2, [r3, #0]

	Systick_Init();
 8001654:	f7ff ffc8 	bl	80015e8 <Systick_Init>

	stTestParameter.chargeCutOffVoltage = 4.15;
 8001658:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <main+0x174>)
 800165a:	4a4e      	ldr	r2, [pc, #312]	; (8001794 <main+0x178>)
 800165c:	601a      	str	r2, [r3, #0]
	stTestParameter.dischargeCutOffVoltage = 2.8;
 800165e:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <main+0x174>)
 8001660:	4a4d      	ldr	r2, [pc, #308]	; (8001798 <main+0x17c>)
 8001662:	605a      	str	r2, [r3, #4]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		ADC_Select_Voltage();
 8001664:	f7ff fdae 	bl	80011c4 <ADC_Select_Voltage>
		adc_voltage_value[count] = Get_ADC_Value();
 8001668:	4b4c      	ldr	r3, [pc, #304]	; (800179c <main+0x180>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461c      	mov	r4, r3
 800166e:	f7ff fdc7 	bl	8001200 <Get_ADC_Value>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <main+0x184>)
 8001678:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

		ADC_Select_Current();
 800167c:	f7ff fd66 	bl	800114c <ADC_Select_Current>
		adc_current_value[count] = Get_ADC_Value();
 8001680:	4b46      	ldr	r3, [pc, #280]	; (800179c <main+0x180>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461c      	mov	r4, r3
 8001686:	f7ff fdbb 	bl	8001200 <Get_ADC_Value>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b45      	ldr	r3, [pc, #276]	; (80017a4 <main+0x188>)
 8001690:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

		count++;
 8001694:	4b41      	ldr	r3, [pc, #260]	; (800179c <main+0x180>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b3f      	ldr	r3, [pc, #252]	; (800179c <main+0x180>)
 800169e:	701a      	strb	r2, [r3, #0]

		if (count == number_of_read) {
 80016a0:	4b3e      	ldr	r3, [pc, #248]	; (800179c <main+0x180>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b64      	cmp	r3, #100	; 0x64
 80016a6:	d10a      	bne.n	80016be <main+0xa2>
			count = 0;
 80016a8:	4b3c      	ldr	r3, [pc, #240]	; (800179c <main+0x180>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
			bufferFull = true;
 80016ae:	4b3e      	ldr	r3, [pc, #248]	; (80017a8 <main+0x18c>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
			Battery_Management_System(relayStatus);
 80016b4:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <main+0x190>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fec9 	bl	8001450 <Battery_Management_System>
		}
		if (bufferFull == true) {
 80016be:	4b3a      	ldr	r3, [pc, #232]	; (80017a8 <main+0x18c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01c      	beq.n	8001700 <main+0xe4>
			stBattery.voltage = Get_ADC_Voltage(adc_voltage_value);
 80016c6:	4836      	ldr	r0, [pc, #216]	; (80017a0 <main+0x184>)
 80016c8:	f7ff fdba 	bl	8001240 <Get_ADC_Voltage>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4a38      	ldr	r2, [pc, #224]	; (80017b0 <main+0x194>)
 80016d0:	6013      	str	r3, [r2, #0]
			stBattery.current = Get_Battery_Current(
 80016d2:	4834      	ldr	r0, [pc, #208]	; (80017a4 <main+0x188>)
 80016d4:	f7ff fdb4 	bl	8001240 <Get_ADC_Voltage>
 80016d8:	4603      	mov	r3, r0
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fe26 	bl	800132c <Get_Battery_Current>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a33      	ldr	r2, [pc, #204]	; (80017b0 <main+0x194>)
 80016e4:	6053      	str	r3, [r2, #4]
					Get_ADC_Voltage(adc_current_value));
			ADC_Select_Temperature();
 80016e6:	f7ff fd4f 	bl	8001188 <ADC_Select_Temperature>
			stBattery.temperature = Thermistor(Get_ADC_Value());
 80016ea:	f7ff fd89 	bl	8001200 <Get_ADC_Value>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fe3d 	bl	8001370 <Thermistor>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	492d      	ldr	r1, [pc, #180]	; (80017b0 <main+0x194>)
 80016fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}
		if (stBattery.temperature >= 45.0) {
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <main+0x194>)
 8001702:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <main+0x198>)
 800170c:	f7ff f974 	bl	80009f8 <__aeabi_dcmpge>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <main+0x100>
			relayStatusChange(RelayStatus_Idle);
 8001716:	4b25      	ldr	r3, [pc, #148]	; (80017ac <main+0x190>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
		}
		if (stUSART1.update) {
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <main+0x168>)
 800171e:	7a9b      	ldrb	r3, [r3, #10]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00a      	beq.n	800173a <main+0x11e>
			UART_Cmd(stUSART1.buffer);
 8001724:	4817      	ldr	r0, [pc, #92]	; (8001784 <main+0x168>)
 8001726:	f7ff fefb 	bl	8001520 <UART_Cmd>
			stUSART1.update = false;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <main+0x168>)
 800172c:	2200      	movs	r2, #0
 800172e:	729a      	strb	r2, [r3, #10]
			Battery_Management_System(relayStatus);
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <main+0x190>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fe8b 	bl	8001450 <Battery_Management_System>
		}
		if (stTimer.update) {
 800173a:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <main+0x19c>)
 800173c:	789b      	ldrb	r3, [r3, #2]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d090      	beq.n	8001664 <main+0x48>
			printf("%d/%1.2f/%1.2f/%1.2f\n", relayStatus, stBattery.voltage,
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <main+0x190>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461e      	mov	r6, r3
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <main+0x194>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fe75 	bl	800043c <__aeabi_f2d>
 8001752:	4604      	mov	r4, r0
 8001754:	460d      	mov	r5, r1
					stBattery.current, stBattery.temperature);
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <main+0x194>)
 8001758:	685b      	ldr	r3, [r3, #4]
			printf("%d/%1.2f/%1.2f/%1.2f\n", relayStatus, stBattery.voltage,
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fe6e 	bl	800043c <__aeabi_f2d>
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <main+0x194>)
 8001762:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001766:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800176a:	e9cd 0100 	strd	r0, r1, [sp]
 800176e:	4622      	mov	r2, r4
 8001770:	462b      	mov	r3, r5
 8001772:	4631      	mov	r1, r6
 8001774:	4811      	ldr	r0, [pc, #68]	; (80017bc <main+0x1a0>)
 8001776:	f003 fdcd 	bl	8005314 <iprintf>
			stTimer.update = false;
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <main+0x19c>)
 800177c:	2200      	movs	r2, #0
 800177e:	709a      	strb	r2, [r3, #2]
		ADC_Select_Voltage();
 8001780:	e770      	b.n	8001664 <main+0x48>
 8001782:	bf00      	nop
 8001784:	2000045c 	.word	0x2000045c
 8001788:	2000022c 	.word	0x2000022c
 800178c:	20000270 	.word	0x20000270
 8001790:	2000046c 	.word	0x2000046c
 8001794:	4084cccd 	.word	0x4084cccd
 8001798:	40333333 	.word	0x40333333
 800179c:	200002b4 	.word	0x200002b4
 80017a0:	200002c8 	.word	0x200002c8
 80017a4:	20000390 	.word	0x20000390
 80017a8:	20000459 	.word	0x20000459
 80017ac:	20000458 	.word	0x20000458
 80017b0:	200002b8 	.word	0x200002b8
 80017b4:	40468000 	.word	0x40468000
 80017b8:	20000468 	.word	0x20000468
 80017bc:	080078ac 	.word	0x080078ac

080017c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b094      	sub	sp, #80	; 0x50
 80017c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ca:	2228      	movs	r2, #40	; 0x28
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 f938 	bl	8004a44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017f0:	2301      	movs	r3, #1
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fe:	2301      	movs	r3, #1
 8001800:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001802:	2302      	movs	r3, #2
 8001804:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800180a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800180c:	2300      	movs	r3, #0
 800180e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001810:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001814:	4618      	mov	r0, r3
 8001816:	f001 fd0d 	bl	8003234 <HAL_RCC_OscConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x64>
		Error_Handler();
 8001820:	f000 f8d4 	bl	80019cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001824:	230f      	movs	r3, #15
 8001826:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001828:	2302      	movs	r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f001 ff7a 	bl	8003738 <HAL_RCC_ClockConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0x8e>
		Error_Handler();
 800184a:	f000 f8bf 	bl	80019cc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800184e:	2302      	movs	r3, #2
 8001850:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	4618      	mov	r0, r3
 800185a:	f002 f905 	bl	8003a68 <HAL_RCCEx_PeriphCLKConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0xa8>
		Error_Handler();
 8001864:	f000 f8b2 	bl	80019cc <Error_Handler>
	}
}
 8001868:	bf00      	nop
 800186a:	3750      	adds	r7, #80	; 0x50
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <MX_ADC1_Init+0x48>)
 8001876:	4a11      	ldr	r2, [pc, #68]	; (80018bc <MX_ADC1_Init+0x4c>)
 8001878:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_ADC1_Init+0x48>)
 800187c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001880:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <MX_ADC1_Init+0x48>)
 8001884:	2201      	movs	r2, #1
 8001886:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <MX_ADC1_Init+0x48>)
 800188a:	2200      	movs	r2, #0
 800188c:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <MX_ADC1_Init+0x48>)
 8001890:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001894:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_ADC1_Init+0x48>)
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_ADC1_Init+0x48>)
 800189e:	2201      	movs	r2, #1
 80018a0:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_ADC1_Init+0x48>)
 80018a4:	f000 fb12 	bl	8001ecc <HAL_ADC_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_ADC1_Init+0x42>
		Error_Handler();
 80018ae:	f000 f88d 	bl	80019cc <Error_Handler>

	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200001fc 	.word	0x200001fc
 80018bc:	40012400 	.word	0x40012400

080018c0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <MX_USART1_UART_Init+0x50>)
 80018c8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018f8:	f002 fa2c 	bl	8003d54 <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001902:	f000 f863 	bl	80019cc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000022c 	.word	0x2000022c
 8001910:	40013800 	.word	0x40013800

08001914 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_DMA_Init+0x38>)
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <MX_DMA_Init+0x38>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6153      	str	r3, [r2, #20]
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_DMA_Init+0x38>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	200f      	movs	r0, #15
 8001938:	f000 fff7 	bl	800292a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800193c:	200f      	movs	r0, #15
 800193e:	f001 f810 	bl	8002962 <HAL_NVIC_EnableIRQ>

}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000

08001950 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <MX_GPIO_Init+0x74>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a16      	ldr	r2, [pc, #88]	; (80019c4 <MX_GPIO_Init+0x74>)
 800196a:	f043 0320 	orr.w	r3, r3, #32
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_GPIO_Init+0x74>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_GPIO_Init+0x74>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <MX_GPIO_Init+0x74>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_GPIO_Init+0x74>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, relay1_Pin | relay2_Pin, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2130      	movs	r1, #48	; 0x30
 8001998:	480b      	ldr	r0, [pc, #44]	; (80019c8 <MX_GPIO_Init+0x78>)
 800199a:	f001 fc33 	bl	8003204 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : relay1_Pin relay2_Pin */
	GPIO_InitStruct.Pin = relay1_Pin | relay2_Pin;
 800199e:	2330      	movs	r3, #48	; 0x30
 80019a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2302      	movs	r3, #2
 80019ac:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	4619      	mov	r1, r3
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <MX_GPIO_Init+0x78>)
 80019b6:	f001 faa9 	bl	8002f0c <HAL_GPIO_Init>

}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010800 	.word	0x40010800

080019cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019d4:	e7fe      	b.n	80019d4 <Error_Handler+0x8>
	...

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_MspInit+0x40>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <HAL_MspInit+0x40>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_MspInit+0x40>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_MspInit+0x40>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_MspInit+0x40>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_MspInit+0x40>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_ADC_MspInit+0x6c>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d121      	bne.n	8001a80 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <HAL_ADC_MspInit+0x70>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <HAL_ADC_MspInit+0x70>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_ADC_MspInit+0x70>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_ADC_MspInit+0x70>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <HAL_ADC_MspInit+0x70>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_ADC_MspInit+0x70>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a70:	2303      	movs	r3, #3
 8001a72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <HAL_ADC_MspInit+0x74>)
 8001a7c:	f001 fa46 	bl	8002f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40012400 	.word	0x40012400
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010800 	.word	0x40010800

08001a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a33      	ldr	r2, [pc, #204]	; (8001b7c <HAL_UART_MspInit+0xe8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d15f      	bne.n	8001b74 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ab4:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a31      	ldr	r2, [pc, #196]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001acc:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a2b      	ldr	r2, [pc, #172]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	4619      	mov	r1, r3
 8001af8:	4822      	ldr	r0, [pc, #136]	; (8001b84 <HAL_UART_MspInit+0xf0>)
 8001afa:	f001 fa07 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	4619      	mov	r1, r3
 8001b12:	481c      	ldr	r0, [pc, #112]	; (8001b84 <HAL_UART_MspInit+0xf0>)
 8001b14:	f001 f9fa 	bl	8002f0c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_UART_MspInit+0xf4>)
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <HAL_UART_MspInit+0xf8>)
 8001b1c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_UART_MspInit+0xf4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_UART_MspInit+0xf4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_UART_MspInit+0xf4>)
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_UART_MspInit+0xf4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_UART_MspInit+0xf4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_UART_MspInit+0xf4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_UART_MspInit+0xf4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b48:	480f      	ldr	r0, [pc, #60]	; (8001b88 <HAL_UART_MspInit+0xf4>)
 8001b4a:	f000 ff41 	bl	80029d0 <HAL_DMA_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001b54:	f7ff ff3a 	bl	80019cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_UART_MspInit+0xf4>)
 8001b5c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_UART_MspInit+0xf4>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	2025      	movs	r0, #37	; 0x25
 8001b6a:	f000 fede 	bl	800292a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b6e:	2025      	movs	r0, #37	; 0x25
 8001b70:	f000 fef7 	bl	8002962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40010800 	.word	0x40010800
 8001b88:	20000270 	.word	0x20000270
 8001b8c:	40020058 	.word	0x40020058

08001b90 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001b94:	e7fe      	b.n	8001b94 <NMI_Handler+0x4>

08001b96 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001b9a:	e7fe      	b.n	8001b9a <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001ba0:	e7fe      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba2 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001ba6:	e7fe      	b.n	8001ba6 <BusFault_Handler+0x4>

08001ba8 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001bac:	e7fe      	b.n	8001bac <UsageFault_Handler+0x4>

08001bae <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr

08001bc6 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
	...

08001bd4 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	stTimer.tick++;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <SysTick_Handler+0x30>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <SysTick_Handler+0x30>)
 8001be2:	801a      	strh	r2, [r3, #0]
	if (stTimer.tick == 1000) {
 8001be4:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <SysTick_Handler+0x30>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bec:	d105      	bne.n	8001bfa <SysTick_Handler+0x26>
		stTimer.update = true;
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <SysTick_Handler+0x30>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	709a      	strb	r2, [r3, #2]
		stTimer.tick = 0;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <SysTick_Handler+0x30>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	801a      	strh	r2, [r3, #0]
	}
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001bfa:	f000 f94b 	bl	8001e94 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000468 	.word	0x20000468

08001c08 <DMA1_Channel5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

	/* USER CODE END DMA1_Channel5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <DMA1_Channel5_IRQHandler+0x10>)
 8001c0e:	f001 f849 	bl	8002ca4 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

	/* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000270 	.word	0x20000270

08001c1c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <USART1_IRQHandler+0x10>)
 8001c22:	f002 f9c5 	bl	8003fb0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000022c 	.word	0x2000022c

08001c30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return 1;
 8001c34:	2301      	movs	r3, #1
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <_kill>:

int _kill(int pid, int sig)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c48:	f002 fed2 	bl	80049f0 <__errno>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2216      	movs	r2, #22
 8001c50:	601a      	str	r2, [r3, #0]
  return -1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_exit>:

void _exit (int status)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c66:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffe7 	bl	8001c3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c70:	e7fe      	b.n	8001c70 <_exit+0x12>

08001c72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e00a      	b.n	8001c9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c84:	f3af 8000 	nop.w
 8001c88:	4601      	mov	r1, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	60ba      	str	r2, [r7, #8]
 8001c90:	b2ca      	uxtb	r2, r1
 8001c92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbf0      	blt.n	8001c84 <_read+0x12>
  }

  return len;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e009      	b.n	8001cd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	60ba      	str	r2, [r7, #8]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fc18 	bl	80014fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dbf1      	blt.n	8001cbe <_write+0x12>
  }
  return len;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_close>:

int _close(int file)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <_isatty>:

int _isatty(int file)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d4c:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <_sbrk+0x5c>)
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <_sbrk+0x60>)
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <_sbrk+0x64>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	; (8001dac <_sbrk+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d207      	bcs.n	8001d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d74:	f002 fe3c 	bl	80049f0 <__errno>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	e009      	b.n	8001d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <_sbrk+0x64>)
 8001d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20002800 	.word	0x20002800
 8001da4:	00000400 	.word	0x00000400
 8001da8:	20000474 	.word	0x20000474
 8001dac:	20000490 	.word	0x20000490

08001db0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dbc:	480c      	ldr	r0, [pc, #48]	; (8001df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dbe:	490d      	ldr	r1, [pc, #52]	; (8001df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd4:	4c0a      	ldr	r4, [pc, #40]	; (8001e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001de2:	f7ff ffe5 	bl	8001db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de6:	f002 fe09 	bl	80049fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dea:	f7ff fc17 	bl	800161c <main>
  bx lr
 8001dee:	4770      	bx	lr
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001df8:	08007ce4 	.word	0x08007ce4
  ldr r2, =_sbss
 8001dfc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e00:	2000048c 	.word	0x2000048c

08001e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC1_2_IRQHandler>
	...

08001e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_Init+0x28>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_Init+0x28>)
 8001e12:	f043 0310 	orr.w	r3, r3, #16
 8001e16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f000 fd7b 	bl	8002914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1e:	200f      	movs	r0, #15
 8001e20:	f000 f808 	bl	8001e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e24:	f7ff fdd8 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40022000 	.word	0x40022000

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_InitTick+0x54>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_InitTick+0x58>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fd93 	bl	800297e <HAL_SYSTICK_Config>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00e      	b.n	8001e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b0f      	cmp	r3, #15
 8001e66:	d80a      	bhi.n	8001e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f000 fd5b 	bl	800292a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e74:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <HAL_InitTick+0x5c>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e000      	b.n	8001e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	2000000c 	.word	0x2000000c
 8001e90:	20000008 	.word	0x20000008

08001e94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_IncTick+0x1c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_IncTick+0x20>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <HAL_IncTick+0x20>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	2000000c 	.word	0x2000000c
 8001eb4:	20000478 	.word	0x20000478

08001eb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <HAL_GetTick+0x10>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	20000478 	.word	0x20000478

08001ecc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e0be      	b.n	800206c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fd86 	bl	8001a1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fbf1 	bl	80026f8 <ADC_ConversionStop_Disable>
 8001f16:	4603      	mov	r3, r0
 8001f18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f040 8099 	bne.w	800205a <HAL_ADC_Init+0x18e>
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 8095 	bne.w	800205a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f38:	f023 0302 	bic.w	r3, r3, #2
 8001f3c:	f043 0202 	orr.w	r2, r3, #2
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f4c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7b1b      	ldrb	r3, [r3, #12]
 8001f52:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f54:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f64:	d003      	beq.n	8001f6e <HAL_ADC_Init+0xa2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d102      	bne.n	8001f74 <HAL_ADC_Init+0xa8>
 8001f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f72:	e000      	b.n	8001f76 <HAL_ADC_Init+0xaa>
 8001f74:	2300      	movs	r3, #0
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7d1b      	ldrb	r3, [r3, #20]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d119      	bne.n	8001fb8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7b1b      	ldrb	r3, [r3, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	035a      	lsls	r2, r3, #13
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	f043 0220 	orr.w	r2, r3, #32
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	f043 0201 	orr.w	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	4b28      	ldr	r3, [pc, #160]	; (8002074 <HAL_ADC_Init+0x1a8>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	68b9      	ldr	r1, [r7, #8]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe8:	d003      	beq.n	8001ff2 <HAL_ADC_Init+0x126>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d104      	bne.n	8001ffc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	051b      	lsls	r3, r3, #20
 8001ffa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	430a      	orrs	r2, r1
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_ADC_Init+0x1ac>)
 8002018:	4013      	ands	r3, r2
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	429a      	cmp	r2, r3
 800201e:	d10b      	bne.n	8002038 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002036:	e018      	b.n	800206a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	f023 0312 	bic.w	r3, r3, #18
 8002040:	f043 0210 	orr.w	r2, r3, #16
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002058:	e007      	b.n	800206a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	f043 0210 	orr.w	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800206a:	7dfb      	ldrb	r3, [r7, #23]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	ffe1f7fd 	.word	0xffe1f7fd
 8002078:	ff1f0efe 	.word	0xff1f0efe

0800207c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_ADC_Start+0x1a>
 8002092:	2302      	movs	r3, #2
 8002094:	e098      	b.n	80021c8 <HAL_ADC_Start+0x14c>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fad0 	bl	8002644 <ADC_Enable>
 80020a4:	4603      	mov	r3, r0
 80020a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 8087 	bne.w	80021be <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a41      	ldr	r2, [pc, #260]	; (80021d0 <HAL_ADC_Start+0x154>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d105      	bne.n	80020da <HAL_ADC_Start+0x5e>
 80020ce:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <HAL_ADC_Start+0x158>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d115      	bne.n	8002106 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d026      	beq.n	8002142 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002104:	e01d      	b.n	8002142 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <HAL_ADC_Start+0x158>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_ADC_Start+0xaa>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <HAL_ADC_Start+0x154>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10d      	bne.n	8002142 <HAL_ADC_Start+0xc6>
 8002126:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <HAL_ADC_Start+0x158>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800213a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f023 0206 	bic.w	r2, r3, #6
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	62da      	str	r2, [r3, #44]	; 0x2c
 800215a:	e002      	b.n	8002162 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f06f 0202 	mvn.w	r2, #2
 8002172:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800217e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002182:	d113      	bne.n	80021ac <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002188:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <HAL_ADC_Start+0x154>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d105      	bne.n	800219a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_ADC_Start+0x158>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d108      	bne.n	80021ac <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	e00c      	b.n	80021c6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e003      	b.n	80021c6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40012800 	.word	0x40012800
 80021d4:	40012400 	.word	0x40012400

080021d8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_Stop+0x1a>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e01a      	b.n	8002228 <HAL_ADC_Stop+0x50>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fa7c 	bl	80026f8 <ADC_ConversionStop_Disable>
 8002200:	4603      	mov	r3, r0
 8002202:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	f043 0201 	orr.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002230:	b590      	push	{r4, r7, lr}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002246:	f7ff fe37 	bl	8001eb8 <HAL_GetTick>
 800224a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	f043 0220 	orr.w	r2, r3, #32
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e0d3      	b.n	800241a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d131      	bne.n	80022e4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d12a      	bne.n	80022e4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800228e:	e021      	b.n	80022d4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002296:	d01d      	beq.n	80022d4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <HAL_ADC_PollForConversion+0x7e>
 800229e:	f7ff fe0b 	bl	8001eb8 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d212      	bcs.n	80022d4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10b      	bne.n	80022d4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	f043 0204 	orr.w	r2, r3, #4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0a2      	b.n	800241a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0d6      	beq.n	8002290 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022e2:	e070      	b.n	80023c6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80022e4:	4b4f      	ldr	r3, [pc, #316]	; (8002424 <HAL_ADC_PollForConversion+0x1f4>)
 80022e6:	681c      	ldr	r4, [r3, #0]
 80022e8:	2002      	movs	r0, #2
 80022ea:	f001 fc73 	bl	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq>
 80022ee:	4603      	mov	r3, r0
 80022f0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6919      	ldr	r1, [r3, #16]
 80022fa:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <HAL_ADC_PollForConversion+0x1f8>)
 80022fc:	400b      	ands	r3, r1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d118      	bne.n	8002334 <HAL_ADC_PollForConversion+0x104>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68d9      	ldr	r1, [r3, #12]
 8002308:	4b48      	ldr	r3, [pc, #288]	; (800242c <HAL_ADC_PollForConversion+0x1fc>)
 800230a:	400b      	ands	r3, r1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d111      	bne.n	8002334 <HAL_ADC_PollForConversion+0x104>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6919      	ldr	r1, [r3, #16]
 8002316:	4b46      	ldr	r3, [pc, #280]	; (8002430 <HAL_ADC_PollForConversion+0x200>)
 8002318:	400b      	ands	r3, r1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d108      	bne.n	8002330 <HAL_ADC_PollForConversion+0x100>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68d9      	ldr	r1, [r3, #12]
 8002324:	4b43      	ldr	r3, [pc, #268]	; (8002434 <HAL_ADC_PollForConversion+0x204>)
 8002326:	400b      	ands	r3, r1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_PollForConversion+0x100>
 800232c:	2314      	movs	r3, #20
 800232e:	e020      	b.n	8002372 <HAL_ADC_PollForConversion+0x142>
 8002330:	2329      	movs	r3, #41	; 0x29
 8002332:	e01e      	b.n	8002372 <HAL_ADC_PollForConversion+0x142>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6919      	ldr	r1, [r3, #16]
 800233a:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <HAL_ADC_PollForConversion+0x200>)
 800233c:	400b      	ands	r3, r1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_ADC_PollForConversion+0x120>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68d9      	ldr	r1, [r3, #12]
 8002348:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_ADC_PollForConversion+0x204>)
 800234a:	400b      	ands	r3, r1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00d      	beq.n	800236c <HAL_ADC_PollForConversion+0x13c>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	4b38      	ldr	r3, [pc, #224]	; (8002438 <HAL_ADC_PollForConversion+0x208>)
 8002358:	400b      	ands	r3, r1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d108      	bne.n	8002370 <HAL_ADC_PollForConversion+0x140>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68d9      	ldr	r1, [r3, #12]
 8002364:	4b34      	ldr	r3, [pc, #208]	; (8002438 <HAL_ADC_PollForConversion+0x208>)
 8002366:	400b      	ands	r3, r1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_ADC_PollForConversion+0x140>
 800236c:	2354      	movs	r3, #84	; 0x54
 800236e:	e000      	b.n	8002372 <HAL_ADC_PollForConversion+0x142>
 8002370:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002378:	e021      	b.n	80023be <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d01a      	beq.n	80023b8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_ADC_PollForConversion+0x168>
 8002388:	f7ff fd96 	bl	8001eb8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d20f      	bcs.n	80023b8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	429a      	cmp	r2, r3
 800239e:	d90b      	bls.n	80023b8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e030      	b.n	800241a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3301      	adds	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d8d9      	bhi.n	800237a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0212 	mvn.w	r2, #18
 80023ce:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023ea:	d115      	bne.n	8002418 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d111      	bne.n	8002418 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d105      	bne.n	8002418 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd90      	pop	{r4, r7, pc}
 8002422:	bf00      	nop
 8002424:	20000004 	.word	0x20000004
 8002428:	24924924 	.word	0x24924924
 800242c:	00924924 	.word	0x00924924
 8002430:	12492492 	.word	0x12492492
 8002434:	00492492 	.word	0x00492492
 8002438:	00249249 	.word	0x00249249

0800243c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x20>
 8002470:	2302      	movs	r3, #2
 8002472:	e0dc      	b.n	800262e <HAL_ADC_ConfigChannel+0x1da>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b06      	cmp	r3, #6
 8002482:	d81c      	bhi.n	80024be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b05      	subs	r3, #5
 8002496:	221f      	movs	r2, #31
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	4019      	ands	r1, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	3b05      	subs	r3, #5
 80024b0:	fa00 f203 	lsl.w	r2, r0, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	635a      	str	r2, [r3, #52]	; 0x34
 80024bc:	e03c      	b.n	8002538 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	d81c      	bhi.n	8002500 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	3b23      	subs	r3, #35	; 0x23
 80024d8:	221f      	movs	r2, #31
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	4019      	ands	r1, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	3b23      	subs	r3, #35	; 0x23
 80024f2:	fa00 f203 	lsl.w	r2, r0, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
 80024fe:	e01b      	b.n	8002538 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	3b41      	subs	r3, #65	; 0x41
 8002512:	221f      	movs	r2, #31
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	4019      	ands	r1, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3b41      	subs	r3, #65	; 0x41
 800252c:	fa00 f203 	lsl.w	r2, r0, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b09      	cmp	r3, #9
 800253e:	d91c      	bls.n	800257a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68d9      	ldr	r1, [r3, #12]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	3b1e      	subs	r3, #30
 8002552:	2207      	movs	r2, #7
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	4019      	ands	r1, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6898      	ldr	r0, [r3, #8]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	3b1e      	subs	r3, #30
 800256c:	fa00 f203 	lsl.w	r2, r0, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	e019      	b.n	80025ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6919      	ldr	r1, [r3, #16]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	2207      	movs	r2, #7
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	4019      	ands	r1, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6898      	ldr	r0, [r3, #8]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	fa00 f203 	lsl.w	r2, r0, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b10      	cmp	r3, #16
 80025b4:	d003      	beq.n	80025be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025ba:	2b11      	cmp	r3, #17
 80025bc:	d132      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <HAL_ADC_ConfigChannel+0x1e4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d125      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d126      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025e4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d11a      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <HAL_ADC_ConfigChannel+0x1e8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a13      	ldr	r2, [pc, #76]	; (8002640 <HAL_ADC_ConfigChannel+0x1ec>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	0c9a      	lsrs	r2, r3, #18
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002604:	e002      	b.n	800260c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3b01      	subs	r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f9      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x1b2>
 8002612:	e007      	b.n	8002624 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	f043 0220 	orr.w	r2, r3, #32
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	40012400 	.word	0x40012400
 800263c:	20000004 	.word	0x20000004
 8002640:	431bde83 	.word	0x431bde83

08002644 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b01      	cmp	r3, #1
 8002660:	d040      	beq.n	80026e4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0201 	orr.w	r2, r2, #1
 8002670:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002672:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <ADC_Enable+0xac>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <ADC_Enable+0xb0>)
 8002678:	fba2 2303 	umull	r2, r3, r2, r3
 800267c:	0c9b      	lsrs	r3, r3, #18
 800267e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002680:	e002      	b.n	8002688 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3b01      	subs	r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f9      	bne.n	8002682 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800268e:	f7ff fc13 	bl	8001eb8 <HAL_GetTick>
 8002692:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002694:	e01f      	b.n	80026d6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002696:	f7ff fc0f 	bl	8001eb8 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d918      	bls.n	80026d6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d011      	beq.n	80026d6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	f043 0210 	orr.w	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e007      	b.n	80026e6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d1d8      	bne.n	8002696 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000004 	.word	0x20000004
 80026f4:	431bde83 	.word	0x431bde83

080026f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d12e      	bne.n	8002770 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002722:	f7ff fbc9 	bl	8001eb8 <HAL_GetTick>
 8002726:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002728:	e01b      	b.n	8002762 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800272a:	f7ff fbc5 	bl	8001eb8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d914      	bls.n	8002762 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d10d      	bne.n	8002762 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	f043 0210 	orr.w	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e007      	b.n	8002772 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d0dc      	beq.n	800272a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002798:	4013      	ands	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ae:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60d3      	str	r3, [r2, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <__NVIC_GetPriorityGrouping+0x18>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 0307 	and.w	r3, r3, #7
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db0b      	blt.n	800280a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4906      	ldr	r1, [pc, #24]	; (8002814 <__NVIC_EnableIRQ+0x34>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2001      	movs	r0, #1
 8002802:	fa00 f202 	lsl.w	r2, r0, r2
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	e000e100 	.word	0xe000e100

08002818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	6039      	str	r1, [r7, #0]
 8002822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	2b00      	cmp	r3, #0
 800282a:	db0a      	blt.n	8002842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	490c      	ldr	r1, [pc, #48]	; (8002864 <__NVIC_SetPriority+0x4c>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	0112      	lsls	r2, r2, #4
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	440b      	add	r3, r1
 800283c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002840:	e00a      	b.n	8002858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4908      	ldr	r1, [pc, #32]	; (8002868 <__NVIC_SetPriority+0x50>)
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	3b04      	subs	r3, #4
 8002850:	0112      	lsls	r2, r2, #4
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	440b      	add	r3, r1
 8002856:	761a      	strb	r2, [r3, #24]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000e100 	.word	0xe000e100
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f1c3 0307 	rsb	r3, r3, #7
 8002886:	2b04      	cmp	r3, #4
 8002888:	bf28      	it	cs
 800288a:	2304      	movcs	r3, #4
 800288c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3304      	adds	r3, #4
 8002892:	2b06      	cmp	r3, #6
 8002894:	d902      	bls.n	800289c <NVIC_EncodePriority+0x30>
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3b03      	subs	r3, #3
 800289a:	e000      	b.n	800289e <NVIC_EncodePriority+0x32>
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	401a      	ands	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	43d9      	mvns	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	4313      	orrs	r3, r2
         );
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e0:	d301      	bcc.n	80028e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e2:	2301      	movs	r3, #1
 80028e4:	e00f      	b.n	8002906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e6:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <SysTick_Config+0x40>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ee:	210f      	movs	r1, #15
 80028f0:	f04f 30ff 	mov.w	r0, #4294967295
 80028f4:	f7ff ff90 	bl	8002818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <SysTick_Config+0x40>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fe:	4b04      	ldr	r3, [pc, #16]	; (8002910 <SysTick_Config+0x40>)
 8002900:	2207      	movs	r2, #7
 8002902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	e000e010 	.word	0xe000e010

08002914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ff2d 	bl	800277c <__NVIC_SetPriorityGrouping>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	4603      	mov	r3, r0
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800293c:	f7ff ff42 	bl	80027c4 <__NVIC_GetPriorityGrouping>
 8002940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	6978      	ldr	r0, [r7, #20]
 8002948:	f7ff ff90 	bl	800286c <NVIC_EncodePriority>
 800294c:	4602      	mov	r2, r0
 800294e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff5f 	bl	8002818 <__NVIC_SetPriority>
}
 800295a:	bf00      	nop
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	4603      	mov	r3, r0
 800296a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800296c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff35 	bl	80027e0 <__NVIC_EnableIRQ>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ffa2 	bl	80028d0 <SysTick_Config>
 800298c:	4603      	mov	r3, r0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d106      	bne.n	80029b4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a08      	ldr	r2, [pc, #32]	; (80029cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80029b2:	e005      	b.n	80029c0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80029ba:	f023 0304 	bic.w	r3, r3, #4
 80029be:	6013      	str	r3, [r2, #0]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000e010 	.word	0xe000e010

080029d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e043      	b.n	8002a6e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_DMA_Init+0xa8>)
 80029ee:	4413      	add	r3, r2
 80029f0:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_DMA_Init+0xac>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	009a      	lsls	r2, r3, #2
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <HAL_DMA_Init+0xb0>)
 8002a02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	bffdfff8 	.word	0xbffdfff8
 8002a7c:	cccccccd 	.word	0xcccccccd
 8002a80:	40020000 	.word	0x40020000

08002a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_DMA_Start_IT+0x20>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e04a      	b.n	8002b3a <HAL_DMA_Start_IT+0xb6>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d13a      	bne.n	8002b2c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f9e8 	bl	8002eb0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 020e 	orr.w	r2, r2, #14
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e00f      	b.n	8002b1a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0204 	bic.w	r2, r2, #4
 8002b08:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 020a 	orr.w	r2, r2, #10
 8002b18:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e005      	b.n	8002b38 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
 8002b36:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b085      	sub	sp, #20
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d008      	beq.n	8002b6a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e020      	b.n	8002bac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 020e 	bic.w	r2, r2, #14
 8002b78:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f202 	lsl.w	r2, r1, r2
 8002b98:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d005      	beq.n	8002bda <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
 8002bd8:	e051      	b.n	8002c7e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 020e 	bic.w	r2, r2, #14
 8002be8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <HAL_DMA_Abort_IT+0xd0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d029      	beq.n	8002c58 <HAL_DMA_Abort_IT+0xa0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <HAL_DMA_Abort_IT+0xd4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d022      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x9c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <HAL_DMA_Abort_IT+0xd8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d01a      	beq.n	8002c4e <HAL_DMA_Abort_IT+0x96>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1d      	ldr	r2, [pc, #116]	; (8002c94 <HAL_DMA_Abort_IT+0xdc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d012      	beq.n	8002c48 <HAL_DMA_Abort_IT+0x90>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1c      	ldr	r2, [pc, #112]	; (8002c98 <HAL_DMA_Abort_IT+0xe0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00a      	beq.n	8002c42 <HAL_DMA_Abort_IT+0x8a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1a      	ldr	r2, [pc, #104]	; (8002c9c <HAL_DMA_Abort_IT+0xe4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d102      	bne.n	8002c3c <HAL_DMA_Abort_IT+0x84>
 8002c36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c3a:	e00e      	b.n	8002c5a <HAL_DMA_Abort_IT+0xa2>
 8002c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c40:	e00b      	b.n	8002c5a <HAL_DMA_Abort_IT+0xa2>
 8002c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c46:	e008      	b.n	8002c5a <HAL_DMA_Abort_IT+0xa2>
 8002c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c4c:	e005      	b.n	8002c5a <HAL_DMA_Abort_IT+0xa2>
 8002c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c52:	e002      	b.n	8002c5a <HAL_DMA_Abort_IT+0xa2>
 8002c54:	2310      	movs	r3, #16
 8002c56:	e000      	b.n	8002c5a <HAL_DMA_Abort_IT+0xa2>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	4a11      	ldr	r2, [pc, #68]	; (8002ca0 <HAL_DMA_Abort_IT+0xe8>)
 8002c5c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
    } 
  }
  return status;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40020008 	.word	0x40020008
 8002c8c:	4002001c 	.word	0x4002001c
 8002c90:	40020030 	.word	0x40020030
 8002c94:	40020044 	.word	0x40020044
 8002c98:	40020058 	.word	0x40020058
 8002c9c:	4002006c 	.word	0x4002006c
 8002ca0:	40020000 	.word	0x40020000

08002ca4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d04f      	beq.n	8002d6c <HAL_DMA_IRQHandler+0xc8>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d04a      	beq.n	8002d6c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a66      	ldr	r2, [pc, #408]	; (8002e94 <HAL_DMA_IRQHandler+0x1f0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d029      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xae>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a65      	ldr	r2, [pc, #404]	; (8002e98 <HAL_DMA_IRQHandler+0x1f4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d022      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xaa>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a63      	ldr	r2, [pc, #396]	; (8002e9c <HAL_DMA_IRQHandler+0x1f8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01a      	beq.n	8002d48 <HAL_DMA_IRQHandler+0xa4>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a62      	ldr	r2, [pc, #392]	; (8002ea0 <HAL_DMA_IRQHandler+0x1fc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d012      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x9e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a60      	ldr	r2, [pc, #384]	; (8002ea4 <HAL_DMA_IRQHandler+0x200>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00a      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x98>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a5f      	ldr	r2, [pc, #380]	; (8002ea8 <HAL_DMA_IRQHandler+0x204>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d102      	bne.n	8002d36 <HAL_DMA_IRQHandler+0x92>
 8002d30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d34:	e00e      	b.n	8002d54 <HAL_DMA_IRQHandler+0xb0>
 8002d36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d3a:	e00b      	b.n	8002d54 <HAL_DMA_IRQHandler+0xb0>
 8002d3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d40:	e008      	b.n	8002d54 <HAL_DMA_IRQHandler+0xb0>
 8002d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d46:	e005      	b.n	8002d54 <HAL_DMA_IRQHandler+0xb0>
 8002d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d4c:	e002      	b.n	8002d54 <HAL_DMA_IRQHandler+0xb0>
 8002d4e:	2340      	movs	r3, #64	; 0x40
 8002d50:	e000      	b.n	8002d54 <HAL_DMA_IRQHandler+0xb0>
 8002d52:	2304      	movs	r3, #4
 8002d54:	4a55      	ldr	r2, [pc, #340]	; (8002eac <HAL_DMA_IRQHandler+0x208>)
 8002d56:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8094 	beq.w	8002e8a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d6a:	e08e      	b.n	8002e8a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	2202      	movs	r2, #2
 8002d72:	409a      	lsls	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d056      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x186>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d051      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10b      	bne.n	8002dac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 020a 	bic.w	r2, r2, #10
 8002da2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a38      	ldr	r2, [pc, #224]	; (8002e94 <HAL_DMA_IRQHandler+0x1f0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d029      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x166>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a37      	ldr	r2, [pc, #220]	; (8002e98 <HAL_DMA_IRQHandler+0x1f4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d022      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x162>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a35      	ldr	r2, [pc, #212]	; (8002e9c <HAL_DMA_IRQHandler+0x1f8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d01a      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x15c>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a34      	ldr	r2, [pc, #208]	; (8002ea0 <HAL_DMA_IRQHandler+0x1fc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d012      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x156>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a32      	ldr	r2, [pc, #200]	; (8002ea4 <HAL_DMA_IRQHandler+0x200>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00a      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x150>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a31      	ldr	r2, [pc, #196]	; (8002ea8 <HAL_DMA_IRQHandler+0x204>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d102      	bne.n	8002dee <HAL_DMA_IRQHandler+0x14a>
 8002de8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dec:	e00e      	b.n	8002e0c <HAL_DMA_IRQHandler+0x168>
 8002dee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002df2:	e00b      	b.n	8002e0c <HAL_DMA_IRQHandler+0x168>
 8002df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002df8:	e008      	b.n	8002e0c <HAL_DMA_IRQHandler+0x168>
 8002dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dfe:	e005      	b.n	8002e0c <HAL_DMA_IRQHandler+0x168>
 8002e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e04:	e002      	b.n	8002e0c <HAL_DMA_IRQHandler+0x168>
 8002e06:	2320      	movs	r3, #32
 8002e08:	e000      	b.n	8002e0c <HAL_DMA_IRQHandler+0x168>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	4a27      	ldr	r2, [pc, #156]	; (8002eac <HAL_DMA_IRQHandler+0x208>)
 8002e0e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d034      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e28:	e02f      	b.n	8002e8a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2208      	movs	r2, #8
 8002e30:	409a      	lsls	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d028      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x1e8>
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d023      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 020e 	bic.w	r2, r2, #14
 8002e52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d004      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
    }
  }
  return;
 8002e8a:	bf00      	nop
 8002e8c:	bf00      	nop
}
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40020008 	.word	0x40020008
 8002e98:	4002001c 	.word	0x4002001c
 8002e9c:	40020030 	.word	0x40020030
 8002ea0:	40020044 	.word	0x40020044
 8002ea4:	40020058 	.word	0x40020058
 8002ea8:	4002006c 	.word	0x4002006c
 8002eac:	40020000 	.word	0x40020000

08002eb0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ecc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d108      	bne.n	8002ef0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002eee:	e007      	b.n	8002f00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b08b      	sub	sp, #44	; 0x2c
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f1e:	e161      	b.n	80031e4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f20:	2201      	movs	r2, #1
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	f040 8150 	bne.w	80031de <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4a97      	ldr	r2, [pc, #604]	; (80031a0 <HAL_GPIO_Init+0x294>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d05e      	beq.n	8003006 <HAL_GPIO_Init+0xfa>
 8002f48:	4a95      	ldr	r2, [pc, #596]	; (80031a0 <HAL_GPIO_Init+0x294>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d875      	bhi.n	800303a <HAL_GPIO_Init+0x12e>
 8002f4e:	4a95      	ldr	r2, [pc, #596]	; (80031a4 <HAL_GPIO_Init+0x298>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d058      	beq.n	8003006 <HAL_GPIO_Init+0xfa>
 8002f54:	4a93      	ldr	r2, [pc, #588]	; (80031a4 <HAL_GPIO_Init+0x298>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d86f      	bhi.n	800303a <HAL_GPIO_Init+0x12e>
 8002f5a:	4a93      	ldr	r2, [pc, #588]	; (80031a8 <HAL_GPIO_Init+0x29c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d052      	beq.n	8003006 <HAL_GPIO_Init+0xfa>
 8002f60:	4a91      	ldr	r2, [pc, #580]	; (80031a8 <HAL_GPIO_Init+0x29c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d869      	bhi.n	800303a <HAL_GPIO_Init+0x12e>
 8002f66:	4a91      	ldr	r2, [pc, #580]	; (80031ac <HAL_GPIO_Init+0x2a0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d04c      	beq.n	8003006 <HAL_GPIO_Init+0xfa>
 8002f6c:	4a8f      	ldr	r2, [pc, #572]	; (80031ac <HAL_GPIO_Init+0x2a0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d863      	bhi.n	800303a <HAL_GPIO_Init+0x12e>
 8002f72:	4a8f      	ldr	r2, [pc, #572]	; (80031b0 <HAL_GPIO_Init+0x2a4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d046      	beq.n	8003006 <HAL_GPIO_Init+0xfa>
 8002f78:	4a8d      	ldr	r2, [pc, #564]	; (80031b0 <HAL_GPIO_Init+0x2a4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d85d      	bhi.n	800303a <HAL_GPIO_Init+0x12e>
 8002f7e:	2b12      	cmp	r3, #18
 8002f80:	d82a      	bhi.n	8002fd8 <HAL_GPIO_Init+0xcc>
 8002f82:	2b12      	cmp	r3, #18
 8002f84:	d859      	bhi.n	800303a <HAL_GPIO_Init+0x12e>
 8002f86:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <HAL_GPIO_Init+0x80>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08003007 	.word	0x08003007
 8002f90:	08002fe1 	.word	0x08002fe1
 8002f94:	08002ff3 	.word	0x08002ff3
 8002f98:	08003035 	.word	0x08003035
 8002f9c:	0800303b 	.word	0x0800303b
 8002fa0:	0800303b 	.word	0x0800303b
 8002fa4:	0800303b 	.word	0x0800303b
 8002fa8:	0800303b 	.word	0x0800303b
 8002fac:	0800303b 	.word	0x0800303b
 8002fb0:	0800303b 	.word	0x0800303b
 8002fb4:	0800303b 	.word	0x0800303b
 8002fb8:	0800303b 	.word	0x0800303b
 8002fbc:	0800303b 	.word	0x0800303b
 8002fc0:	0800303b 	.word	0x0800303b
 8002fc4:	0800303b 	.word	0x0800303b
 8002fc8:	0800303b 	.word	0x0800303b
 8002fcc:	0800303b 	.word	0x0800303b
 8002fd0:	08002fe9 	.word	0x08002fe9
 8002fd4:	08002ffd 	.word	0x08002ffd
 8002fd8:	4a76      	ldr	r2, [pc, #472]	; (80031b4 <HAL_GPIO_Init+0x2a8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d013      	beq.n	8003006 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fde:	e02c      	b.n	800303a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	623b      	str	r3, [r7, #32]
          break;
 8002fe6:	e029      	b.n	800303c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	3304      	adds	r3, #4
 8002fee:	623b      	str	r3, [r7, #32]
          break;
 8002ff0:	e024      	b.n	800303c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	3308      	adds	r3, #8
 8002ff8:	623b      	str	r3, [r7, #32]
          break;
 8002ffa:	e01f      	b.n	800303c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	330c      	adds	r3, #12
 8003002:	623b      	str	r3, [r7, #32]
          break;
 8003004:	e01a      	b.n	800303c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800300e:	2304      	movs	r3, #4
 8003010:	623b      	str	r3, [r7, #32]
          break;
 8003012:	e013      	b.n	800303c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d105      	bne.n	8003028 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800301c:	2308      	movs	r3, #8
 800301e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	611a      	str	r2, [r3, #16]
          break;
 8003026:	e009      	b.n	800303c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003028:	2308      	movs	r3, #8
 800302a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69fa      	ldr	r2, [r7, #28]
 8003030:	615a      	str	r2, [r3, #20]
          break;
 8003032:	e003      	b.n	800303c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003034:	2300      	movs	r3, #0
 8003036:	623b      	str	r3, [r7, #32]
          break;
 8003038:	e000      	b.n	800303c <HAL_GPIO_Init+0x130>
          break;
 800303a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2bff      	cmp	r3, #255	; 0xff
 8003040:	d801      	bhi.n	8003046 <HAL_GPIO_Init+0x13a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	e001      	b.n	800304a <HAL_GPIO_Init+0x13e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3304      	adds	r3, #4
 800304a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2bff      	cmp	r3, #255	; 0xff
 8003050:	d802      	bhi.n	8003058 <HAL_GPIO_Init+0x14c>
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	e002      	b.n	800305e <HAL_GPIO_Init+0x152>
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	3b08      	subs	r3, #8
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	210f      	movs	r1, #15
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	401a      	ands	r2, r3
 8003070:	6a39      	ldr	r1, [r7, #32]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	431a      	orrs	r2, r3
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 80a9 	beq.w	80031de <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800308c:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_GPIO_Init+0x2ac>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	4a49      	ldr	r2, [pc, #292]	; (80031b8 <HAL_GPIO_Init+0x2ac>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6193      	str	r3, [r2, #24]
 8003098:	4b47      	ldr	r3, [pc, #284]	; (80031b8 <HAL_GPIO_Init+0x2ac>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030a4:	4a45      	ldr	r2, [pc, #276]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	3302      	adds	r3, #2
 80030ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	220f      	movs	r2, #15
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4013      	ands	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a3d      	ldr	r2, [pc, #244]	; (80031c0 <HAL_GPIO_Init+0x2b4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00d      	beq.n	80030ec <HAL_GPIO_Init+0x1e0>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a3c      	ldr	r2, [pc, #240]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d007      	beq.n	80030e8 <HAL_GPIO_Init+0x1dc>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a3b      	ldr	r2, [pc, #236]	; (80031c8 <HAL_GPIO_Init+0x2bc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d101      	bne.n	80030e4 <HAL_GPIO_Init+0x1d8>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e004      	b.n	80030ee <HAL_GPIO_Init+0x1e2>
 80030e4:	2303      	movs	r3, #3
 80030e6:	e002      	b.n	80030ee <HAL_GPIO_Init+0x1e2>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <HAL_GPIO_Init+0x1e2>
 80030ec:	2300      	movs	r3, #0
 80030ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f0:	f002 0203 	and.w	r2, r2, #3
 80030f4:	0092      	lsls	r2, r2, #2
 80030f6:	4093      	lsls	r3, r2
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030fe:	492f      	ldr	r1, [pc, #188]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	3302      	adds	r3, #2
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d006      	beq.n	8003126 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003118:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	492b      	ldr	r1, [pc, #172]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]
 8003124:	e006      	b.n	8003134 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003126:	4b29      	ldr	r3, [pc, #164]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	43db      	mvns	r3, r3
 800312e:	4927      	ldr	r1, [pc, #156]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 8003130:	4013      	ands	r3, r2
 8003132:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d006      	beq.n	800314e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003140:	4b22      	ldr	r3, [pc, #136]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	4921      	ldr	r1, [pc, #132]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
 800314c:	e006      	b.n	800315c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800314e:	4b1f      	ldr	r3, [pc, #124]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	43db      	mvns	r3, r3
 8003156:	491d      	ldr	r1, [pc, #116]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 8003158:	4013      	ands	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d006      	beq.n	8003176 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003168:	4b18      	ldr	r3, [pc, #96]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	4917      	ldr	r1, [pc, #92]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]
 8003174:	e006      	b.n	8003184 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	43db      	mvns	r3, r3
 800317e:	4913      	ldr	r1, [pc, #76]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 8003180:	4013      	ands	r3, r2
 8003182:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01f      	beq.n	80031d0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003190:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	490d      	ldr	r1, [pc, #52]	; (80031cc <HAL_GPIO_Init+0x2c0>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	60cb      	str	r3, [r1, #12]
 800319c:	e01f      	b.n	80031de <HAL_GPIO_Init+0x2d2>
 800319e:	bf00      	nop
 80031a0:	10320000 	.word	0x10320000
 80031a4:	10310000 	.word	0x10310000
 80031a8:	10220000 	.word	0x10220000
 80031ac:	10210000 	.word	0x10210000
 80031b0:	10120000 	.word	0x10120000
 80031b4:	10110000 	.word	0x10110000
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40010800 	.word	0x40010800
 80031c4:	40010c00 	.word	0x40010c00
 80031c8:	40011000 	.word	0x40011000
 80031cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_GPIO_Init+0x2f4>)
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	4909      	ldr	r1, [pc, #36]	; (8003200 <HAL_GPIO_Init+0x2f4>)
 80031da:	4013      	ands	r3, r2
 80031dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	3301      	adds	r3, #1
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	fa22 f303 	lsr.w	r3, r2, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f47f ae96 	bne.w	8002f20 <HAL_GPIO_Init+0x14>
  }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	372c      	adds	r7, #44	; 0x2c
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	40010400 	.word	0x40010400

08003204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
 8003210:	4613      	mov	r3, r2
 8003212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003214:	787b      	ldrb	r3, [r7, #1]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003220:	e003      	b.n	800322a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003222:	887b      	ldrh	r3, [r7, #2]
 8003224:	041a      	lsls	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	611a      	str	r2, [r3, #16]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e272      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8087 	beq.w	8003362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003254:	4b92      	ldr	r3, [pc, #584]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b04      	cmp	r3, #4
 800325e:	d00c      	beq.n	800327a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003260:	4b8f      	ldr	r3, [pc, #572]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d112      	bne.n	8003292 <HAL_RCC_OscConfig+0x5e>
 800326c:	4b8c      	ldr	r3, [pc, #560]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003278:	d10b      	bne.n	8003292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327a:	4b89      	ldr	r3, [pc, #548]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d06c      	beq.n	8003360 <HAL_RCC_OscConfig+0x12c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d168      	bne.n	8003360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e24c      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x76>
 800329c:	4b80      	ldr	r3, [pc, #512]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a7f      	ldr	r2, [pc, #508]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	e02e      	b.n	8003308 <HAL_RCC_OscConfig+0xd4>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x98>
 80032b2:	4b7b      	ldr	r3, [pc, #492]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a7a      	ldr	r2, [pc, #488]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b78      	ldr	r3, [pc, #480]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a77      	ldr	r2, [pc, #476]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0xd4>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0xbc>
 80032d6:	4b72      	ldr	r3, [pc, #456]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a71      	ldr	r2, [pc, #452]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b6f      	ldr	r3, [pc, #444]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6e      	ldr	r2, [pc, #440]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xd4>
 80032f0:	4b6b      	ldr	r3, [pc, #428]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a6a      	ldr	r2, [pc, #424]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b68      	ldr	r3, [pc, #416]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a67      	ldr	r2, [pc, #412]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe fdd2 	bl	8001eb8 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7fe fdce 	bl	8001eb8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e200      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b5d      	ldr	r3, [pc, #372]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xe4>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fdbe 	bl	8001eb8 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fdba 	bl	8001eb8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1ec      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	4b53      	ldr	r3, [pc, #332]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x10c>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d063      	beq.n	8003436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800336e:	4b4c      	ldr	r3, [pc, #304]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800337a:	4b49      	ldr	r3, [pc, #292]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b08      	cmp	r3, #8
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x18c>
 8003386:	4b46      	ldr	r3, [pc, #280]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_RCC_OscConfig+0x176>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e1c0      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033aa:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4939      	ldr	r1, [pc, #228]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	e03a      	b.n	8003436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c8:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fe fd73 	bl	8001eb8 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fe fd6f 	bl	8001eb8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1a1      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4927      	ldr	r1, [pc, #156]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	e015      	b.n	8003436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	4b26      	ldr	r3, [pc, #152]	; (80034a4 <HAL_RCC_OscConfig+0x270>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fe fd52 	bl	8001eb8 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003418:	f7fe fd4e 	bl	8001eb8 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e180      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d03a      	beq.n	80034b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d019      	beq.n	800347e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344a:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003450:	f7fe fd32 	bl	8001eb8 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003458:	f7fe fd2e 	bl	8001eb8 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e160      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003476:	2001      	movs	r0, #1
 8003478:	f000 fad8 	bl	8003a2c <RCC_Delay>
 800347c:	e01c      	b.n	80034b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003484:	f7fe fd18 	bl	8001eb8 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348a:	e00f      	b.n	80034ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7fe fd14 	bl	8001eb8 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d908      	bls.n	80034ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e146      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	42420000 	.word	0x42420000
 80034a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ac:	4b92      	ldr	r3, [pc, #584]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e9      	bne.n	800348c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80a6 	beq.w	8003612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ca:	4b8b      	ldr	r3, [pc, #556]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10d      	bne.n	80034f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d6:	4b88      	ldr	r3, [pc, #544]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4a87      	ldr	r2, [pc, #540]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e0:	61d3      	str	r3, [r2, #28]
 80034e2:	4b85      	ldr	r3, [pc, #532]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	4b82      	ldr	r3, [pc, #520]	; (80036fc <HAL_RCC_OscConfig+0x4c8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d118      	bne.n	8003530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fe:	4b7f      	ldr	r3, [pc, #508]	; (80036fc <HAL_RCC_OscConfig+0x4c8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7e      	ldr	r2, [pc, #504]	; (80036fc <HAL_RCC_OscConfig+0x4c8>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350a:	f7fe fcd5 	bl	8001eb8 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003512:	f7fe fcd1 	bl	8001eb8 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b64      	cmp	r3, #100	; 0x64
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e103      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003524:	4b75      	ldr	r3, [pc, #468]	; (80036fc <HAL_RCC_OscConfig+0x4c8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x312>
 8003538:	4b6f      	ldr	r3, [pc, #444]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4a6e      	ldr	r2, [pc, #440]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6213      	str	r3, [r2, #32]
 8003544:	e02d      	b.n	80035a2 <HAL_RCC_OscConfig+0x36e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x334>
 800354e:	4b6a      	ldr	r3, [pc, #424]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a69      	ldr	r2, [pc, #420]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6213      	str	r3, [r2, #32]
 800355a:	4b67      	ldr	r3, [pc, #412]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a66      	ldr	r2, [pc, #408]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6213      	str	r3, [r2, #32]
 8003566:	e01c      	b.n	80035a2 <HAL_RCC_OscConfig+0x36e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b05      	cmp	r3, #5
 800356e:	d10c      	bne.n	800358a <HAL_RCC_OscConfig+0x356>
 8003570:	4b61      	ldr	r3, [pc, #388]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4a60      	ldr	r2, [pc, #384]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	6213      	str	r3, [r2, #32]
 800357c:	4b5e      	ldr	r3, [pc, #376]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4a5d      	ldr	r2, [pc, #372]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6213      	str	r3, [r2, #32]
 8003588:	e00b      	b.n	80035a2 <HAL_RCC_OscConfig+0x36e>
 800358a:	4b5b      	ldr	r3, [pc, #364]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4a5a      	ldr	r2, [pc, #360]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	6213      	str	r3, [r2, #32]
 8003596:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a57      	ldr	r2, [pc, #348]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f023 0304 	bic.w	r3, r3, #4
 80035a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d015      	beq.n	80035d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035aa:	f7fe fc85 	bl	8001eb8 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fe fc81 	bl	8001eb8 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0b1      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c8:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ee      	beq.n	80035b2 <HAL_RCC_OscConfig+0x37e>
 80035d4:	e014      	b.n	8003600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d6:	f7fe fc6f 	bl	8001eb8 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7fe fc6b 	bl	8001eb8 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e09b      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f4:	4b40      	ldr	r3, [pc, #256]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ee      	bne.n	80035de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d105      	bne.n	8003612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003606:	4b3c      	ldr	r3, [pc, #240]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	4a3b      	ldr	r2, [pc, #236]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8087 	beq.w	800372a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800361c:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	2b08      	cmp	r3, #8
 8003626:	d061      	beq.n	80036ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d146      	bne.n	80036be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003630:	4b33      	ldr	r3, [pc, #204]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003636:	f7fe fc3f 	bl	8001eb8 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363e:	f7fe fc3b 	bl	8001eb8 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e06d      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003650:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f0      	bne.n	800363e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003664:	d108      	bne.n	8003678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	4921      	ldr	r1, [pc, #132]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003678:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a19      	ldr	r1, [r3, #32]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	430b      	orrs	r3, r1
 800368a:	491b      	ldr	r1, [pc, #108]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7fe fc0f 	bl	8001eb8 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369e:	f7fe fc0b 	bl	8001eb8 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e03d      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x46a>
 80036bc:	e035      	b.n	800372a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe fbf8 	bl	8001eb8 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe fbf4 	bl	8001eb8 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e026      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x498>
 80036ea:	e01e      	b.n	800372a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e019      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40007000 	.word	0x40007000
 8003700:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_OscConfig+0x500>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	429a      	cmp	r2, r3
 8003716:	d106      	bne.n	8003726 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d001      	beq.n	800372a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40021000 	.word	0x40021000

08003738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0d0      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b6a      	ldr	r3, [pc, #424]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d910      	bls.n	800377c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b67      	ldr	r3, [pc, #412]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 0207 	bic.w	r2, r3, #7
 8003762:	4965      	ldr	r1, [pc, #404]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b8      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a58      	ldr	r2, [pc, #352]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800379e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a52      	ldr	r2, [pc, #328]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b50      	ldr	r3, [pc, #320]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	494d      	ldr	r1, [pc, #308]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d040      	beq.n	8003858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d115      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b41      	ldr	r3, [pc, #260]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e073      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06b      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4936      	ldr	r1, [pc, #216]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003828:	f7fe fb46 	bl	8001eb8 <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fe fb42 	bl	8001eb8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e053      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 020c 	and.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d1eb      	bne.n	8003830 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003858:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d210      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 0207 	bic.w	r2, r3, #7
 800386e:	4922      	ldr	r1, [pc, #136]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e032      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4916      	ldr	r1, [pc, #88]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	490e      	ldr	r1, [pc, #56]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038c6:	f000 f821 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80038ca:	4602      	mov	r2, r0
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	490a      	ldr	r1, [pc, #40]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80038d8:	5ccb      	ldrb	r3, [r1, r3]
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <HAL_RCC_ClockConfig+0x1cc>)
 80038e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_RCC_ClockConfig+0x1d0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe faa4 	bl	8001e34 <HAL_InitTick>

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40022000 	.word	0x40022000
 80038fc:	40021000 	.word	0x40021000
 8003900:	080078e4 	.word	0x080078e4
 8003904:	20000004 	.word	0x20000004
 8003908:	20000008 	.word	0x20000008

0800390c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800390c:	b490      	push	{r4, r7}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003912:	4b29      	ldr	r3, [pc, #164]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003914:	1d3c      	adds	r4, r7, #4
 8003916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800391c:	f240 2301 	movw	r3, #513	; 0x201
 8003920:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	2300      	movs	r3, #0
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003936:	4b21      	ldr	r3, [pc, #132]	; (80039bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b04      	cmp	r3, #4
 8003944:	d002      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x40>
 8003946:	2b08      	cmp	r3, #8
 8003948:	d003      	beq.n	8003952 <HAL_RCC_GetSysClockFreq+0x46>
 800394a:	e02b      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800394c:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800394e:	623b      	str	r3, [r7, #32]
      break;
 8003950:	e02b      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	0c9b      	lsrs	r3, r3, #18
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3328      	adds	r3, #40	; 0x28
 800395c:	443b      	add	r3, r7
 800395e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003962:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d012      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	0c5b      	lsrs	r3, r3, #17
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	3328      	adds	r3, #40	; 0x28
 800397a:	443b      	add	r3, r7
 800397c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003980:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003986:	fb03 f202 	mul.w	r2, r3, r2
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
 8003992:	e004      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	4a0b      	ldr	r2, [pc, #44]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003998:	fb02 f303 	mul.w	r3, r2, r3
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	623b      	str	r3, [r7, #32]
      break;
 80039a2:	e002      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039a6:	623b      	str	r3, [r7, #32]
      break;
 80039a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039aa:	6a3b      	ldr	r3, [r7, #32]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3728      	adds	r7, #40	; 0x28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc90      	pop	{r4, r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	080078c4 	.word	0x080078c4
 80039bc:	40021000 	.word	0x40021000
 80039c0:	007a1200 	.word	0x007a1200
 80039c4:	003d0900 	.word	0x003d0900

080039c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039cc:	4b02      	ldr	r3, [pc, #8]	; (80039d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	20000004 	.word	0x20000004

080039dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039e0:	f7ff fff2 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000
 8003a00:	080078f4 	.word	0x080078f4

08003a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a08:	f7ff ffde 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	0adb      	lsrs	r3, r3, #11
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4903      	ldr	r1, [pc, #12]	; (8003a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	080078f4 	.word	0x080078f4

08003a2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <RCC_Delay+0x34>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <RCC_Delay+0x38>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	0a5b      	lsrs	r3, r3, #9
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a48:	bf00      	nop
  }
  while (Delay --);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1e5a      	subs	r2, r3, #1
 8003a4e:	60fa      	str	r2, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f9      	bne.n	8003a48 <RCC_Delay+0x1c>
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	20000004 	.word	0x20000004
 8003a64:	10624dd3 	.word	0x10624dd3

08003a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d07d      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a84:	2300      	movs	r3, #0
 8003a86:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a88:	4b4f      	ldr	r3, [pc, #316]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10d      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a94:	4b4c      	ldr	r3, [pc, #304]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	4a4b      	ldr	r2, [pc, #300]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	61d3      	str	r3, [r2, #28]
 8003aa0:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aac:	2301      	movs	r3, #1
 8003aae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab0:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d118      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003abc:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a42      	ldr	r2, [pc, #264]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac8:	f7fe f9f6 	bl	8001eb8 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	e008      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad0:	f7fe f9f2 	bl	8001eb8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e06d      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae2:	4b3a      	ldr	r3, [pc, #232]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aee:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d02e      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d027      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b0c:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b16:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b1c:	4b2c      	ldr	r3, [pc, #176]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b22:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d014      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b32:	f7fe f9c1 	bl	8001eb8 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b38:	e00a      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fe f9bd 	bl	8001eb8 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e036      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ee      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b5c:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4917      	ldr	r1, [pc, #92]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d105      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	490b      	ldr	r1, [pc, #44]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003baa:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	4904      	ldr	r1, [pc, #16]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	42420440 	.word	0x42420440

08003bd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b08d      	sub	sp, #52	; 0x34
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bdc:	4b58      	ldr	r3, [pc, #352]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003bde:	f107 040c 	add.w	r4, r7, #12
 8003be2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003be4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003be8:	f240 2301 	movw	r3, #513	; 0x201
 8003bec:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	f200 808e 	bhi.w	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d049      	beq.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d079      	beq.n	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c1c:	e086      	b.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003c1e:	4b49      	ldr	r3, [pc, #292]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c24:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d07f      	beq.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	0c9b      	lsrs	r3, r3, #18
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	3330      	adds	r3, #48	; 0x30
 8003c3a:	443b      	add	r3, r7
 8003c3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c40:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d017      	beq.n	8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c4c:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	0c5b      	lsrs	r3, r3, #17
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	3330      	adds	r3, #48	; 0x30
 8003c58:	443b      	add	r3, r7
 8003c5a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c6a:	4a37      	ldr	r2, [pc, #220]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	fb02 f303 	mul.w	r3, r2, r3
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c7a:	e004      	b.n	8003c86 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	4a33      	ldr	r2, [pc, #204]	; (8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c86:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c92:	d102      	bne.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c98:	e04a      	b.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	4a2c      	ldr	r2, [pc, #176]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ca8:	e042      	b.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003caa:	4b26      	ldr	r3, [pc, #152]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cba:	d108      	bne.n	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ccc:	e01f      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd8:	d109      	bne.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003cda:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003ce6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cec:	e00f      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf8:	d11c      	bne.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d016      	beq.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003d06:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d0c:	e012      	b.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003d0e:	e011      	b.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d10:	f7ff fe78 	bl	8003a04 <HAL_RCC_GetPCLK2Freq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	0b9b      	lsrs	r3, r3, #14
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	3301      	adds	r3, #1
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d2a:	e004      	b.n	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d2c:	bf00      	nop
 8003d2e:	e002      	b.n	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d30:	bf00      	nop
 8003d32:	e000      	b.n	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d34:	bf00      	nop
    }
  }
  return (frequency);
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3734      	adds	r7, #52	; 0x34
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd90      	pop	{r4, r7, pc}
 8003d40:	080078d4 	.word	0x080078d4
 8003d44:	40021000 	.word	0x40021000
 8003d48:	007a1200 	.word	0x007a1200
 8003d4c:	003d0900 	.word	0x003d0900
 8003d50:	aaaaaaab 	.word	0xaaaaaaab

08003d54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e03f      	b.n	8003de6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fd fe8a 	bl	8001a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2224      	movs	r2, #36	; 0x24
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fd9b 	bl	80048d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695a      	ldr	r2, [r3, #20]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b08a      	sub	sp, #40	; 0x28
 8003df2:	af02      	add	r7, sp, #8
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	603b      	str	r3, [r7, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d17c      	bne.n	8003f08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_UART_Transmit+0x2c>
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e075      	b.n	8003f0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_UART_Transmit+0x3e>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e06e      	b.n	8003f0a <HAL_UART_Transmit+0x11c>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2221      	movs	r2, #33	; 0x21
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e42:	f7fe f839 	bl	8001eb8 <HAL_GetTick>
 8003e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	88fa      	ldrh	r2, [r7, #6]
 8003e52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	d108      	bne.n	8003e70 <HAL_UART_Transmit+0x82>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	e003      	b.n	8003e78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e80:	e02a      	b.n	8003ed8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2180      	movs	r1, #128	; 0x80
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fb0d 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e036      	b.n	8003f0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	e007      	b.n	8003eca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1cf      	bne.n	8003e82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2140      	movs	r1, #64	; 0x40
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fadd 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e006      	b.n	8003f0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	e000      	b.n	8003f0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
  }
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3720      	adds	r7, #32
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b086      	sub	sp, #24
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d13c      	bne.n	8003fa6 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e035      	b.n	8003fa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e02e      	b.n	8003fa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 faee 	bl	8004540 <UART_Start_Receive_DMA>
 8003f64:	4603      	mov	r3, r0
 8003f66:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d119      	bne.n	8003fa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d113      	bne.n	8003f9e <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0210 	orr.w	r2, r2, #16
 8003f9a:	60da      	str	r2, [r3, #12]
 8003f9c:	e001      	b.n	8003fa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8003fa2:	7dfb      	ldrb	r3, [r7, #23]
 8003fa4:	e000      	b.n	8003fa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
  }
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10d      	bne.n	8004002 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_UART_IRQHandler+0x52>
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fbc0 	bl	8004780 <UART_Receive_IT>
      return;
 8004000:	e17b      	b.n	80042fa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80b1 	beq.w	800416c <HAL_UART_IRQHandler+0x1bc>
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d105      	bne.n	8004020 <HAL_UART_IRQHandler+0x70>
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80a6 	beq.w	800416c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_UART_IRQHandler+0x90>
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	f043 0201 	orr.w	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_UART_IRQHandler+0xb0>
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	f043 0202 	orr.w	r2, r3, #2
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_UART_IRQHandler+0xd0>
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f043 0204 	orr.w	r2, r3, #4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00f      	beq.n	80040aa <HAL_UART_IRQHandler+0xfa>
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <HAL_UART_IRQHandler+0xee>
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f043 0208 	orr.w	r2, r3, #8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 811e 	beq.w	80042f0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_UART_IRQHandler+0x11e>
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fb59 	bl	8004780 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <HAL_UART_IRQHandler+0x146>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d031      	beq.n	800415a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fa9b 	bl	8004632 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d023      	beq.n	8004152 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004118:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	2b00      	cmp	r3, #0
 8004120:	d013      	beq.n	800414a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	4a76      	ldr	r2, [pc, #472]	; (8004300 <HAL_UART_IRQHandler+0x350>)
 8004128:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe fd42 	bl	8002bb8 <HAL_DMA_Abort_IT>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d016      	beq.n	8004168 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004144:	4610      	mov	r0, r2
 8004146:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004148:	e00e      	b.n	8004168 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8f5 	bl	800433a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004150:	e00a      	b.n	8004168 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f8f1 	bl	800433a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	e006      	b.n	8004168 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f8ed 	bl	800433a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004166:	e0c3      	b.n	80042f0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	bf00      	nop
    return;
 800416a:	e0c1      	b.n	80042f0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	2b01      	cmp	r3, #1
 8004172:	f040 80a1 	bne.w	80042b8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 809b 	beq.w	80042b8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8095 	beq.w	80042b8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d04e      	beq.n	8004250 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80041bc:	8a3b      	ldrh	r3, [r7, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 8098 	beq.w	80042f4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041c8:	8a3a      	ldrh	r2, [r7, #16]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	f080 8092 	bcs.w	80042f4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8a3a      	ldrh	r2, [r7, #16]
 80041d4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d02b      	beq.n	8004238 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0210 	bic.w	r2, r2, #16
 800422c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fc85 	bl	8002b42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004240:	b29b      	uxth	r3, r3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	b29b      	uxth	r3, r3
 8004246:	4619      	mov	r1, r3
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7fd f999 	bl	8001580 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800424e:	e051      	b.n	80042f4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004258:	b29b      	uxth	r3, r3
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d047      	beq.n	80042f8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004268:	8a7b      	ldrh	r3, [r7, #18]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d044      	beq.n	80042f8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800427c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0210 	bic.w	r2, r2, #16
 80042aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042ac:	8a7b      	ldrh	r3, [r7, #18]
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7fd f965 	bl	8001580 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80042b6:	e01f      	b.n	80042f8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_UART_IRQHandler+0x324>
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f9f0 	bl	80046b2 <UART_Transmit_IT>
    return;
 80042d2:	e012      	b.n	80042fa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00d      	beq.n	80042fa <HAL_UART_IRQHandler+0x34a>
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fa31 	bl	8004750 <UART_EndTransmit_IT>
    return;
 80042ee:	e004      	b.n	80042fa <HAL_UART_IRQHandler+0x34a>
    return;
 80042f0:	bf00      	nop
 80042f2:	e002      	b.n	80042fa <HAL_UART_IRQHandler+0x34a>
      return;
 80042f4:	bf00      	nop
 80042f6:	e000      	b.n	80042fa <HAL_UART_IRQHandler+0x34a>
      return;
 80042f8:	bf00      	nop
  }
}
 80042fa:	3728      	adds	r7, #40	; 0x28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	0800468b 	.word	0x0800468b

08004304 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr

08004316 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b00      	cmp	r3, #0
 8004366:	d12a      	bne.n	80043be <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800437c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695a      	ldr	r2, [r3, #20]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800439c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d107      	bne.n	80043be <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0210 	bic.w	r2, r2, #16
 80043bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d106      	bne.n	80043d4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043ca:	4619      	mov	r1, r3
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f7fd f8d7 	bl	8001580 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043d2:	e002      	b.n	80043da <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff ff9e 	bl	8004316 <HAL_UART_RxCpltCallback>
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d108      	bne.n	800440a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	b29b      	uxth	r3, r3
 8004400:	4619      	mov	r1, r3
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f7fd f8bc 	bl	8001580 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004408:	e002      	b.n	8004410 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff ff8c 	bl	8004328 <HAL_UART_RxHalfCpltCallback>
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004434:	2b00      	cmp	r3, #0
 8004436:	bf14      	ite	ne
 8004438:	2301      	movne	r3, #1
 800443a:	2300      	moveq	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b21      	cmp	r3, #33	; 0x21
 800444a:	d108      	bne.n	800445e <UART_DMAError+0x46>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2200      	movs	r2, #0
 8004456:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004458:	68b8      	ldr	r0, [r7, #8]
 800445a:	f000 f8d5 	bl	8004608 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b22      	cmp	r3, #34	; 0x22
 800447e:	d108      	bne.n	8004492 <UART_DMAError+0x7a>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2200      	movs	r2, #0
 800448a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800448c:	68b8      	ldr	r0, [r7, #8]
 800448e:	f000 f8d0 	bl	8004632 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0210 	orr.w	r2, r3, #16
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800449e:	68b8      	ldr	r0, [r7, #8]
 80044a0:	f7ff ff4b 	bl	800433a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044bc:	e02c      	b.n	8004518 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d028      	beq.n	8004518 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d007      	beq.n	80044dc <UART_WaitOnFlagUntilTimeout+0x30>
 80044cc:	f7fd fcf4 	bl	8001eb8 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d21d      	bcs.n	8004518 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e00f      	b.n	8004538 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4013      	ands	r3, r2
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	429a      	cmp	r2, r3
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	461a      	mov	r2, r3
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	429a      	cmp	r2, r3
 8004534:	d0c3      	beq.n	80044be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	88fa      	ldrh	r2, [r7, #6]
 8004558:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2222      	movs	r2, #34	; 0x22
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	4a23      	ldr	r2, [pc, #140]	; (80045fc <UART_Start_Receive_DMA+0xbc>)
 800456e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	4a22      	ldr	r2, [pc, #136]	; (8004600 <UART_Start_Receive_DMA+0xc0>)
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	4a21      	ldr	r2, [pc, #132]	; (8004604 <UART_Start_Receive_DMA+0xc4>)
 800457e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	2200      	movs	r2, #0
 8004586:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004588:	f107 0308 	add.w	r3, r7, #8
 800458c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	f7fe fa70 	bl	8002a84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695a      	ldr	r2, [r3, #20]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	0800434d 	.word	0x0800434d
 8004600:	080043e3 	.word	0x080043e3
 8004604:	08004419 	.word	0x08004419

08004608 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800461e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004648:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	2b01      	cmp	r3, #1
 8004660:	d107      	bne.n	8004672 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0210 	bic.w	r2, r2, #16
 8004670:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr

0800468a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff fe48 	bl	800433a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b21      	cmp	r3, #33	; 0x21
 80046c4:	d13e      	bne.n	8004744 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ce:	d114      	bne.n	80046fa <UART_Transmit_IT+0x48>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d110      	bne.n	80046fa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	1c9a      	adds	r2, r3, #2
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	621a      	str	r2, [r3, #32]
 80046f8:	e008      	b.n	800470c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	1c59      	adds	r1, r3, #1
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6211      	str	r1, [r2, #32]
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29b      	uxth	r3, r3
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	4619      	mov	r1, r3
 800471a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10f      	bne.n	8004740 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800472e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800473e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	e000      	b.n	8004746 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004744:	2302      	movs	r3, #2
  }
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004766:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff fdc7 	bl	8004304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b22      	cmp	r3, #34	; 0x22
 8004792:	f040 8099 	bne.w	80048c8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479e:	d117      	bne.n	80047d0 <UART_Receive_IT+0x50>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d113      	bne.n	80047d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	b29a      	uxth	r2, r3
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	1c9a      	adds	r2, r3, #2
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	629a      	str	r2, [r3, #40]	; 0x28
 80047ce:	e026      	b.n	800481e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e2:	d007      	beq.n	80047f4 <UART_Receive_IT+0x74>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <UART_Receive_IT+0x82>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	e008      	b.n	8004814 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800480e:	b2da      	uxtb	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29b      	uxth	r3, r3
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4619      	mov	r1, r3
 800482c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800482e:	2b00      	cmp	r3, #0
 8004830:	d148      	bne.n	80048c4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0220 	bic.w	r2, r2, #32
 8004840:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004850:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695a      	ldr	r2, [r3, #20]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	2b01      	cmp	r3, #1
 8004870:	d123      	bne.n	80048ba <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0210 	bic.w	r2, r2, #16
 8004886:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b10      	cmp	r3, #16
 8004894:	d10a      	bne.n	80048ac <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fc fe64 	bl	8001580 <HAL_UARTEx_RxEventCallback>
 80048b8:	e002      	b.n	80048c0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff fd2b 	bl	8004316 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	e002      	b.n	80048ca <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800490e:	f023 030c 	bic.w	r3, r3, #12
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	430b      	orrs	r3, r1
 800491a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a2c      	ldr	r2, [pc, #176]	; (80049e8 <UART_SetConfig+0x114>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d103      	bne.n	8004944 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800493c:	f7ff f862 	bl	8003a04 <HAL_RCC_GetPCLK2Freq>
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	e002      	b.n	800494a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004944:	f7ff f84a 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 8004948:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009a      	lsls	r2, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	4a22      	ldr	r2, [pc, #136]	; (80049ec <UART_SetConfig+0x118>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	0119      	lsls	r1, r3, #4
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009a      	lsls	r2, r3, #2
 8004974:	441a      	add	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004980:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <UART_SetConfig+0x118>)
 8004982:	fba3 0302 	umull	r0, r3, r3, r2
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	2064      	movs	r0, #100	; 0x64
 800498a:	fb00 f303 	mul.w	r3, r0, r3
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	3332      	adds	r3, #50	; 0x32
 8004994:	4a15      	ldr	r2, [pc, #84]	; (80049ec <UART_SetConfig+0x118>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049a0:	4419      	add	r1, r3
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009a      	lsls	r2, r3, #2
 80049ac:	441a      	add	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049b8:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <UART_SetConfig+0x118>)
 80049ba:	fba3 0302 	umull	r0, r3, r3, r2
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2064      	movs	r0, #100	; 0x64
 80049c2:	fb00 f303 	mul.w	r3, r0, r3
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	3332      	adds	r3, #50	; 0x32
 80049cc:	4a07      	ldr	r2, [pc, #28]	; (80049ec <UART_SetConfig+0x118>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	f003 020f 	and.w	r2, r3, #15
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	440a      	add	r2, r1
 80049de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049e0:	bf00      	nop
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40013800 	.word	0x40013800
 80049ec:	51eb851f 	.word	0x51eb851f

080049f0 <__errno>:
 80049f0:	4b01      	ldr	r3, [pc, #4]	; (80049f8 <__errno+0x8>)
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000010 	.word	0x20000010

080049fc <__libc_init_array>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	2600      	movs	r6, #0
 8004a00:	4d0c      	ldr	r5, [pc, #48]	; (8004a34 <__libc_init_array+0x38>)
 8004a02:	4c0d      	ldr	r4, [pc, #52]	; (8004a38 <__libc_init_array+0x3c>)
 8004a04:	1b64      	subs	r4, r4, r5
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	42a6      	cmp	r6, r4
 8004a0a:	d109      	bne.n	8004a20 <__libc_init_array+0x24>
 8004a0c:	f002 ff34 	bl	8007878 <_init>
 8004a10:	2600      	movs	r6, #0
 8004a12:	4d0a      	ldr	r5, [pc, #40]	; (8004a3c <__libc_init_array+0x40>)
 8004a14:	4c0a      	ldr	r4, [pc, #40]	; (8004a40 <__libc_init_array+0x44>)
 8004a16:	1b64      	subs	r4, r4, r5
 8004a18:	10a4      	asrs	r4, r4, #2
 8004a1a:	42a6      	cmp	r6, r4
 8004a1c:	d105      	bne.n	8004a2a <__libc_init_array+0x2e>
 8004a1e:	bd70      	pop	{r4, r5, r6, pc}
 8004a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a24:	4798      	blx	r3
 8004a26:	3601      	adds	r6, #1
 8004a28:	e7ee      	b.n	8004a08 <__libc_init_array+0xc>
 8004a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2e:	4798      	blx	r3
 8004a30:	3601      	adds	r6, #1
 8004a32:	e7f2      	b.n	8004a1a <__libc_init_array+0x1e>
 8004a34:	08007cdc 	.word	0x08007cdc
 8004a38:	08007cdc 	.word	0x08007cdc
 8004a3c:	08007cdc 	.word	0x08007cdc
 8004a40:	08007ce0 	.word	0x08007ce0

08004a44 <memset>:
 8004a44:	4603      	mov	r3, r0
 8004a46:	4402      	add	r2, r0
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d100      	bne.n	8004a4e <memset+0xa>
 8004a4c:	4770      	bx	lr
 8004a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a52:	e7f9      	b.n	8004a48 <memset+0x4>

08004a54 <__cvt>:
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a5a:	461f      	mov	r7, r3
 8004a5c:	bfbb      	ittet	lt
 8004a5e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a62:	461f      	movlt	r7, r3
 8004a64:	2300      	movge	r3, #0
 8004a66:	232d      	movlt	r3, #45	; 0x2d
 8004a68:	b088      	sub	sp, #32
 8004a6a:	4614      	mov	r4, r2
 8004a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a70:	7013      	strb	r3, [r2, #0]
 8004a72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a74:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004a78:	f023 0820 	bic.w	r8, r3, #32
 8004a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a80:	d005      	beq.n	8004a8e <__cvt+0x3a>
 8004a82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a86:	d100      	bne.n	8004a8a <__cvt+0x36>
 8004a88:	3501      	adds	r5, #1
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e000      	b.n	8004a90 <__cvt+0x3c>
 8004a8e:	2303      	movs	r3, #3
 8004a90:	aa07      	add	r2, sp, #28
 8004a92:	9204      	str	r2, [sp, #16]
 8004a94:	aa06      	add	r2, sp, #24
 8004a96:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a9a:	e9cd 3500 	strd	r3, r5, [sp]
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	463b      	mov	r3, r7
 8004aa2:	f000 fcdd 	bl	8005460 <_dtoa_r>
 8004aa6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004aaa:	4606      	mov	r6, r0
 8004aac:	d102      	bne.n	8004ab4 <__cvt+0x60>
 8004aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ab0:	07db      	lsls	r3, r3, #31
 8004ab2:	d522      	bpl.n	8004afa <__cvt+0xa6>
 8004ab4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ab8:	eb06 0905 	add.w	r9, r6, r5
 8004abc:	d110      	bne.n	8004ae0 <__cvt+0x8c>
 8004abe:	7833      	ldrb	r3, [r6, #0]
 8004ac0:	2b30      	cmp	r3, #48	; 0x30
 8004ac2:	d10a      	bne.n	8004ada <__cvt+0x86>
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	4620      	mov	r0, r4
 8004aca:	4639      	mov	r1, r7
 8004acc:	f7fb ff76 	bl	80009bc <__aeabi_dcmpeq>
 8004ad0:	b918      	cbnz	r0, 8004ada <__cvt+0x86>
 8004ad2:	f1c5 0501 	rsb	r5, r5, #1
 8004ad6:	f8ca 5000 	str.w	r5, [sl]
 8004ada:	f8da 3000 	ldr.w	r3, [sl]
 8004ade:	4499      	add	r9, r3
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	4639      	mov	r1, r7
 8004ae8:	f7fb ff68 	bl	80009bc <__aeabi_dcmpeq>
 8004aec:	b108      	cbz	r0, 8004af2 <__cvt+0x9e>
 8004aee:	f8cd 901c 	str.w	r9, [sp, #28]
 8004af2:	2230      	movs	r2, #48	; 0x30
 8004af4:	9b07      	ldr	r3, [sp, #28]
 8004af6:	454b      	cmp	r3, r9
 8004af8:	d307      	bcc.n	8004b0a <__cvt+0xb6>
 8004afa:	4630      	mov	r0, r6
 8004afc:	9b07      	ldr	r3, [sp, #28]
 8004afe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b00:	1b9b      	subs	r3, r3, r6
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	b008      	add	sp, #32
 8004b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0a:	1c59      	adds	r1, r3, #1
 8004b0c:	9107      	str	r1, [sp, #28]
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	e7f0      	b.n	8004af4 <__cvt+0xa0>

08004b12 <__exponent>:
 8004b12:	4603      	mov	r3, r0
 8004b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b16:	2900      	cmp	r1, #0
 8004b18:	f803 2b02 	strb.w	r2, [r3], #2
 8004b1c:	bfb6      	itet	lt
 8004b1e:	222d      	movlt	r2, #45	; 0x2d
 8004b20:	222b      	movge	r2, #43	; 0x2b
 8004b22:	4249      	neglt	r1, r1
 8004b24:	2909      	cmp	r1, #9
 8004b26:	7042      	strb	r2, [r0, #1]
 8004b28:	dd2b      	ble.n	8004b82 <__exponent+0x70>
 8004b2a:	f10d 0407 	add.w	r4, sp, #7
 8004b2e:	46a4      	mov	ip, r4
 8004b30:	270a      	movs	r7, #10
 8004b32:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b36:	460a      	mov	r2, r1
 8004b38:	46a6      	mov	lr, r4
 8004b3a:	fb07 1516 	mls	r5, r7, r6, r1
 8004b3e:	2a63      	cmp	r2, #99	; 0x63
 8004b40:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004b44:	4631      	mov	r1, r6
 8004b46:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b4e:	dcf0      	bgt.n	8004b32 <__exponent+0x20>
 8004b50:	3130      	adds	r1, #48	; 0x30
 8004b52:	f1ae 0502 	sub.w	r5, lr, #2
 8004b56:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	1c44      	adds	r4, r0, #1
 8004b5e:	4561      	cmp	r1, ip
 8004b60:	d30a      	bcc.n	8004b78 <__exponent+0x66>
 8004b62:	f10d 0209 	add.w	r2, sp, #9
 8004b66:	eba2 020e 	sub.w	r2, r2, lr
 8004b6a:	4565      	cmp	r5, ip
 8004b6c:	bf88      	it	hi
 8004b6e:	2200      	movhi	r2, #0
 8004b70:	4413      	add	r3, r2
 8004b72:	1a18      	subs	r0, r3, r0
 8004b74:	b003      	add	sp, #12
 8004b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b7c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b80:	e7ed      	b.n	8004b5e <__exponent+0x4c>
 8004b82:	2330      	movs	r3, #48	; 0x30
 8004b84:	3130      	adds	r1, #48	; 0x30
 8004b86:	7083      	strb	r3, [r0, #2]
 8004b88:	70c1      	strb	r1, [r0, #3]
 8004b8a:	1d03      	adds	r3, r0, #4
 8004b8c:	e7f1      	b.n	8004b72 <__exponent+0x60>
	...

08004b90 <_printf_float>:
 8004b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b94:	b091      	sub	sp, #68	; 0x44
 8004b96:	460c      	mov	r4, r1
 8004b98:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004b9c:	4616      	mov	r6, r2
 8004b9e:	461f      	mov	r7, r3
 8004ba0:	4605      	mov	r5, r0
 8004ba2:	f001 fb41 	bl	8006228 <_localeconv_r>
 8004ba6:	6803      	ldr	r3, [r0, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	9309      	str	r3, [sp, #36]	; 0x24
 8004bac:	f7fb fada 	bl	8000164 <strlen>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	930e      	str	r3, [sp, #56]	; 0x38
 8004bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8004bb8:	900a      	str	r0, [sp, #40]	; 0x28
 8004bba:	3307      	adds	r3, #7
 8004bbc:	f023 0307 	bic.w	r3, r3, #7
 8004bc0:	f103 0208 	add.w	r2, r3, #8
 8004bc4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004bc8:	f8d4 b000 	ldr.w	fp, [r4]
 8004bcc:	f8c8 2000 	str.w	r2, [r8]
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004bd8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004bdc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004be2:	f04f 32ff 	mov.w	r2, #4294967295
 8004be6:	4640      	mov	r0, r8
 8004be8:	4b9c      	ldr	r3, [pc, #624]	; (8004e5c <_printf_float+0x2cc>)
 8004bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bec:	f7fb ff18 	bl	8000a20 <__aeabi_dcmpun>
 8004bf0:	bb70      	cbnz	r0, 8004c50 <_printf_float+0xc0>
 8004bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	4b98      	ldr	r3, [pc, #608]	; (8004e5c <_printf_float+0x2cc>)
 8004bfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bfc:	f7fb fef2 	bl	80009e4 <__aeabi_dcmple>
 8004c00:	bb30      	cbnz	r0, 8004c50 <_printf_float+0xc0>
 8004c02:	2200      	movs	r2, #0
 8004c04:	2300      	movs	r3, #0
 8004c06:	4640      	mov	r0, r8
 8004c08:	4651      	mov	r1, sl
 8004c0a:	f7fb fee1 	bl	80009d0 <__aeabi_dcmplt>
 8004c0e:	b110      	cbz	r0, 8004c16 <_printf_float+0x86>
 8004c10:	232d      	movs	r3, #45	; 0x2d
 8004c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c16:	4b92      	ldr	r3, [pc, #584]	; (8004e60 <_printf_float+0x2d0>)
 8004c18:	4892      	ldr	r0, [pc, #584]	; (8004e64 <_printf_float+0x2d4>)
 8004c1a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004c1e:	bf94      	ite	ls
 8004c20:	4698      	movls	r8, r3
 8004c22:	4680      	movhi	r8, r0
 8004c24:	2303      	movs	r3, #3
 8004c26:	f04f 0a00 	mov.w	sl, #0
 8004c2a:	6123      	str	r3, [r4, #16]
 8004c2c:	f02b 0304 	bic.w	r3, fp, #4
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	4633      	mov	r3, r6
 8004c34:	4621      	mov	r1, r4
 8004c36:	4628      	mov	r0, r5
 8004c38:	9700      	str	r7, [sp, #0]
 8004c3a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c3c:	f000 f9d4 	bl	8004fe8 <_printf_common>
 8004c40:	3001      	adds	r0, #1
 8004c42:	f040 8090 	bne.w	8004d66 <_printf_float+0x1d6>
 8004c46:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4a:	b011      	add	sp, #68	; 0x44
 8004c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c50:	4642      	mov	r2, r8
 8004c52:	4653      	mov	r3, sl
 8004c54:	4640      	mov	r0, r8
 8004c56:	4651      	mov	r1, sl
 8004c58:	f7fb fee2 	bl	8000a20 <__aeabi_dcmpun>
 8004c5c:	b148      	cbz	r0, 8004c72 <_printf_float+0xe2>
 8004c5e:	f1ba 0f00 	cmp.w	sl, #0
 8004c62:	bfb8      	it	lt
 8004c64:	232d      	movlt	r3, #45	; 0x2d
 8004c66:	4880      	ldr	r0, [pc, #512]	; (8004e68 <_printf_float+0x2d8>)
 8004c68:	bfb8      	it	lt
 8004c6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c6e:	4b7f      	ldr	r3, [pc, #508]	; (8004e6c <_printf_float+0x2dc>)
 8004c70:	e7d3      	b.n	8004c1a <_printf_float+0x8a>
 8004c72:	6863      	ldr	r3, [r4, #4]
 8004c74:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	d142      	bne.n	8004d02 <_printf_float+0x172>
 8004c7c:	2306      	movs	r3, #6
 8004c7e:	6063      	str	r3, [r4, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	9206      	str	r2, [sp, #24]
 8004c84:	aa0e      	add	r2, sp, #56	; 0x38
 8004c86:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004c8a:	aa0d      	add	r2, sp, #52	; 0x34
 8004c8c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004c90:	9203      	str	r2, [sp, #12]
 8004c92:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004c96:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004c9a:	6023      	str	r3, [r4, #0]
 8004c9c:	6863      	ldr	r3, [r4, #4]
 8004c9e:	4642      	mov	r2, r8
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	4653      	mov	r3, sl
 8004ca6:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ca8:	f7ff fed4 	bl	8004a54 <__cvt>
 8004cac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cae:	4680      	mov	r8, r0
 8004cb0:	2947      	cmp	r1, #71	; 0x47
 8004cb2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cb4:	d108      	bne.n	8004cc8 <_printf_float+0x138>
 8004cb6:	1cc8      	adds	r0, r1, #3
 8004cb8:	db02      	blt.n	8004cc0 <_printf_float+0x130>
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	4299      	cmp	r1, r3
 8004cbe:	dd40      	ble.n	8004d42 <_printf_float+0x1b2>
 8004cc0:	f1a9 0902 	sub.w	r9, r9, #2
 8004cc4:	fa5f f989 	uxtb.w	r9, r9
 8004cc8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ccc:	d81f      	bhi.n	8004d0e <_printf_float+0x17e>
 8004cce:	464a      	mov	r2, r9
 8004cd0:	3901      	subs	r1, #1
 8004cd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cd6:	910d      	str	r1, [sp, #52]	; 0x34
 8004cd8:	f7ff ff1b 	bl	8004b12 <__exponent>
 8004cdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cde:	4682      	mov	sl, r0
 8004ce0:	1813      	adds	r3, r2, r0
 8004ce2:	2a01      	cmp	r2, #1
 8004ce4:	6123      	str	r3, [r4, #16]
 8004ce6:	dc02      	bgt.n	8004cee <_printf_float+0x15e>
 8004ce8:	6822      	ldr	r2, [r4, #0]
 8004cea:	07d2      	lsls	r2, r2, #31
 8004cec:	d501      	bpl.n	8004cf2 <_printf_float+0x162>
 8004cee:	3301      	adds	r3, #1
 8004cf0:	6123      	str	r3, [r4, #16]
 8004cf2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d09b      	beq.n	8004c32 <_printf_float+0xa2>
 8004cfa:	232d      	movs	r3, #45	; 0x2d
 8004cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d00:	e797      	b.n	8004c32 <_printf_float+0xa2>
 8004d02:	2947      	cmp	r1, #71	; 0x47
 8004d04:	d1bc      	bne.n	8004c80 <_printf_float+0xf0>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1ba      	bne.n	8004c80 <_printf_float+0xf0>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e7b7      	b.n	8004c7e <_printf_float+0xee>
 8004d0e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004d12:	d118      	bne.n	8004d46 <_printf_float+0x1b6>
 8004d14:	2900      	cmp	r1, #0
 8004d16:	6863      	ldr	r3, [r4, #4]
 8004d18:	dd0b      	ble.n	8004d32 <_printf_float+0x1a2>
 8004d1a:	6121      	str	r1, [r4, #16]
 8004d1c:	b913      	cbnz	r3, 8004d24 <_printf_float+0x194>
 8004d1e:	6822      	ldr	r2, [r4, #0]
 8004d20:	07d0      	lsls	r0, r2, #31
 8004d22:	d502      	bpl.n	8004d2a <_printf_float+0x19a>
 8004d24:	3301      	adds	r3, #1
 8004d26:	440b      	add	r3, r1
 8004d28:	6123      	str	r3, [r4, #16]
 8004d2a:	f04f 0a00 	mov.w	sl, #0
 8004d2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d30:	e7df      	b.n	8004cf2 <_printf_float+0x162>
 8004d32:	b913      	cbnz	r3, 8004d3a <_printf_float+0x1aa>
 8004d34:	6822      	ldr	r2, [r4, #0]
 8004d36:	07d2      	lsls	r2, r2, #31
 8004d38:	d501      	bpl.n	8004d3e <_printf_float+0x1ae>
 8004d3a:	3302      	adds	r3, #2
 8004d3c:	e7f4      	b.n	8004d28 <_printf_float+0x198>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e7f2      	b.n	8004d28 <_printf_float+0x198>
 8004d42:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d48:	4299      	cmp	r1, r3
 8004d4a:	db05      	blt.n	8004d58 <_printf_float+0x1c8>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	6121      	str	r1, [r4, #16]
 8004d50:	07d8      	lsls	r0, r3, #31
 8004d52:	d5ea      	bpl.n	8004d2a <_printf_float+0x19a>
 8004d54:	1c4b      	adds	r3, r1, #1
 8004d56:	e7e7      	b.n	8004d28 <_printf_float+0x198>
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	bfcc      	ite	gt
 8004d5c:	2201      	movgt	r2, #1
 8004d5e:	f1c1 0202 	rsble	r2, r1, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	e7e0      	b.n	8004d28 <_printf_float+0x198>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	055a      	lsls	r2, r3, #21
 8004d6a:	d407      	bmi.n	8004d7c <_printf_float+0x1ec>
 8004d6c:	6923      	ldr	r3, [r4, #16]
 8004d6e:	4642      	mov	r2, r8
 8004d70:	4631      	mov	r1, r6
 8004d72:	4628      	mov	r0, r5
 8004d74:	47b8      	blx	r7
 8004d76:	3001      	adds	r0, #1
 8004d78:	d12b      	bne.n	8004dd2 <_printf_float+0x242>
 8004d7a:	e764      	b.n	8004c46 <_printf_float+0xb6>
 8004d7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d80:	f240 80dd 	bls.w	8004f3e <_printf_float+0x3ae>
 8004d84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f7fb fe16 	bl	80009bc <__aeabi_dcmpeq>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d033      	beq.n	8004dfc <_printf_float+0x26c>
 8004d94:	2301      	movs	r3, #1
 8004d96:	4631      	mov	r1, r6
 8004d98:	4628      	mov	r0, r5
 8004d9a:	4a35      	ldr	r2, [pc, #212]	; (8004e70 <_printf_float+0x2e0>)
 8004d9c:	47b8      	blx	r7
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f43f af51 	beq.w	8004c46 <_printf_float+0xb6>
 8004da4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004da8:	429a      	cmp	r2, r3
 8004daa:	db02      	blt.n	8004db2 <_printf_float+0x222>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	07d8      	lsls	r0, r3, #31
 8004db0:	d50f      	bpl.n	8004dd2 <_printf_float+0x242>
 8004db2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b8      	blx	r7
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	f43f af42 	beq.w	8004c46 <_printf_float+0xb6>
 8004dc2:	f04f 0800 	mov.w	r8, #0
 8004dc6:	f104 091a 	add.w	r9, r4, #26
 8004dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	4543      	cmp	r3, r8
 8004dd0:	dc09      	bgt.n	8004de6 <_printf_float+0x256>
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	079b      	lsls	r3, r3, #30
 8004dd6:	f100 8102 	bmi.w	8004fde <_printf_float+0x44e>
 8004dda:	68e0      	ldr	r0, [r4, #12]
 8004ddc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dde:	4298      	cmp	r0, r3
 8004de0:	bfb8      	it	lt
 8004de2:	4618      	movlt	r0, r3
 8004de4:	e731      	b.n	8004c4a <_printf_float+0xba>
 8004de6:	2301      	movs	r3, #1
 8004de8:	464a      	mov	r2, r9
 8004dea:	4631      	mov	r1, r6
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	f43f af28 	beq.w	8004c46 <_printf_float+0xb6>
 8004df6:	f108 0801 	add.w	r8, r8, #1
 8004dfa:	e7e6      	b.n	8004dca <_printf_float+0x23a>
 8004dfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	dc38      	bgt.n	8004e74 <_printf_float+0x2e4>
 8004e02:	2301      	movs	r3, #1
 8004e04:	4631      	mov	r1, r6
 8004e06:	4628      	mov	r0, r5
 8004e08:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <_printf_float+0x2e0>)
 8004e0a:	47b8      	blx	r7
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	f43f af1a 	beq.w	8004c46 <_printf_float+0xb6>
 8004e12:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e16:	4313      	orrs	r3, r2
 8004e18:	d102      	bne.n	8004e20 <_printf_float+0x290>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	07d9      	lsls	r1, r3, #31
 8004e1e:	d5d8      	bpl.n	8004dd2 <_printf_float+0x242>
 8004e20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e24:	4631      	mov	r1, r6
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f43f af0b 	beq.w	8004c46 <_printf_float+0xb6>
 8004e30:	f04f 0900 	mov.w	r9, #0
 8004e34:	f104 0a1a 	add.w	sl, r4, #26
 8004e38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e3a:	425b      	negs	r3, r3
 8004e3c:	454b      	cmp	r3, r9
 8004e3e:	dc01      	bgt.n	8004e44 <_printf_float+0x2b4>
 8004e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e42:	e794      	b.n	8004d6e <_printf_float+0x1de>
 8004e44:	2301      	movs	r3, #1
 8004e46:	4652      	mov	r2, sl
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	47b8      	blx	r7
 8004e4e:	3001      	adds	r0, #1
 8004e50:	f43f aef9 	beq.w	8004c46 <_printf_float+0xb6>
 8004e54:	f109 0901 	add.w	r9, r9, #1
 8004e58:	e7ee      	b.n	8004e38 <_printf_float+0x2a8>
 8004e5a:	bf00      	nop
 8004e5c:	7fefffff 	.word	0x7fefffff
 8004e60:	08007900 	.word	0x08007900
 8004e64:	08007904 	.word	0x08007904
 8004e68:	0800790c 	.word	0x0800790c
 8004e6c:	08007908 	.word	0x08007908
 8004e70:	08007910 	.word	0x08007910
 8004e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	bfa8      	it	ge
 8004e7c:	461a      	movge	r2, r3
 8004e7e:	2a00      	cmp	r2, #0
 8004e80:	4691      	mov	r9, r2
 8004e82:	dc37      	bgt.n	8004ef4 <_printf_float+0x364>
 8004e84:	f04f 0b00 	mov.w	fp, #0
 8004e88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e8c:	f104 021a 	add.w	r2, r4, #26
 8004e90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004e94:	ebaa 0309 	sub.w	r3, sl, r9
 8004e98:	455b      	cmp	r3, fp
 8004e9a:	dc33      	bgt.n	8004f04 <_printf_float+0x374>
 8004e9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	db3b      	blt.n	8004f1c <_printf_float+0x38c>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	07da      	lsls	r2, r3, #31
 8004ea8:	d438      	bmi.n	8004f1c <_printf_float+0x38c>
 8004eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004eae:	eba3 020a 	sub.w	r2, r3, sl
 8004eb2:	eba3 0901 	sub.w	r9, r3, r1
 8004eb6:	4591      	cmp	r9, r2
 8004eb8:	bfa8      	it	ge
 8004eba:	4691      	movge	r9, r2
 8004ebc:	f1b9 0f00 	cmp.w	r9, #0
 8004ec0:	dc34      	bgt.n	8004f2c <_printf_float+0x39c>
 8004ec2:	f04f 0800 	mov.w	r8, #0
 8004ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eca:	f104 0a1a 	add.w	sl, r4, #26
 8004ece:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	eba3 0309 	sub.w	r3, r3, r9
 8004ed8:	4543      	cmp	r3, r8
 8004eda:	f77f af7a 	ble.w	8004dd2 <_printf_float+0x242>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4652      	mov	r2, sl
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	47b8      	blx	r7
 8004ee8:	3001      	adds	r0, #1
 8004eea:	f43f aeac 	beq.w	8004c46 <_printf_float+0xb6>
 8004eee:	f108 0801 	add.w	r8, r8, #1
 8004ef2:	e7ec      	b.n	8004ece <_printf_float+0x33e>
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	4642      	mov	r2, r8
 8004efa:	4628      	mov	r0, r5
 8004efc:	47b8      	blx	r7
 8004efe:	3001      	adds	r0, #1
 8004f00:	d1c0      	bne.n	8004e84 <_printf_float+0x2f4>
 8004f02:	e6a0      	b.n	8004c46 <_printf_float+0xb6>
 8004f04:	2301      	movs	r3, #1
 8004f06:	4631      	mov	r1, r6
 8004f08:	4628      	mov	r0, r5
 8004f0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f0c:	47b8      	blx	r7
 8004f0e:	3001      	adds	r0, #1
 8004f10:	f43f ae99 	beq.w	8004c46 <_printf_float+0xb6>
 8004f14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f16:	f10b 0b01 	add.w	fp, fp, #1
 8004f1a:	e7b9      	b.n	8004e90 <_printf_float+0x300>
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f22:	4628      	mov	r0, r5
 8004f24:	47b8      	blx	r7
 8004f26:	3001      	adds	r0, #1
 8004f28:	d1bf      	bne.n	8004eaa <_printf_float+0x31a>
 8004f2a:	e68c      	b.n	8004c46 <_printf_float+0xb6>
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4628      	mov	r0, r5
 8004f32:	eb08 020a 	add.w	r2, r8, sl
 8004f36:	47b8      	blx	r7
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d1c2      	bne.n	8004ec2 <_printf_float+0x332>
 8004f3c:	e683      	b.n	8004c46 <_printf_float+0xb6>
 8004f3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f40:	2a01      	cmp	r2, #1
 8004f42:	dc01      	bgt.n	8004f48 <_printf_float+0x3b8>
 8004f44:	07db      	lsls	r3, r3, #31
 8004f46:	d537      	bpl.n	8004fb8 <_printf_float+0x428>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	4642      	mov	r2, r8
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	f43f ae77 	beq.w	8004c46 <_printf_float+0xb6>
 8004f58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4628      	mov	r0, r5
 8004f60:	47b8      	blx	r7
 8004f62:	3001      	adds	r0, #1
 8004f64:	f43f ae6f 	beq.w	8004c46 <_printf_float+0xb6>
 8004f68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f7fb fd24 	bl	80009bc <__aeabi_dcmpeq>
 8004f74:	b9d8      	cbnz	r0, 8004fae <_printf_float+0x41e>
 8004f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f78:	f108 0201 	add.w	r2, r8, #1
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b8      	blx	r7
 8004f84:	3001      	adds	r0, #1
 8004f86:	d10e      	bne.n	8004fa6 <_printf_float+0x416>
 8004f88:	e65d      	b.n	8004c46 <_printf_float+0xb6>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	464a      	mov	r2, r9
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4628      	mov	r0, r5
 8004f92:	47b8      	blx	r7
 8004f94:	3001      	adds	r0, #1
 8004f96:	f43f ae56 	beq.w	8004c46 <_printf_float+0xb6>
 8004f9a:	f108 0801 	add.w	r8, r8, #1
 8004f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	4543      	cmp	r3, r8
 8004fa4:	dcf1      	bgt.n	8004f8a <_printf_float+0x3fa>
 8004fa6:	4653      	mov	r3, sl
 8004fa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fac:	e6e0      	b.n	8004d70 <_printf_float+0x1e0>
 8004fae:	f04f 0800 	mov.w	r8, #0
 8004fb2:	f104 091a 	add.w	r9, r4, #26
 8004fb6:	e7f2      	b.n	8004f9e <_printf_float+0x40e>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	4642      	mov	r2, r8
 8004fbc:	e7df      	b.n	8004f7e <_printf_float+0x3ee>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	464a      	mov	r2, r9
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	47b8      	blx	r7
 8004fc8:	3001      	adds	r0, #1
 8004fca:	f43f ae3c 	beq.w	8004c46 <_printf_float+0xb6>
 8004fce:	f108 0801 	add.w	r8, r8, #1
 8004fd2:	68e3      	ldr	r3, [r4, #12]
 8004fd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004fd6:	1a5b      	subs	r3, r3, r1
 8004fd8:	4543      	cmp	r3, r8
 8004fda:	dcf0      	bgt.n	8004fbe <_printf_float+0x42e>
 8004fdc:	e6fd      	b.n	8004dda <_printf_float+0x24a>
 8004fde:	f04f 0800 	mov.w	r8, #0
 8004fe2:	f104 0919 	add.w	r9, r4, #25
 8004fe6:	e7f4      	b.n	8004fd2 <_printf_float+0x442>

08004fe8 <_printf_common>:
 8004fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	4616      	mov	r6, r2
 8004fee:	4699      	mov	r9, r3
 8004ff0:	688a      	ldr	r2, [r1, #8]
 8004ff2:	690b      	ldr	r3, [r1, #16]
 8004ff4:	4607      	mov	r7, r0
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	bfb8      	it	lt
 8004ffa:	4613      	movlt	r3, r2
 8004ffc:	6033      	str	r3, [r6, #0]
 8004ffe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005002:	460c      	mov	r4, r1
 8005004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005008:	b10a      	cbz	r2, 800500e <_printf_common+0x26>
 800500a:	3301      	adds	r3, #1
 800500c:	6033      	str	r3, [r6, #0]
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	0699      	lsls	r1, r3, #26
 8005012:	bf42      	ittt	mi
 8005014:	6833      	ldrmi	r3, [r6, #0]
 8005016:	3302      	addmi	r3, #2
 8005018:	6033      	strmi	r3, [r6, #0]
 800501a:	6825      	ldr	r5, [r4, #0]
 800501c:	f015 0506 	ands.w	r5, r5, #6
 8005020:	d106      	bne.n	8005030 <_printf_common+0x48>
 8005022:	f104 0a19 	add.w	sl, r4, #25
 8005026:	68e3      	ldr	r3, [r4, #12]
 8005028:	6832      	ldr	r2, [r6, #0]
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	42ab      	cmp	r3, r5
 800502e:	dc28      	bgt.n	8005082 <_printf_common+0x9a>
 8005030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005034:	1e13      	subs	r3, r2, #0
 8005036:	6822      	ldr	r2, [r4, #0]
 8005038:	bf18      	it	ne
 800503a:	2301      	movne	r3, #1
 800503c:	0692      	lsls	r2, r2, #26
 800503e:	d42d      	bmi.n	800509c <_printf_common+0xb4>
 8005040:	4649      	mov	r1, r9
 8005042:	4638      	mov	r0, r7
 8005044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005048:	47c0      	blx	r8
 800504a:	3001      	adds	r0, #1
 800504c:	d020      	beq.n	8005090 <_printf_common+0xa8>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	68e5      	ldr	r5, [r4, #12]
 8005052:	f003 0306 	and.w	r3, r3, #6
 8005056:	2b04      	cmp	r3, #4
 8005058:	bf18      	it	ne
 800505a:	2500      	movne	r5, #0
 800505c:	6832      	ldr	r2, [r6, #0]
 800505e:	f04f 0600 	mov.w	r6, #0
 8005062:	68a3      	ldr	r3, [r4, #8]
 8005064:	bf08      	it	eq
 8005066:	1aad      	subeq	r5, r5, r2
 8005068:	6922      	ldr	r2, [r4, #16]
 800506a:	bf08      	it	eq
 800506c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005070:	4293      	cmp	r3, r2
 8005072:	bfc4      	itt	gt
 8005074:	1a9b      	subgt	r3, r3, r2
 8005076:	18ed      	addgt	r5, r5, r3
 8005078:	341a      	adds	r4, #26
 800507a:	42b5      	cmp	r5, r6
 800507c:	d11a      	bne.n	80050b4 <_printf_common+0xcc>
 800507e:	2000      	movs	r0, #0
 8005080:	e008      	b.n	8005094 <_printf_common+0xac>
 8005082:	2301      	movs	r3, #1
 8005084:	4652      	mov	r2, sl
 8005086:	4649      	mov	r1, r9
 8005088:	4638      	mov	r0, r7
 800508a:	47c0      	blx	r8
 800508c:	3001      	adds	r0, #1
 800508e:	d103      	bne.n	8005098 <_printf_common+0xb0>
 8005090:	f04f 30ff 	mov.w	r0, #4294967295
 8005094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005098:	3501      	adds	r5, #1
 800509a:	e7c4      	b.n	8005026 <_printf_common+0x3e>
 800509c:	2030      	movs	r0, #48	; 0x30
 800509e:	18e1      	adds	r1, r4, r3
 80050a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050aa:	4422      	add	r2, r4
 80050ac:	3302      	adds	r3, #2
 80050ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050b2:	e7c5      	b.n	8005040 <_printf_common+0x58>
 80050b4:	2301      	movs	r3, #1
 80050b6:	4622      	mov	r2, r4
 80050b8:	4649      	mov	r1, r9
 80050ba:	4638      	mov	r0, r7
 80050bc:	47c0      	blx	r8
 80050be:	3001      	adds	r0, #1
 80050c0:	d0e6      	beq.n	8005090 <_printf_common+0xa8>
 80050c2:	3601      	adds	r6, #1
 80050c4:	e7d9      	b.n	800507a <_printf_common+0x92>
	...

080050c8 <_printf_i>:
 80050c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	7e0f      	ldrb	r7, [r1, #24]
 80050ce:	4691      	mov	r9, r2
 80050d0:	2f78      	cmp	r7, #120	; 0x78
 80050d2:	4680      	mov	r8, r0
 80050d4:	460c      	mov	r4, r1
 80050d6:	469a      	mov	sl, r3
 80050d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050de:	d807      	bhi.n	80050f0 <_printf_i+0x28>
 80050e0:	2f62      	cmp	r7, #98	; 0x62
 80050e2:	d80a      	bhi.n	80050fa <_printf_i+0x32>
 80050e4:	2f00      	cmp	r7, #0
 80050e6:	f000 80d9 	beq.w	800529c <_printf_i+0x1d4>
 80050ea:	2f58      	cmp	r7, #88	; 0x58
 80050ec:	f000 80a4 	beq.w	8005238 <_printf_i+0x170>
 80050f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050f8:	e03a      	b.n	8005170 <_printf_i+0xa8>
 80050fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050fe:	2b15      	cmp	r3, #21
 8005100:	d8f6      	bhi.n	80050f0 <_printf_i+0x28>
 8005102:	a101      	add	r1, pc, #4	; (adr r1, 8005108 <_printf_i+0x40>)
 8005104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005108:	08005161 	.word	0x08005161
 800510c:	08005175 	.word	0x08005175
 8005110:	080050f1 	.word	0x080050f1
 8005114:	080050f1 	.word	0x080050f1
 8005118:	080050f1 	.word	0x080050f1
 800511c:	080050f1 	.word	0x080050f1
 8005120:	08005175 	.word	0x08005175
 8005124:	080050f1 	.word	0x080050f1
 8005128:	080050f1 	.word	0x080050f1
 800512c:	080050f1 	.word	0x080050f1
 8005130:	080050f1 	.word	0x080050f1
 8005134:	08005283 	.word	0x08005283
 8005138:	080051a5 	.word	0x080051a5
 800513c:	08005265 	.word	0x08005265
 8005140:	080050f1 	.word	0x080050f1
 8005144:	080050f1 	.word	0x080050f1
 8005148:	080052a5 	.word	0x080052a5
 800514c:	080050f1 	.word	0x080050f1
 8005150:	080051a5 	.word	0x080051a5
 8005154:	080050f1 	.word	0x080050f1
 8005158:	080050f1 	.word	0x080050f1
 800515c:	0800526d 	.word	0x0800526d
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	1d1a      	adds	r2, r3, #4
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	602a      	str	r2, [r5, #0]
 8005168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800516c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005170:	2301      	movs	r3, #1
 8005172:	e0a4      	b.n	80052be <_printf_i+0x1f6>
 8005174:	6820      	ldr	r0, [r4, #0]
 8005176:	6829      	ldr	r1, [r5, #0]
 8005178:	0606      	lsls	r6, r0, #24
 800517a:	f101 0304 	add.w	r3, r1, #4
 800517e:	d50a      	bpl.n	8005196 <_printf_i+0xce>
 8005180:	680e      	ldr	r6, [r1, #0]
 8005182:	602b      	str	r3, [r5, #0]
 8005184:	2e00      	cmp	r6, #0
 8005186:	da03      	bge.n	8005190 <_printf_i+0xc8>
 8005188:	232d      	movs	r3, #45	; 0x2d
 800518a:	4276      	negs	r6, r6
 800518c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005190:	230a      	movs	r3, #10
 8005192:	485e      	ldr	r0, [pc, #376]	; (800530c <_printf_i+0x244>)
 8005194:	e019      	b.n	80051ca <_printf_i+0x102>
 8005196:	680e      	ldr	r6, [r1, #0]
 8005198:	f010 0f40 	tst.w	r0, #64	; 0x40
 800519c:	602b      	str	r3, [r5, #0]
 800519e:	bf18      	it	ne
 80051a0:	b236      	sxthne	r6, r6
 80051a2:	e7ef      	b.n	8005184 <_printf_i+0xbc>
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	6820      	ldr	r0, [r4, #0]
 80051a8:	1d19      	adds	r1, r3, #4
 80051aa:	6029      	str	r1, [r5, #0]
 80051ac:	0601      	lsls	r1, r0, #24
 80051ae:	d501      	bpl.n	80051b4 <_printf_i+0xec>
 80051b0:	681e      	ldr	r6, [r3, #0]
 80051b2:	e002      	b.n	80051ba <_printf_i+0xf2>
 80051b4:	0646      	lsls	r6, r0, #25
 80051b6:	d5fb      	bpl.n	80051b0 <_printf_i+0xe8>
 80051b8:	881e      	ldrh	r6, [r3, #0]
 80051ba:	2f6f      	cmp	r7, #111	; 0x6f
 80051bc:	bf0c      	ite	eq
 80051be:	2308      	moveq	r3, #8
 80051c0:	230a      	movne	r3, #10
 80051c2:	4852      	ldr	r0, [pc, #328]	; (800530c <_printf_i+0x244>)
 80051c4:	2100      	movs	r1, #0
 80051c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051ca:	6865      	ldr	r5, [r4, #4]
 80051cc:	2d00      	cmp	r5, #0
 80051ce:	bfa8      	it	ge
 80051d0:	6821      	ldrge	r1, [r4, #0]
 80051d2:	60a5      	str	r5, [r4, #8]
 80051d4:	bfa4      	itt	ge
 80051d6:	f021 0104 	bicge.w	r1, r1, #4
 80051da:	6021      	strge	r1, [r4, #0]
 80051dc:	b90e      	cbnz	r6, 80051e2 <_printf_i+0x11a>
 80051de:	2d00      	cmp	r5, #0
 80051e0:	d04d      	beq.n	800527e <_printf_i+0x1b6>
 80051e2:	4615      	mov	r5, r2
 80051e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80051e8:	fb03 6711 	mls	r7, r3, r1, r6
 80051ec:	5dc7      	ldrb	r7, [r0, r7]
 80051ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051f2:	4637      	mov	r7, r6
 80051f4:	42bb      	cmp	r3, r7
 80051f6:	460e      	mov	r6, r1
 80051f8:	d9f4      	bls.n	80051e4 <_printf_i+0x11c>
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d10b      	bne.n	8005216 <_printf_i+0x14e>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	07de      	lsls	r6, r3, #31
 8005202:	d508      	bpl.n	8005216 <_printf_i+0x14e>
 8005204:	6923      	ldr	r3, [r4, #16]
 8005206:	6861      	ldr	r1, [r4, #4]
 8005208:	4299      	cmp	r1, r3
 800520a:	bfde      	ittt	le
 800520c:	2330      	movle	r3, #48	; 0x30
 800520e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005212:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005216:	1b52      	subs	r2, r2, r5
 8005218:	6122      	str	r2, [r4, #16]
 800521a:	464b      	mov	r3, r9
 800521c:	4621      	mov	r1, r4
 800521e:	4640      	mov	r0, r8
 8005220:	f8cd a000 	str.w	sl, [sp]
 8005224:	aa03      	add	r2, sp, #12
 8005226:	f7ff fedf 	bl	8004fe8 <_printf_common>
 800522a:	3001      	adds	r0, #1
 800522c:	d14c      	bne.n	80052c8 <_printf_i+0x200>
 800522e:	f04f 30ff 	mov.w	r0, #4294967295
 8005232:	b004      	add	sp, #16
 8005234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005238:	4834      	ldr	r0, [pc, #208]	; (800530c <_printf_i+0x244>)
 800523a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800523e:	6829      	ldr	r1, [r5, #0]
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	f851 6b04 	ldr.w	r6, [r1], #4
 8005246:	6029      	str	r1, [r5, #0]
 8005248:	061d      	lsls	r5, r3, #24
 800524a:	d514      	bpl.n	8005276 <_printf_i+0x1ae>
 800524c:	07df      	lsls	r7, r3, #31
 800524e:	bf44      	itt	mi
 8005250:	f043 0320 	orrmi.w	r3, r3, #32
 8005254:	6023      	strmi	r3, [r4, #0]
 8005256:	b91e      	cbnz	r6, 8005260 <_printf_i+0x198>
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	f023 0320 	bic.w	r3, r3, #32
 800525e:	6023      	str	r3, [r4, #0]
 8005260:	2310      	movs	r3, #16
 8005262:	e7af      	b.n	80051c4 <_printf_i+0xfc>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	f043 0320 	orr.w	r3, r3, #32
 800526a:	6023      	str	r3, [r4, #0]
 800526c:	2378      	movs	r3, #120	; 0x78
 800526e:	4828      	ldr	r0, [pc, #160]	; (8005310 <_printf_i+0x248>)
 8005270:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005274:	e7e3      	b.n	800523e <_printf_i+0x176>
 8005276:	0659      	lsls	r1, r3, #25
 8005278:	bf48      	it	mi
 800527a:	b2b6      	uxthmi	r6, r6
 800527c:	e7e6      	b.n	800524c <_printf_i+0x184>
 800527e:	4615      	mov	r5, r2
 8005280:	e7bb      	b.n	80051fa <_printf_i+0x132>
 8005282:	682b      	ldr	r3, [r5, #0]
 8005284:	6826      	ldr	r6, [r4, #0]
 8005286:	1d18      	adds	r0, r3, #4
 8005288:	6961      	ldr	r1, [r4, #20]
 800528a:	6028      	str	r0, [r5, #0]
 800528c:	0635      	lsls	r5, r6, #24
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	d501      	bpl.n	8005296 <_printf_i+0x1ce>
 8005292:	6019      	str	r1, [r3, #0]
 8005294:	e002      	b.n	800529c <_printf_i+0x1d4>
 8005296:	0670      	lsls	r0, r6, #25
 8005298:	d5fb      	bpl.n	8005292 <_printf_i+0x1ca>
 800529a:	8019      	strh	r1, [r3, #0]
 800529c:	2300      	movs	r3, #0
 800529e:	4615      	mov	r5, r2
 80052a0:	6123      	str	r3, [r4, #16]
 80052a2:	e7ba      	b.n	800521a <_printf_i+0x152>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	2100      	movs	r1, #0
 80052a8:	1d1a      	adds	r2, r3, #4
 80052aa:	602a      	str	r2, [r5, #0]
 80052ac:	681d      	ldr	r5, [r3, #0]
 80052ae:	6862      	ldr	r2, [r4, #4]
 80052b0:	4628      	mov	r0, r5
 80052b2:	f000 ffc9 	bl	8006248 <memchr>
 80052b6:	b108      	cbz	r0, 80052bc <_printf_i+0x1f4>
 80052b8:	1b40      	subs	r0, r0, r5
 80052ba:	6060      	str	r0, [r4, #4]
 80052bc:	6863      	ldr	r3, [r4, #4]
 80052be:	6123      	str	r3, [r4, #16]
 80052c0:	2300      	movs	r3, #0
 80052c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c6:	e7a8      	b.n	800521a <_printf_i+0x152>
 80052c8:	462a      	mov	r2, r5
 80052ca:	4649      	mov	r1, r9
 80052cc:	4640      	mov	r0, r8
 80052ce:	6923      	ldr	r3, [r4, #16]
 80052d0:	47d0      	blx	sl
 80052d2:	3001      	adds	r0, #1
 80052d4:	d0ab      	beq.n	800522e <_printf_i+0x166>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	079b      	lsls	r3, r3, #30
 80052da:	d413      	bmi.n	8005304 <_printf_i+0x23c>
 80052dc:	68e0      	ldr	r0, [r4, #12]
 80052de:	9b03      	ldr	r3, [sp, #12]
 80052e0:	4298      	cmp	r0, r3
 80052e2:	bfb8      	it	lt
 80052e4:	4618      	movlt	r0, r3
 80052e6:	e7a4      	b.n	8005232 <_printf_i+0x16a>
 80052e8:	2301      	movs	r3, #1
 80052ea:	4632      	mov	r2, r6
 80052ec:	4649      	mov	r1, r9
 80052ee:	4640      	mov	r0, r8
 80052f0:	47d0      	blx	sl
 80052f2:	3001      	adds	r0, #1
 80052f4:	d09b      	beq.n	800522e <_printf_i+0x166>
 80052f6:	3501      	adds	r5, #1
 80052f8:	68e3      	ldr	r3, [r4, #12]
 80052fa:	9903      	ldr	r1, [sp, #12]
 80052fc:	1a5b      	subs	r3, r3, r1
 80052fe:	42ab      	cmp	r3, r5
 8005300:	dcf2      	bgt.n	80052e8 <_printf_i+0x220>
 8005302:	e7eb      	b.n	80052dc <_printf_i+0x214>
 8005304:	2500      	movs	r5, #0
 8005306:	f104 0619 	add.w	r6, r4, #25
 800530a:	e7f5      	b.n	80052f8 <_printf_i+0x230>
 800530c:	08007912 	.word	0x08007912
 8005310:	08007923 	.word	0x08007923

08005314 <iprintf>:
 8005314:	b40f      	push	{r0, r1, r2, r3}
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <iprintf+0x2c>)
 8005318:	b513      	push	{r0, r1, r4, lr}
 800531a:	681c      	ldr	r4, [r3, #0]
 800531c:	b124      	cbz	r4, 8005328 <iprintf+0x14>
 800531e:	69a3      	ldr	r3, [r4, #24]
 8005320:	b913      	cbnz	r3, 8005328 <iprintf+0x14>
 8005322:	4620      	mov	r0, r4
 8005324:	f000 fee2 	bl	80060ec <__sinit>
 8005328:	ab05      	add	r3, sp, #20
 800532a:	4620      	mov	r0, r4
 800532c:	9a04      	ldr	r2, [sp, #16]
 800532e:	68a1      	ldr	r1, [r4, #8]
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	f001 fc3f 	bl	8006bb4 <_vfiprintf_r>
 8005336:	b002      	add	sp, #8
 8005338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800533c:	b004      	add	sp, #16
 800533e:	4770      	bx	lr
 8005340:	20000010 	.word	0x20000010

08005344 <quorem>:
 8005344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005348:	6903      	ldr	r3, [r0, #16]
 800534a:	690c      	ldr	r4, [r1, #16]
 800534c:	4607      	mov	r7, r0
 800534e:	42a3      	cmp	r3, r4
 8005350:	f2c0 8082 	blt.w	8005458 <quorem+0x114>
 8005354:	3c01      	subs	r4, #1
 8005356:	f100 0514 	add.w	r5, r0, #20
 800535a:	f101 0814 	add.w	r8, r1, #20
 800535e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005368:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800536c:	3301      	adds	r3, #1
 800536e:	429a      	cmp	r2, r3
 8005370:	fbb2 f6f3 	udiv	r6, r2, r3
 8005374:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005378:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800537c:	d331      	bcc.n	80053e2 <quorem+0x9e>
 800537e:	f04f 0e00 	mov.w	lr, #0
 8005382:	4640      	mov	r0, r8
 8005384:	46ac      	mov	ip, r5
 8005386:	46f2      	mov	sl, lr
 8005388:	f850 2b04 	ldr.w	r2, [r0], #4
 800538c:	b293      	uxth	r3, r2
 800538e:	fb06 e303 	mla	r3, r6, r3, lr
 8005392:	0c12      	lsrs	r2, r2, #16
 8005394:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005398:	b29b      	uxth	r3, r3
 800539a:	fb06 e202 	mla	r2, r6, r2, lr
 800539e:	ebaa 0303 	sub.w	r3, sl, r3
 80053a2:	f8dc a000 	ldr.w	sl, [ip]
 80053a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80053aa:	fa1f fa8a 	uxth.w	sl, sl
 80053ae:	4453      	add	r3, sl
 80053b0:	f8dc a000 	ldr.w	sl, [ip]
 80053b4:	b292      	uxth	r2, r2
 80053b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80053ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053be:	b29b      	uxth	r3, r3
 80053c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053c4:	4581      	cmp	r9, r0
 80053c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80053ca:	f84c 3b04 	str.w	r3, [ip], #4
 80053ce:	d2db      	bcs.n	8005388 <quorem+0x44>
 80053d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80053d4:	b92b      	cbnz	r3, 80053e2 <quorem+0x9e>
 80053d6:	9b01      	ldr	r3, [sp, #4]
 80053d8:	3b04      	subs	r3, #4
 80053da:	429d      	cmp	r5, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	d32f      	bcc.n	8005440 <quorem+0xfc>
 80053e0:	613c      	str	r4, [r7, #16]
 80053e2:	4638      	mov	r0, r7
 80053e4:	f001 f9ca 	bl	800677c <__mcmp>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	db25      	blt.n	8005438 <quorem+0xf4>
 80053ec:	4628      	mov	r0, r5
 80053ee:	f04f 0c00 	mov.w	ip, #0
 80053f2:	3601      	adds	r6, #1
 80053f4:	f858 1b04 	ldr.w	r1, [r8], #4
 80053f8:	f8d0 e000 	ldr.w	lr, [r0]
 80053fc:	b28b      	uxth	r3, r1
 80053fe:	ebac 0303 	sub.w	r3, ip, r3
 8005402:	fa1f f28e 	uxth.w	r2, lr
 8005406:	4413      	add	r3, r2
 8005408:	0c0a      	lsrs	r2, r1, #16
 800540a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800540e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005412:	b29b      	uxth	r3, r3
 8005414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005418:	45c1      	cmp	r9, r8
 800541a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800541e:	f840 3b04 	str.w	r3, [r0], #4
 8005422:	d2e7      	bcs.n	80053f4 <quorem+0xb0>
 8005424:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005428:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800542c:	b922      	cbnz	r2, 8005438 <quorem+0xf4>
 800542e:	3b04      	subs	r3, #4
 8005430:	429d      	cmp	r5, r3
 8005432:	461a      	mov	r2, r3
 8005434:	d30a      	bcc.n	800544c <quorem+0x108>
 8005436:	613c      	str	r4, [r7, #16]
 8005438:	4630      	mov	r0, r6
 800543a:	b003      	add	sp, #12
 800543c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	3b04      	subs	r3, #4
 8005444:	2a00      	cmp	r2, #0
 8005446:	d1cb      	bne.n	80053e0 <quorem+0x9c>
 8005448:	3c01      	subs	r4, #1
 800544a:	e7c6      	b.n	80053da <quorem+0x96>
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	3b04      	subs	r3, #4
 8005450:	2a00      	cmp	r2, #0
 8005452:	d1f0      	bne.n	8005436 <quorem+0xf2>
 8005454:	3c01      	subs	r4, #1
 8005456:	e7eb      	b.n	8005430 <quorem+0xec>
 8005458:	2000      	movs	r0, #0
 800545a:	e7ee      	b.n	800543a <quorem+0xf6>
 800545c:	0000      	movs	r0, r0
	...

08005460 <_dtoa_r>:
 8005460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	4616      	mov	r6, r2
 8005466:	461f      	mov	r7, r3
 8005468:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800546a:	b099      	sub	sp, #100	; 0x64
 800546c:	4605      	mov	r5, r0
 800546e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005472:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005476:	b974      	cbnz	r4, 8005496 <_dtoa_r+0x36>
 8005478:	2010      	movs	r0, #16
 800547a:	f000 fedd 	bl	8006238 <malloc>
 800547e:	4602      	mov	r2, r0
 8005480:	6268      	str	r0, [r5, #36]	; 0x24
 8005482:	b920      	cbnz	r0, 800548e <_dtoa_r+0x2e>
 8005484:	21ea      	movs	r1, #234	; 0xea
 8005486:	4ba8      	ldr	r3, [pc, #672]	; (8005728 <_dtoa_r+0x2c8>)
 8005488:	48a8      	ldr	r0, [pc, #672]	; (800572c <_dtoa_r+0x2cc>)
 800548a:	f001 fde9 	bl	8007060 <__assert_func>
 800548e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005492:	6004      	str	r4, [r0, #0]
 8005494:	60c4      	str	r4, [r0, #12]
 8005496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005498:	6819      	ldr	r1, [r3, #0]
 800549a:	b151      	cbz	r1, 80054b2 <_dtoa_r+0x52>
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	2301      	movs	r3, #1
 80054a0:	4093      	lsls	r3, r2
 80054a2:	604a      	str	r2, [r1, #4]
 80054a4:	608b      	str	r3, [r1, #8]
 80054a6:	4628      	mov	r0, r5
 80054a8:	f000 ff2a 	bl	8006300 <_Bfree>
 80054ac:	2200      	movs	r2, #0
 80054ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	1e3b      	subs	r3, r7, #0
 80054b4:	bfaf      	iteee	ge
 80054b6:	2300      	movge	r3, #0
 80054b8:	2201      	movlt	r2, #1
 80054ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80054be:	9305      	strlt	r3, [sp, #20]
 80054c0:	bfa8      	it	ge
 80054c2:	f8c8 3000 	strge.w	r3, [r8]
 80054c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80054ca:	4b99      	ldr	r3, [pc, #612]	; (8005730 <_dtoa_r+0x2d0>)
 80054cc:	bfb8      	it	lt
 80054ce:	f8c8 2000 	strlt.w	r2, [r8]
 80054d2:	ea33 0309 	bics.w	r3, r3, r9
 80054d6:	d119      	bne.n	800550c <_dtoa_r+0xac>
 80054d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80054dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054e4:	4333      	orrs	r3, r6
 80054e6:	f000 857f 	beq.w	8005fe8 <_dtoa_r+0xb88>
 80054ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054ec:	b953      	cbnz	r3, 8005504 <_dtoa_r+0xa4>
 80054ee:	4b91      	ldr	r3, [pc, #580]	; (8005734 <_dtoa_r+0x2d4>)
 80054f0:	e022      	b.n	8005538 <_dtoa_r+0xd8>
 80054f2:	4b91      	ldr	r3, [pc, #580]	; (8005738 <_dtoa_r+0x2d8>)
 80054f4:	9303      	str	r3, [sp, #12]
 80054f6:	3308      	adds	r3, #8
 80054f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	9803      	ldr	r0, [sp, #12]
 80054fe:	b019      	add	sp, #100	; 0x64
 8005500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005504:	4b8b      	ldr	r3, [pc, #556]	; (8005734 <_dtoa_r+0x2d4>)
 8005506:	9303      	str	r3, [sp, #12]
 8005508:	3303      	adds	r3, #3
 800550a:	e7f5      	b.n	80054f8 <_dtoa_r+0x98>
 800550c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005510:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005518:	2200      	movs	r2, #0
 800551a:	2300      	movs	r3, #0
 800551c:	f7fb fa4e 	bl	80009bc <__aeabi_dcmpeq>
 8005520:	4680      	mov	r8, r0
 8005522:	b158      	cbz	r0, 800553c <_dtoa_r+0xdc>
 8005524:	2301      	movs	r3, #1
 8005526:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8558 	beq.w	8005fe2 <_dtoa_r+0xb82>
 8005532:	4882      	ldr	r0, [pc, #520]	; (800573c <_dtoa_r+0x2dc>)
 8005534:	6018      	str	r0, [r3, #0]
 8005536:	1e43      	subs	r3, r0, #1
 8005538:	9303      	str	r3, [sp, #12]
 800553a:	e7df      	b.n	80054fc <_dtoa_r+0x9c>
 800553c:	ab16      	add	r3, sp, #88	; 0x58
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	ab17      	add	r3, sp, #92	; 0x5c
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	4628      	mov	r0, r5
 8005546:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800554a:	f001 f9bf 	bl	80068cc <__d2b>
 800554e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005552:	4683      	mov	fp, r0
 8005554:	2c00      	cmp	r4, #0
 8005556:	d07f      	beq.n	8005658 <_dtoa_r+0x1f8>
 8005558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800555c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800555e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005566:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800556a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800556e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005572:	2200      	movs	r2, #0
 8005574:	4b72      	ldr	r3, [pc, #456]	; (8005740 <_dtoa_r+0x2e0>)
 8005576:	f7fa fe01 	bl	800017c <__aeabi_dsub>
 800557a:	a365      	add	r3, pc, #404	; (adr r3, 8005710 <_dtoa_r+0x2b0>)
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f7fa ffb4 	bl	80004ec <__aeabi_dmul>
 8005584:	a364      	add	r3, pc, #400	; (adr r3, 8005718 <_dtoa_r+0x2b8>)
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f7fa fdf9 	bl	8000180 <__adddf3>
 800558e:	4606      	mov	r6, r0
 8005590:	4620      	mov	r0, r4
 8005592:	460f      	mov	r7, r1
 8005594:	f7fa ff40 	bl	8000418 <__aeabi_i2d>
 8005598:	a361      	add	r3, pc, #388	; (adr r3, 8005720 <_dtoa_r+0x2c0>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f7fa ffa5 	bl	80004ec <__aeabi_dmul>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4630      	mov	r0, r6
 80055a8:	4639      	mov	r1, r7
 80055aa:	f7fa fde9 	bl	8000180 <__adddf3>
 80055ae:	4606      	mov	r6, r0
 80055b0:	460f      	mov	r7, r1
 80055b2:	f7fb fa4b 	bl	8000a4c <__aeabi_d2iz>
 80055b6:	2200      	movs	r2, #0
 80055b8:	4682      	mov	sl, r0
 80055ba:	2300      	movs	r3, #0
 80055bc:	4630      	mov	r0, r6
 80055be:	4639      	mov	r1, r7
 80055c0:	f7fb fa06 	bl	80009d0 <__aeabi_dcmplt>
 80055c4:	b148      	cbz	r0, 80055da <_dtoa_r+0x17a>
 80055c6:	4650      	mov	r0, sl
 80055c8:	f7fa ff26 	bl	8000418 <__aeabi_i2d>
 80055cc:	4632      	mov	r2, r6
 80055ce:	463b      	mov	r3, r7
 80055d0:	f7fb f9f4 	bl	80009bc <__aeabi_dcmpeq>
 80055d4:	b908      	cbnz	r0, 80055da <_dtoa_r+0x17a>
 80055d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055da:	f1ba 0f16 	cmp.w	sl, #22
 80055de:	d858      	bhi.n	8005692 <_dtoa_r+0x232>
 80055e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055e4:	4b57      	ldr	r3, [pc, #348]	; (8005744 <_dtoa_r+0x2e4>)
 80055e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	f7fb f9ef 	bl	80009d0 <__aeabi_dcmplt>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d04f      	beq.n	8005696 <_dtoa_r+0x236>
 80055f6:	2300      	movs	r3, #0
 80055f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80055fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005600:	1b1c      	subs	r4, r3, r4
 8005602:	1e63      	subs	r3, r4, #1
 8005604:	9309      	str	r3, [sp, #36]	; 0x24
 8005606:	bf49      	itett	mi
 8005608:	f1c4 0301 	rsbmi	r3, r4, #1
 800560c:	2300      	movpl	r3, #0
 800560e:	9306      	strmi	r3, [sp, #24]
 8005610:	2300      	movmi	r3, #0
 8005612:	bf54      	ite	pl
 8005614:	9306      	strpl	r3, [sp, #24]
 8005616:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005618:	f1ba 0f00 	cmp.w	sl, #0
 800561c:	db3d      	blt.n	800569a <_dtoa_r+0x23a>
 800561e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005620:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005624:	4453      	add	r3, sl
 8005626:	9309      	str	r3, [sp, #36]	; 0x24
 8005628:	2300      	movs	r3, #0
 800562a:	930a      	str	r3, [sp, #40]	; 0x28
 800562c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800562e:	2b09      	cmp	r3, #9
 8005630:	f200 808c 	bhi.w	800574c <_dtoa_r+0x2ec>
 8005634:	2b05      	cmp	r3, #5
 8005636:	bfc4      	itt	gt
 8005638:	3b04      	subgt	r3, #4
 800563a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800563c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800563e:	bfc8      	it	gt
 8005640:	2400      	movgt	r4, #0
 8005642:	f1a3 0302 	sub.w	r3, r3, #2
 8005646:	bfd8      	it	le
 8005648:	2401      	movle	r4, #1
 800564a:	2b03      	cmp	r3, #3
 800564c:	f200 808a 	bhi.w	8005764 <_dtoa_r+0x304>
 8005650:	e8df f003 	tbb	[pc, r3]
 8005654:	5b4d4f2d 	.word	0x5b4d4f2d
 8005658:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800565c:	441c      	add	r4, r3
 800565e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005662:	2b20      	cmp	r3, #32
 8005664:	bfc3      	ittte	gt
 8005666:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800566a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800566e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005672:	f1c3 0320 	rsble	r3, r3, #32
 8005676:	bfc6      	itte	gt
 8005678:	fa26 f000 	lsrgt.w	r0, r6, r0
 800567c:	4318      	orrgt	r0, r3
 800567e:	fa06 f003 	lslle.w	r0, r6, r3
 8005682:	f7fa feb9 	bl	80003f8 <__aeabi_ui2d>
 8005686:	2301      	movs	r3, #1
 8005688:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800568c:	3c01      	subs	r4, #1
 800568e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005690:	e76f      	b.n	8005572 <_dtoa_r+0x112>
 8005692:	2301      	movs	r3, #1
 8005694:	e7b2      	b.n	80055fc <_dtoa_r+0x19c>
 8005696:	900f      	str	r0, [sp, #60]	; 0x3c
 8005698:	e7b1      	b.n	80055fe <_dtoa_r+0x19e>
 800569a:	9b06      	ldr	r3, [sp, #24]
 800569c:	eba3 030a 	sub.w	r3, r3, sl
 80056a0:	9306      	str	r3, [sp, #24]
 80056a2:	f1ca 0300 	rsb	r3, sl, #0
 80056a6:	930a      	str	r3, [sp, #40]	; 0x28
 80056a8:	2300      	movs	r3, #0
 80056aa:	930e      	str	r3, [sp, #56]	; 0x38
 80056ac:	e7be      	b.n	800562c <_dtoa_r+0x1cc>
 80056ae:	2300      	movs	r3, #0
 80056b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80056b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	dc58      	bgt.n	800576a <_dtoa_r+0x30a>
 80056b8:	f04f 0901 	mov.w	r9, #1
 80056bc:	464b      	mov	r3, r9
 80056be:	f8cd 9020 	str.w	r9, [sp, #32]
 80056c2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80056c6:	2200      	movs	r2, #0
 80056c8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80056ca:	6042      	str	r2, [r0, #4]
 80056cc:	2204      	movs	r2, #4
 80056ce:	f102 0614 	add.w	r6, r2, #20
 80056d2:	429e      	cmp	r6, r3
 80056d4:	6841      	ldr	r1, [r0, #4]
 80056d6:	d94e      	bls.n	8005776 <_dtoa_r+0x316>
 80056d8:	4628      	mov	r0, r5
 80056da:	f000 fdd1 	bl	8006280 <_Balloc>
 80056de:	9003      	str	r0, [sp, #12]
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d14c      	bne.n	800577e <_dtoa_r+0x31e>
 80056e4:	4602      	mov	r2, r0
 80056e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80056ea:	4b17      	ldr	r3, [pc, #92]	; (8005748 <_dtoa_r+0x2e8>)
 80056ec:	e6cc      	b.n	8005488 <_dtoa_r+0x28>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e7de      	b.n	80056b0 <_dtoa_r+0x250>
 80056f2:	2300      	movs	r3, #0
 80056f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80056f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056f8:	eb0a 0903 	add.w	r9, sl, r3
 80056fc:	f109 0301 	add.w	r3, r9, #1
 8005700:	2b01      	cmp	r3, #1
 8005702:	9308      	str	r3, [sp, #32]
 8005704:	bfb8      	it	lt
 8005706:	2301      	movlt	r3, #1
 8005708:	e7dd      	b.n	80056c6 <_dtoa_r+0x266>
 800570a:	2301      	movs	r3, #1
 800570c:	e7f2      	b.n	80056f4 <_dtoa_r+0x294>
 800570e:	bf00      	nop
 8005710:	636f4361 	.word	0x636f4361
 8005714:	3fd287a7 	.word	0x3fd287a7
 8005718:	8b60c8b3 	.word	0x8b60c8b3
 800571c:	3fc68a28 	.word	0x3fc68a28
 8005720:	509f79fb 	.word	0x509f79fb
 8005724:	3fd34413 	.word	0x3fd34413
 8005728:	08007941 	.word	0x08007941
 800572c:	08007958 	.word	0x08007958
 8005730:	7ff00000 	.word	0x7ff00000
 8005734:	0800793d 	.word	0x0800793d
 8005738:	08007934 	.word	0x08007934
 800573c:	08007911 	.word	0x08007911
 8005740:	3ff80000 	.word	0x3ff80000
 8005744:	08007aa8 	.word	0x08007aa8
 8005748:	080079b3 	.word	0x080079b3
 800574c:	2401      	movs	r4, #1
 800574e:	2300      	movs	r3, #0
 8005750:	940b      	str	r4, [sp, #44]	; 0x2c
 8005752:	9322      	str	r3, [sp, #136]	; 0x88
 8005754:	f04f 39ff 	mov.w	r9, #4294967295
 8005758:	2200      	movs	r2, #0
 800575a:	2312      	movs	r3, #18
 800575c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005760:	9223      	str	r2, [sp, #140]	; 0x8c
 8005762:	e7b0      	b.n	80056c6 <_dtoa_r+0x266>
 8005764:	2301      	movs	r3, #1
 8005766:	930b      	str	r3, [sp, #44]	; 0x2c
 8005768:	e7f4      	b.n	8005754 <_dtoa_r+0x2f4>
 800576a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800576e:	464b      	mov	r3, r9
 8005770:	f8cd 9020 	str.w	r9, [sp, #32]
 8005774:	e7a7      	b.n	80056c6 <_dtoa_r+0x266>
 8005776:	3101      	adds	r1, #1
 8005778:	6041      	str	r1, [r0, #4]
 800577a:	0052      	lsls	r2, r2, #1
 800577c:	e7a7      	b.n	80056ce <_dtoa_r+0x26e>
 800577e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005780:	9a03      	ldr	r2, [sp, #12]
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	9b08      	ldr	r3, [sp, #32]
 8005786:	2b0e      	cmp	r3, #14
 8005788:	f200 80a8 	bhi.w	80058dc <_dtoa_r+0x47c>
 800578c:	2c00      	cmp	r4, #0
 800578e:	f000 80a5 	beq.w	80058dc <_dtoa_r+0x47c>
 8005792:	f1ba 0f00 	cmp.w	sl, #0
 8005796:	dd34      	ble.n	8005802 <_dtoa_r+0x3a2>
 8005798:	4a9a      	ldr	r2, [pc, #616]	; (8005a04 <_dtoa_r+0x5a4>)
 800579a:	f00a 030f 	and.w	r3, sl, #15
 800579e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80057a2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80057a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80057ae:	ea4f 142a 	mov.w	r4, sl, asr #4
 80057b2:	d016      	beq.n	80057e2 <_dtoa_r+0x382>
 80057b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057b8:	4b93      	ldr	r3, [pc, #588]	; (8005a08 <_dtoa_r+0x5a8>)
 80057ba:	2703      	movs	r7, #3
 80057bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057c0:	f7fa ffbe 	bl	8000740 <__aeabi_ddiv>
 80057c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057c8:	f004 040f 	and.w	r4, r4, #15
 80057cc:	4e8e      	ldr	r6, [pc, #568]	; (8005a08 <_dtoa_r+0x5a8>)
 80057ce:	b954      	cbnz	r4, 80057e6 <_dtoa_r+0x386>
 80057d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057d8:	f7fa ffb2 	bl	8000740 <__aeabi_ddiv>
 80057dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057e0:	e029      	b.n	8005836 <_dtoa_r+0x3d6>
 80057e2:	2702      	movs	r7, #2
 80057e4:	e7f2      	b.n	80057cc <_dtoa_r+0x36c>
 80057e6:	07e1      	lsls	r1, r4, #31
 80057e8:	d508      	bpl.n	80057fc <_dtoa_r+0x39c>
 80057ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057f2:	f7fa fe7b 	bl	80004ec <__aeabi_dmul>
 80057f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057fa:	3701      	adds	r7, #1
 80057fc:	1064      	asrs	r4, r4, #1
 80057fe:	3608      	adds	r6, #8
 8005800:	e7e5      	b.n	80057ce <_dtoa_r+0x36e>
 8005802:	f000 80a5 	beq.w	8005950 <_dtoa_r+0x4f0>
 8005806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800580a:	f1ca 0400 	rsb	r4, sl, #0
 800580e:	4b7d      	ldr	r3, [pc, #500]	; (8005a04 <_dtoa_r+0x5a4>)
 8005810:	f004 020f 	and.w	r2, r4, #15
 8005814:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f7fa fe66 	bl	80004ec <__aeabi_dmul>
 8005820:	2702      	movs	r7, #2
 8005822:	2300      	movs	r3, #0
 8005824:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005828:	4e77      	ldr	r6, [pc, #476]	; (8005a08 <_dtoa_r+0x5a8>)
 800582a:	1124      	asrs	r4, r4, #4
 800582c:	2c00      	cmp	r4, #0
 800582e:	f040 8084 	bne.w	800593a <_dtoa_r+0x4da>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1d2      	bne.n	80057dc <_dtoa_r+0x37c>
 8005836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 808b 	beq.w	8005954 <_dtoa_r+0x4f4>
 800583e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005842:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005846:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800584a:	2200      	movs	r2, #0
 800584c:	4b6f      	ldr	r3, [pc, #444]	; (8005a0c <_dtoa_r+0x5ac>)
 800584e:	f7fb f8bf 	bl	80009d0 <__aeabi_dcmplt>
 8005852:	2800      	cmp	r0, #0
 8005854:	d07e      	beq.n	8005954 <_dtoa_r+0x4f4>
 8005856:	9b08      	ldr	r3, [sp, #32]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d07b      	beq.n	8005954 <_dtoa_r+0x4f4>
 800585c:	f1b9 0f00 	cmp.w	r9, #0
 8005860:	dd38      	ble.n	80058d4 <_dtoa_r+0x474>
 8005862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005866:	2200      	movs	r2, #0
 8005868:	4b69      	ldr	r3, [pc, #420]	; (8005a10 <_dtoa_r+0x5b0>)
 800586a:	f7fa fe3f 	bl	80004ec <__aeabi_dmul>
 800586e:	464c      	mov	r4, r9
 8005870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005874:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005878:	3701      	adds	r7, #1
 800587a:	4638      	mov	r0, r7
 800587c:	f7fa fdcc 	bl	8000418 <__aeabi_i2d>
 8005880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005884:	f7fa fe32 	bl	80004ec <__aeabi_dmul>
 8005888:	2200      	movs	r2, #0
 800588a:	4b62      	ldr	r3, [pc, #392]	; (8005a14 <_dtoa_r+0x5b4>)
 800588c:	f7fa fc78 	bl	8000180 <__adddf3>
 8005890:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005894:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005898:	9611      	str	r6, [sp, #68]	; 0x44
 800589a:	2c00      	cmp	r4, #0
 800589c:	d15d      	bne.n	800595a <_dtoa_r+0x4fa>
 800589e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058a2:	2200      	movs	r2, #0
 80058a4:	4b5c      	ldr	r3, [pc, #368]	; (8005a18 <_dtoa_r+0x5b8>)
 80058a6:	f7fa fc69 	bl	800017c <__aeabi_dsub>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058b2:	4633      	mov	r3, r6
 80058b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058b6:	f7fb f8a9 	bl	8000a0c <__aeabi_dcmpgt>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	f040 829c 	bne.w	8005df8 <_dtoa_r+0x998>
 80058c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80058ca:	f7fb f881 	bl	80009d0 <__aeabi_dcmplt>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	f040 8290 	bne.w	8005df4 <_dtoa_r+0x994>
 80058d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80058d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80058dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f2c0 8152 	blt.w	8005b88 <_dtoa_r+0x728>
 80058e4:	f1ba 0f0e 	cmp.w	sl, #14
 80058e8:	f300 814e 	bgt.w	8005b88 <_dtoa_r+0x728>
 80058ec:	4b45      	ldr	r3, [pc, #276]	; (8005a04 <_dtoa_r+0x5a4>)
 80058ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80058fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f280 80db 	bge.w	8005ab8 <_dtoa_r+0x658>
 8005902:	9b08      	ldr	r3, [sp, #32]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f300 80d7 	bgt.w	8005ab8 <_dtoa_r+0x658>
 800590a:	f040 8272 	bne.w	8005df2 <_dtoa_r+0x992>
 800590e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005912:	2200      	movs	r2, #0
 8005914:	4b40      	ldr	r3, [pc, #256]	; (8005a18 <_dtoa_r+0x5b8>)
 8005916:	f7fa fde9 	bl	80004ec <__aeabi_dmul>
 800591a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800591e:	f7fb f86b 	bl	80009f8 <__aeabi_dcmpge>
 8005922:	9c08      	ldr	r4, [sp, #32]
 8005924:	4626      	mov	r6, r4
 8005926:	2800      	cmp	r0, #0
 8005928:	f040 8248 	bne.w	8005dbc <_dtoa_r+0x95c>
 800592c:	2331      	movs	r3, #49	; 0x31
 800592e:	9f03      	ldr	r7, [sp, #12]
 8005930:	f10a 0a01 	add.w	sl, sl, #1
 8005934:	f807 3b01 	strb.w	r3, [r7], #1
 8005938:	e244      	b.n	8005dc4 <_dtoa_r+0x964>
 800593a:	07e2      	lsls	r2, r4, #31
 800593c:	d505      	bpl.n	800594a <_dtoa_r+0x4ea>
 800593e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005942:	f7fa fdd3 	bl	80004ec <__aeabi_dmul>
 8005946:	2301      	movs	r3, #1
 8005948:	3701      	adds	r7, #1
 800594a:	1064      	asrs	r4, r4, #1
 800594c:	3608      	adds	r6, #8
 800594e:	e76d      	b.n	800582c <_dtoa_r+0x3cc>
 8005950:	2702      	movs	r7, #2
 8005952:	e770      	b.n	8005836 <_dtoa_r+0x3d6>
 8005954:	46d0      	mov	r8, sl
 8005956:	9c08      	ldr	r4, [sp, #32]
 8005958:	e78f      	b.n	800587a <_dtoa_r+0x41a>
 800595a:	9903      	ldr	r1, [sp, #12]
 800595c:	4b29      	ldr	r3, [pc, #164]	; (8005a04 <_dtoa_r+0x5a4>)
 800595e:	4421      	add	r1, r4
 8005960:	9112      	str	r1, [sp, #72]	; 0x48
 8005962:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005964:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005968:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800596c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005970:	2900      	cmp	r1, #0
 8005972:	d055      	beq.n	8005a20 <_dtoa_r+0x5c0>
 8005974:	2000      	movs	r0, #0
 8005976:	4929      	ldr	r1, [pc, #164]	; (8005a1c <_dtoa_r+0x5bc>)
 8005978:	f7fa fee2 	bl	8000740 <__aeabi_ddiv>
 800597c:	463b      	mov	r3, r7
 800597e:	4632      	mov	r2, r6
 8005980:	f7fa fbfc 	bl	800017c <__aeabi_dsub>
 8005984:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005988:	9f03      	ldr	r7, [sp, #12]
 800598a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800598e:	f7fb f85d 	bl	8000a4c <__aeabi_d2iz>
 8005992:	4604      	mov	r4, r0
 8005994:	f7fa fd40 	bl	8000418 <__aeabi_i2d>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059a0:	f7fa fbec 	bl	800017c <__aeabi_dsub>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	3430      	adds	r4, #48	; 0x30
 80059aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059b2:	f807 4b01 	strb.w	r4, [r7], #1
 80059b6:	f7fb f80b 	bl	80009d0 <__aeabi_dcmplt>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d174      	bne.n	8005aa8 <_dtoa_r+0x648>
 80059be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059c2:	2000      	movs	r0, #0
 80059c4:	4911      	ldr	r1, [pc, #68]	; (8005a0c <_dtoa_r+0x5ac>)
 80059c6:	f7fa fbd9 	bl	800017c <__aeabi_dsub>
 80059ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059ce:	f7fa ffff 	bl	80009d0 <__aeabi_dcmplt>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	f040 80b7 	bne.w	8005b46 <_dtoa_r+0x6e6>
 80059d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059da:	429f      	cmp	r7, r3
 80059dc:	f43f af7a 	beq.w	80058d4 <_dtoa_r+0x474>
 80059e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059e4:	2200      	movs	r2, #0
 80059e6:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <_dtoa_r+0x5b0>)
 80059e8:	f7fa fd80 	bl	80004ec <__aeabi_dmul>
 80059ec:	2200      	movs	r2, #0
 80059ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <_dtoa_r+0x5b0>)
 80059f8:	f7fa fd78 	bl	80004ec <__aeabi_dmul>
 80059fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a00:	e7c3      	b.n	800598a <_dtoa_r+0x52a>
 8005a02:	bf00      	nop
 8005a04:	08007aa8 	.word	0x08007aa8
 8005a08:	08007a80 	.word	0x08007a80
 8005a0c:	3ff00000 	.word	0x3ff00000
 8005a10:	40240000 	.word	0x40240000
 8005a14:	401c0000 	.word	0x401c0000
 8005a18:	40140000 	.word	0x40140000
 8005a1c:	3fe00000 	.word	0x3fe00000
 8005a20:	4630      	mov	r0, r6
 8005a22:	4639      	mov	r1, r7
 8005a24:	f7fa fd62 	bl	80004ec <__aeabi_dmul>
 8005a28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a2e:	9c03      	ldr	r4, [sp, #12]
 8005a30:	9314      	str	r3, [sp, #80]	; 0x50
 8005a32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a36:	f7fb f809 	bl	8000a4c <__aeabi_d2iz>
 8005a3a:	9015      	str	r0, [sp, #84]	; 0x54
 8005a3c:	f7fa fcec 	bl	8000418 <__aeabi_i2d>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a48:	f7fa fb98 	bl	800017c <__aeabi_dsub>
 8005a4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a4e:	4606      	mov	r6, r0
 8005a50:	3330      	adds	r3, #48	; 0x30
 8005a52:	f804 3b01 	strb.w	r3, [r4], #1
 8005a56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a58:	460f      	mov	r7, r1
 8005a5a:	429c      	cmp	r4, r3
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	d124      	bne.n	8005aac <_dtoa_r+0x64c>
 8005a62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a66:	4bb0      	ldr	r3, [pc, #704]	; (8005d28 <_dtoa_r+0x8c8>)
 8005a68:	f7fa fb8a 	bl	8000180 <__adddf3>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4630      	mov	r0, r6
 8005a72:	4639      	mov	r1, r7
 8005a74:	f7fa ffca 	bl	8000a0c <__aeabi_dcmpgt>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d163      	bne.n	8005b44 <_dtoa_r+0x6e4>
 8005a7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a80:	2000      	movs	r0, #0
 8005a82:	49a9      	ldr	r1, [pc, #676]	; (8005d28 <_dtoa_r+0x8c8>)
 8005a84:	f7fa fb7a 	bl	800017c <__aeabi_dsub>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	4639      	mov	r1, r7
 8005a90:	f7fa ff9e 	bl	80009d0 <__aeabi_dcmplt>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	f43f af1d 	beq.w	80058d4 <_dtoa_r+0x474>
 8005a9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005a9c:	1e7b      	subs	r3, r7, #1
 8005a9e:	9314      	str	r3, [sp, #80]	; 0x50
 8005aa0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005aa4:	2b30      	cmp	r3, #48	; 0x30
 8005aa6:	d0f8      	beq.n	8005a9a <_dtoa_r+0x63a>
 8005aa8:	46c2      	mov	sl, r8
 8005aaa:	e03b      	b.n	8005b24 <_dtoa_r+0x6c4>
 8005aac:	4b9f      	ldr	r3, [pc, #636]	; (8005d2c <_dtoa_r+0x8cc>)
 8005aae:	f7fa fd1d 	bl	80004ec <__aeabi_dmul>
 8005ab2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ab6:	e7bc      	b.n	8005a32 <_dtoa_r+0x5d2>
 8005ab8:	9f03      	ldr	r7, [sp, #12]
 8005aba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005abe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	f7fa fe3b 	bl	8000740 <__aeabi_ddiv>
 8005aca:	f7fa ffbf 	bl	8000a4c <__aeabi_d2iz>
 8005ace:	4604      	mov	r4, r0
 8005ad0:	f7fa fca2 	bl	8000418 <__aeabi_i2d>
 8005ad4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ad8:	f7fa fd08 	bl	80004ec <__aeabi_dmul>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	f7fa fb4a 	bl	800017c <__aeabi_dsub>
 8005ae8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005aec:	f807 6b01 	strb.w	r6, [r7], #1
 8005af0:	9e03      	ldr	r6, [sp, #12]
 8005af2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005af6:	1bbe      	subs	r6, r7, r6
 8005af8:	45b4      	cmp	ip, r6
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	d136      	bne.n	8005b6e <_dtoa_r+0x70e>
 8005b00:	f7fa fb3e 	bl	8000180 <__adddf3>
 8005b04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b08:	4680      	mov	r8, r0
 8005b0a:	4689      	mov	r9, r1
 8005b0c:	f7fa ff7e 	bl	8000a0c <__aeabi_dcmpgt>
 8005b10:	bb58      	cbnz	r0, 8005b6a <_dtoa_r+0x70a>
 8005b12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b16:	4640      	mov	r0, r8
 8005b18:	4649      	mov	r1, r9
 8005b1a:	f7fa ff4f 	bl	80009bc <__aeabi_dcmpeq>
 8005b1e:	b108      	cbz	r0, 8005b24 <_dtoa_r+0x6c4>
 8005b20:	07e1      	lsls	r1, r4, #31
 8005b22:	d422      	bmi.n	8005b6a <_dtoa_r+0x70a>
 8005b24:	4628      	mov	r0, r5
 8005b26:	4659      	mov	r1, fp
 8005b28:	f000 fbea 	bl	8006300 <_Bfree>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	703b      	strb	r3, [r7, #0]
 8005b30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005b32:	f10a 0001 	add.w	r0, sl, #1
 8005b36:	6018      	str	r0, [r3, #0]
 8005b38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f43f acde 	beq.w	80054fc <_dtoa_r+0x9c>
 8005b40:	601f      	str	r7, [r3, #0]
 8005b42:	e4db      	b.n	80054fc <_dtoa_r+0x9c>
 8005b44:	4627      	mov	r7, r4
 8005b46:	463b      	mov	r3, r7
 8005b48:	461f      	mov	r7, r3
 8005b4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b4e:	2a39      	cmp	r2, #57	; 0x39
 8005b50:	d107      	bne.n	8005b62 <_dtoa_r+0x702>
 8005b52:	9a03      	ldr	r2, [sp, #12]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1f7      	bne.n	8005b48 <_dtoa_r+0x6e8>
 8005b58:	2230      	movs	r2, #48	; 0x30
 8005b5a:	9903      	ldr	r1, [sp, #12]
 8005b5c:	f108 0801 	add.w	r8, r8, #1
 8005b60:	700a      	strb	r2, [r1, #0]
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	3201      	adds	r2, #1
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	e79e      	b.n	8005aa8 <_dtoa_r+0x648>
 8005b6a:	46d0      	mov	r8, sl
 8005b6c:	e7eb      	b.n	8005b46 <_dtoa_r+0x6e6>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4b6e      	ldr	r3, [pc, #440]	; (8005d2c <_dtoa_r+0x8cc>)
 8005b72:	f7fa fcbb 	bl	80004ec <__aeabi_dmul>
 8005b76:	2200      	movs	r2, #0
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4680      	mov	r8, r0
 8005b7c:	4689      	mov	r9, r1
 8005b7e:	f7fa ff1d 	bl	80009bc <__aeabi_dcmpeq>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d09b      	beq.n	8005abe <_dtoa_r+0x65e>
 8005b86:	e7cd      	b.n	8005b24 <_dtoa_r+0x6c4>
 8005b88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b8a:	2a00      	cmp	r2, #0
 8005b8c:	f000 80d0 	beq.w	8005d30 <_dtoa_r+0x8d0>
 8005b90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b92:	2a01      	cmp	r2, #1
 8005b94:	f300 80ae 	bgt.w	8005cf4 <_dtoa_r+0x894>
 8005b98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	f000 80a6 	beq.w	8005cec <_dtoa_r+0x88c>
 8005ba0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ba4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ba6:	9f06      	ldr	r7, [sp, #24]
 8005ba8:	9a06      	ldr	r2, [sp, #24]
 8005baa:	2101      	movs	r1, #1
 8005bac:	441a      	add	r2, r3
 8005bae:	9206      	str	r2, [sp, #24]
 8005bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	441a      	add	r2, r3
 8005bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8005bb8:	f000 fc58 	bl	800646c <__i2b>
 8005bbc:	4606      	mov	r6, r0
 8005bbe:	2f00      	cmp	r7, #0
 8005bc0:	dd0c      	ble.n	8005bdc <_dtoa_r+0x77c>
 8005bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	dd09      	ble.n	8005bdc <_dtoa_r+0x77c>
 8005bc8:	42bb      	cmp	r3, r7
 8005bca:	bfa8      	it	ge
 8005bcc:	463b      	movge	r3, r7
 8005bce:	9a06      	ldr	r2, [sp, #24]
 8005bd0:	1aff      	subs	r7, r7, r3
 8005bd2:	1ad2      	subs	r2, r2, r3
 8005bd4:	9206      	str	r2, [sp, #24]
 8005bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	9309      	str	r3, [sp, #36]	; 0x24
 8005bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bde:	b1f3      	cbz	r3, 8005c1e <_dtoa_r+0x7be>
 8005be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 80a8 	beq.w	8005d38 <_dtoa_r+0x8d8>
 8005be8:	2c00      	cmp	r4, #0
 8005bea:	dd10      	ble.n	8005c0e <_dtoa_r+0x7ae>
 8005bec:	4631      	mov	r1, r6
 8005bee:	4622      	mov	r2, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f000 fcf9 	bl	80065e8 <__pow5mult>
 8005bf6:	465a      	mov	r2, fp
 8005bf8:	4601      	mov	r1, r0
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f000 fc4b 	bl	8006498 <__multiply>
 8005c02:	4680      	mov	r8, r0
 8005c04:	4659      	mov	r1, fp
 8005c06:	4628      	mov	r0, r5
 8005c08:	f000 fb7a 	bl	8006300 <_Bfree>
 8005c0c:	46c3      	mov	fp, r8
 8005c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c10:	1b1a      	subs	r2, r3, r4
 8005c12:	d004      	beq.n	8005c1e <_dtoa_r+0x7be>
 8005c14:	4659      	mov	r1, fp
 8005c16:	4628      	mov	r0, r5
 8005c18:	f000 fce6 	bl	80065e8 <__pow5mult>
 8005c1c:	4683      	mov	fp, r0
 8005c1e:	2101      	movs	r1, #1
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 fc23 	bl	800646c <__i2b>
 8005c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c28:	4604      	mov	r4, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f340 8086 	ble.w	8005d3c <_dtoa_r+0x8dc>
 8005c30:	461a      	mov	r2, r3
 8005c32:	4601      	mov	r1, r0
 8005c34:	4628      	mov	r0, r5
 8005c36:	f000 fcd7 	bl	80065e8 <__pow5mult>
 8005c3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	dd7f      	ble.n	8005d42 <_dtoa_r+0x8e2>
 8005c42:	f04f 0800 	mov.w	r8, #0
 8005c46:	6923      	ldr	r3, [r4, #16]
 8005c48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c4c:	6918      	ldr	r0, [r3, #16]
 8005c4e:	f000 fbbf 	bl	80063d0 <__hi0bits>
 8005c52:	f1c0 0020 	rsb	r0, r0, #32
 8005c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c58:	4418      	add	r0, r3
 8005c5a:	f010 001f 	ands.w	r0, r0, #31
 8005c5e:	f000 8092 	beq.w	8005d86 <_dtoa_r+0x926>
 8005c62:	f1c0 0320 	rsb	r3, r0, #32
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	f340 808a 	ble.w	8005d80 <_dtoa_r+0x920>
 8005c6c:	f1c0 001c 	rsb	r0, r0, #28
 8005c70:	9b06      	ldr	r3, [sp, #24]
 8005c72:	4407      	add	r7, r0
 8005c74:	4403      	add	r3, r0
 8005c76:	9306      	str	r3, [sp, #24]
 8005c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7a:	4403      	add	r3, r0
 8005c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7e:	9b06      	ldr	r3, [sp, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	dd05      	ble.n	8005c90 <_dtoa_r+0x830>
 8005c84:	4659      	mov	r1, fp
 8005c86:	461a      	mov	r2, r3
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 fd07 	bl	800669c <__lshift>
 8005c8e:	4683      	mov	fp, r0
 8005c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	dd05      	ble.n	8005ca2 <_dtoa_r+0x842>
 8005c96:	4621      	mov	r1, r4
 8005c98:	461a      	mov	r2, r3
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 fcfe 	bl	800669c <__lshift>
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d070      	beq.n	8005d8a <_dtoa_r+0x92a>
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4658      	mov	r0, fp
 8005cac:	f000 fd66 	bl	800677c <__mcmp>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	da6a      	bge.n	8005d8a <_dtoa_r+0x92a>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	220a      	movs	r2, #10
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f000 fb42 	bl	8006344 <__multadd>
 8005cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cc2:	4683      	mov	fp, r0
 8005cc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 8194 	beq.w	8005ff6 <_dtoa_r+0xb96>
 8005cce:	4631      	mov	r1, r6
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	220a      	movs	r2, #10
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f000 fb35 	bl	8006344 <__multadd>
 8005cda:	f1b9 0f00 	cmp.w	r9, #0
 8005cde:	4606      	mov	r6, r0
 8005ce0:	f300 8093 	bgt.w	8005e0a <_dtoa_r+0x9aa>
 8005ce4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	dc57      	bgt.n	8005d9a <_dtoa_r+0x93a>
 8005cea:	e08e      	b.n	8005e0a <_dtoa_r+0x9aa>
 8005cec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005cee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005cf2:	e757      	b.n	8005ba4 <_dtoa_r+0x744>
 8005cf4:	9b08      	ldr	r3, [sp, #32]
 8005cf6:	1e5c      	subs	r4, r3, #1
 8005cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfa:	42a3      	cmp	r3, r4
 8005cfc:	bfb7      	itett	lt
 8005cfe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005d00:	1b1c      	subge	r4, r3, r4
 8005d02:	1ae2      	sublt	r2, r4, r3
 8005d04:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005d06:	bfbe      	ittt	lt
 8005d08:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005d0a:	189b      	addlt	r3, r3, r2
 8005d0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005d0e:	9b08      	ldr	r3, [sp, #32]
 8005d10:	bfb8      	it	lt
 8005d12:	2400      	movlt	r4, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bfbb      	ittet	lt
 8005d18:	9b06      	ldrlt	r3, [sp, #24]
 8005d1a:	9a08      	ldrlt	r2, [sp, #32]
 8005d1c:	9f06      	ldrge	r7, [sp, #24]
 8005d1e:	1a9f      	sublt	r7, r3, r2
 8005d20:	bfac      	ite	ge
 8005d22:	9b08      	ldrge	r3, [sp, #32]
 8005d24:	2300      	movlt	r3, #0
 8005d26:	e73f      	b.n	8005ba8 <_dtoa_r+0x748>
 8005d28:	3fe00000 	.word	0x3fe00000
 8005d2c:	40240000 	.word	0x40240000
 8005d30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d32:	9f06      	ldr	r7, [sp, #24]
 8005d34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005d36:	e742      	b.n	8005bbe <_dtoa_r+0x75e>
 8005d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d3a:	e76b      	b.n	8005c14 <_dtoa_r+0x7b4>
 8005d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	dc19      	bgt.n	8005d76 <_dtoa_r+0x916>
 8005d42:	9b04      	ldr	r3, [sp, #16]
 8005d44:	b9bb      	cbnz	r3, 8005d76 <_dtoa_r+0x916>
 8005d46:	9b05      	ldr	r3, [sp, #20]
 8005d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d4c:	b99b      	cbnz	r3, 8005d76 <_dtoa_r+0x916>
 8005d4e:	9b05      	ldr	r3, [sp, #20]
 8005d50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d54:	0d1b      	lsrs	r3, r3, #20
 8005d56:	051b      	lsls	r3, r3, #20
 8005d58:	b183      	cbz	r3, 8005d7c <_dtoa_r+0x91c>
 8005d5a:	f04f 0801 	mov.w	r8, #1
 8005d5e:	9b06      	ldr	r3, [sp, #24]
 8005d60:	3301      	adds	r3, #1
 8005d62:	9306      	str	r3, [sp, #24]
 8005d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d66:	3301      	adds	r3, #1
 8005d68:	9309      	str	r3, [sp, #36]	; 0x24
 8005d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f47f af6a 	bne.w	8005c46 <_dtoa_r+0x7e6>
 8005d72:	2001      	movs	r0, #1
 8005d74:	e76f      	b.n	8005c56 <_dtoa_r+0x7f6>
 8005d76:	f04f 0800 	mov.w	r8, #0
 8005d7a:	e7f6      	b.n	8005d6a <_dtoa_r+0x90a>
 8005d7c:	4698      	mov	r8, r3
 8005d7e:	e7f4      	b.n	8005d6a <_dtoa_r+0x90a>
 8005d80:	f43f af7d 	beq.w	8005c7e <_dtoa_r+0x81e>
 8005d84:	4618      	mov	r0, r3
 8005d86:	301c      	adds	r0, #28
 8005d88:	e772      	b.n	8005c70 <_dtoa_r+0x810>
 8005d8a:	9b08      	ldr	r3, [sp, #32]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dc36      	bgt.n	8005dfe <_dtoa_r+0x99e>
 8005d90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	dd33      	ble.n	8005dfe <_dtoa_r+0x99e>
 8005d96:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d9a:	f1b9 0f00 	cmp.w	r9, #0
 8005d9e:	d10d      	bne.n	8005dbc <_dtoa_r+0x95c>
 8005da0:	4621      	mov	r1, r4
 8005da2:	464b      	mov	r3, r9
 8005da4:	2205      	movs	r2, #5
 8005da6:	4628      	mov	r0, r5
 8005da8:	f000 facc 	bl	8006344 <__multadd>
 8005dac:	4601      	mov	r1, r0
 8005dae:	4604      	mov	r4, r0
 8005db0:	4658      	mov	r0, fp
 8005db2:	f000 fce3 	bl	800677c <__mcmp>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	f73f adb8 	bgt.w	800592c <_dtoa_r+0x4cc>
 8005dbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dbe:	9f03      	ldr	r7, [sp, #12]
 8005dc0:	ea6f 0a03 	mvn.w	sl, r3
 8005dc4:	f04f 0800 	mov.w	r8, #0
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 fa98 	bl	8006300 <_Bfree>
 8005dd0:	2e00      	cmp	r6, #0
 8005dd2:	f43f aea7 	beq.w	8005b24 <_dtoa_r+0x6c4>
 8005dd6:	f1b8 0f00 	cmp.w	r8, #0
 8005dda:	d005      	beq.n	8005de8 <_dtoa_r+0x988>
 8005ddc:	45b0      	cmp	r8, r6
 8005dde:	d003      	beq.n	8005de8 <_dtoa_r+0x988>
 8005de0:	4641      	mov	r1, r8
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 fa8c 	bl	8006300 <_Bfree>
 8005de8:	4631      	mov	r1, r6
 8005dea:	4628      	mov	r0, r5
 8005dec:	f000 fa88 	bl	8006300 <_Bfree>
 8005df0:	e698      	b.n	8005b24 <_dtoa_r+0x6c4>
 8005df2:	2400      	movs	r4, #0
 8005df4:	4626      	mov	r6, r4
 8005df6:	e7e1      	b.n	8005dbc <_dtoa_r+0x95c>
 8005df8:	46c2      	mov	sl, r8
 8005dfa:	4626      	mov	r6, r4
 8005dfc:	e596      	b.n	800592c <_dtoa_r+0x4cc>
 8005dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 80fd 	beq.w	8006004 <_dtoa_r+0xba4>
 8005e0a:	2f00      	cmp	r7, #0
 8005e0c:	dd05      	ble.n	8005e1a <_dtoa_r+0x9ba>
 8005e0e:	4631      	mov	r1, r6
 8005e10:	463a      	mov	r2, r7
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 fc42 	bl	800669c <__lshift>
 8005e18:	4606      	mov	r6, r0
 8005e1a:	f1b8 0f00 	cmp.w	r8, #0
 8005e1e:	d05c      	beq.n	8005eda <_dtoa_r+0xa7a>
 8005e20:	4628      	mov	r0, r5
 8005e22:	6871      	ldr	r1, [r6, #4]
 8005e24:	f000 fa2c 	bl	8006280 <_Balloc>
 8005e28:	4607      	mov	r7, r0
 8005e2a:	b928      	cbnz	r0, 8005e38 <_dtoa_r+0x9d8>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e32:	4b7f      	ldr	r3, [pc, #508]	; (8006030 <_dtoa_r+0xbd0>)
 8005e34:	f7ff bb28 	b.w	8005488 <_dtoa_r+0x28>
 8005e38:	6932      	ldr	r2, [r6, #16]
 8005e3a:	f106 010c 	add.w	r1, r6, #12
 8005e3e:	3202      	adds	r2, #2
 8005e40:	0092      	lsls	r2, r2, #2
 8005e42:	300c      	adds	r0, #12
 8005e44:	f000 fa0e 	bl	8006264 <memcpy>
 8005e48:	2201      	movs	r2, #1
 8005e4a:	4639      	mov	r1, r7
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f000 fc25 	bl	800669c <__lshift>
 8005e52:	46b0      	mov	r8, r6
 8005e54:	4606      	mov	r6, r0
 8005e56:	9b03      	ldr	r3, [sp, #12]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	9308      	str	r3, [sp, #32]
 8005e5c:	9b03      	ldr	r3, [sp, #12]
 8005e5e:	444b      	add	r3, r9
 8005e60:	930a      	str	r3, [sp, #40]	; 0x28
 8005e62:	9b04      	ldr	r3, [sp, #16]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6a:	9b08      	ldr	r3, [sp, #32]
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	4658      	mov	r0, fp
 8005e72:	9304      	str	r3, [sp, #16]
 8005e74:	f7ff fa66 	bl	8005344 <quorem>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	3330      	adds	r3, #48	; 0x30
 8005e7e:	9006      	str	r0, [sp, #24]
 8005e80:	4658      	mov	r0, fp
 8005e82:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e84:	f000 fc7a 	bl	800677c <__mcmp>
 8005e88:	4632      	mov	r2, r6
 8005e8a:	4681      	mov	r9, r0
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f000 fc90 	bl	80067b4 <__mdiff>
 8005e94:	68c2      	ldr	r2, [r0, #12]
 8005e96:	4607      	mov	r7, r0
 8005e98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e9a:	bb02      	cbnz	r2, 8005ede <_dtoa_r+0xa7e>
 8005e9c:	4601      	mov	r1, r0
 8005e9e:	4658      	mov	r0, fp
 8005ea0:	f000 fc6c 	bl	800677c <__mcmp>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	4628      	mov	r0, r5
 8005eac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005eb0:	f000 fa26 	bl	8006300 <_Bfree>
 8005eb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005eb8:	9f08      	ldr	r7, [sp, #32]
 8005eba:	ea43 0102 	orr.w	r1, r3, r2
 8005ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ec4:	d10d      	bne.n	8005ee2 <_dtoa_r+0xa82>
 8005ec6:	2b39      	cmp	r3, #57	; 0x39
 8005ec8:	d029      	beq.n	8005f1e <_dtoa_r+0xabe>
 8005eca:	f1b9 0f00 	cmp.w	r9, #0
 8005ece:	dd01      	ble.n	8005ed4 <_dtoa_r+0xa74>
 8005ed0:	9b06      	ldr	r3, [sp, #24]
 8005ed2:	3331      	adds	r3, #49	; 0x31
 8005ed4:	9a04      	ldr	r2, [sp, #16]
 8005ed6:	7013      	strb	r3, [r2, #0]
 8005ed8:	e776      	b.n	8005dc8 <_dtoa_r+0x968>
 8005eda:	4630      	mov	r0, r6
 8005edc:	e7b9      	b.n	8005e52 <_dtoa_r+0x9f2>
 8005ede:	2201      	movs	r2, #1
 8005ee0:	e7e2      	b.n	8005ea8 <_dtoa_r+0xa48>
 8005ee2:	f1b9 0f00 	cmp.w	r9, #0
 8005ee6:	db06      	blt.n	8005ef6 <_dtoa_r+0xa96>
 8005ee8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005eea:	ea41 0909 	orr.w	r9, r1, r9
 8005eee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ef0:	ea59 0101 	orrs.w	r1, r9, r1
 8005ef4:	d120      	bne.n	8005f38 <_dtoa_r+0xad8>
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	ddec      	ble.n	8005ed4 <_dtoa_r+0xa74>
 8005efa:	4659      	mov	r1, fp
 8005efc:	2201      	movs	r2, #1
 8005efe:	4628      	mov	r0, r5
 8005f00:	9308      	str	r3, [sp, #32]
 8005f02:	f000 fbcb 	bl	800669c <__lshift>
 8005f06:	4621      	mov	r1, r4
 8005f08:	4683      	mov	fp, r0
 8005f0a:	f000 fc37 	bl	800677c <__mcmp>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	9b08      	ldr	r3, [sp, #32]
 8005f12:	dc02      	bgt.n	8005f1a <_dtoa_r+0xaba>
 8005f14:	d1de      	bne.n	8005ed4 <_dtoa_r+0xa74>
 8005f16:	07da      	lsls	r2, r3, #31
 8005f18:	d5dc      	bpl.n	8005ed4 <_dtoa_r+0xa74>
 8005f1a:	2b39      	cmp	r3, #57	; 0x39
 8005f1c:	d1d8      	bne.n	8005ed0 <_dtoa_r+0xa70>
 8005f1e:	2339      	movs	r3, #57	; 0x39
 8005f20:	9a04      	ldr	r2, [sp, #16]
 8005f22:	7013      	strb	r3, [r2, #0]
 8005f24:	463b      	mov	r3, r7
 8005f26:	461f      	mov	r7, r3
 8005f28:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	2a39      	cmp	r2, #57	; 0x39
 8005f30:	d050      	beq.n	8005fd4 <_dtoa_r+0xb74>
 8005f32:	3201      	adds	r2, #1
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	e747      	b.n	8005dc8 <_dtoa_r+0x968>
 8005f38:	2a00      	cmp	r2, #0
 8005f3a:	dd03      	ble.n	8005f44 <_dtoa_r+0xae4>
 8005f3c:	2b39      	cmp	r3, #57	; 0x39
 8005f3e:	d0ee      	beq.n	8005f1e <_dtoa_r+0xabe>
 8005f40:	3301      	adds	r3, #1
 8005f42:	e7c7      	b.n	8005ed4 <_dtoa_r+0xa74>
 8005f44:	9a08      	ldr	r2, [sp, #32]
 8005f46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f48:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f4c:	428a      	cmp	r2, r1
 8005f4e:	d02a      	beq.n	8005fa6 <_dtoa_r+0xb46>
 8005f50:	4659      	mov	r1, fp
 8005f52:	2300      	movs	r3, #0
 8005f54:	220a      	movs	r2, #10
 8005f56:	4628      	mov	r0, r5
 8005f58:	f000 f9f4 	bl	8006344 <__multadd>
 8005f5c:	45b0      	cmp	r8, r6
 8005f5e:	4683      	mov	fp, r0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	f04f 020a 	mov.w	r2, #10
 8005f68:	4641      	mov	r1, r8
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	d107      	bne.n	8005f7e <_dtoa_r+0xb1e>
 8005f6e:	f000 f9e9 	bl	8006344 <__multadd>
 8005f72:	4680      	mov	r8, r0
 8005f74:	4606      	mov	r6, r0
 8005f76:	9b08      	ldr	r3, [sp, #32]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	9308      	str	r3, [sp, #32]
 8005f7c:	e775      	b.n	8005e6a <_dtoa_r+0xa0a>
 8005f7e:	f000 f9e1 	bl	8006344 <__multadd>
 8005f82:	4631      	mov	r1, r6
 8005f84:	4680      	mov	r8, r0
 8005f86:	2300      	movs	r3, #0
 8005f88:	220a      	movs	r2, #10
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f000 f9da 	bl	8006344 <__multadd>
 8005f90:	4606      	mov	r6, r0
 8005f92:	e7f0      	b.n	8005f76 <_dtoa_r+0xb16>
 8005f94:	f1b9 0f00 	cmp.w	r9, #0
 8005f98:	bfcc      	ite	gt
 8005f9a:	464f      	movgt	r7, r9
 8005f9c:	2701      	movle	r7, #1
 8005f9e:	f04f 0800 	mov.w	r8, #0
 8005fa2:	9a03      	ldr	r2, [sp, #12]
 8005fa4:	4417      	add	r7, r2
 8005fa6:	4659      	mov	r1, fp
 8005fa8:	2201      	movs	r2, #1
 8005faa:	4628      	mov	r0, r5
 8005fac:	9308      	str	r3, [sp, #32]
 8005fae:	f000 fb75 	bl	800669c <__lshift>
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	4683      	mov	fp, r0
 8005fb6:	f000 fbe1 	bl	800677c <__mcmp>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	dcb2      	bgt.n	8005f24 <_dtoa_r+0xac4>
 8005fbe:	d102      	bne.n	8005fc6 <_dtoa_r+0xb66>
 8005fc0:	9b08      	ldr	r3, [sp, #32]
 8005fc2:	07db      	lsls	r3, r3, #31
 8005fc4:	d4ae      	bmi.n	8005f24 <_dtoa_r+0xac4>
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	461f      	mov	r7, r3
 8005fca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fce:	2a30      	cmp	r2, #48	; 0x30
 8005fd0:	d0fa      	beq.n	8005fc8 <_dtoa_r+0xb68>
 8005fd2:	e6f9      	b.n	8005dc8 <_dtoa_r+0x968>
 8005fd4:	9a03      	ldr	r2, [sp, #12]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d1a5      	bne.n	8005f26 <_dtoa_r+0xac6>
 8005fda:	2331      	movs	r3, #49	; 0x31
 8005fdc:	f10a 0a01 	add.w	sl, sl, #1
 8005fe0:	e779      	b.n	8005ed6 <_dtoa_r+0xa76>
 8005fe2:	4b14      	ldr	r3, [pc, #80]	; (8006034 <_dtoa_r+0xbd4>)
 8005fe4:	f7ff baa8 	b.w	8005538 <_dtoa_r+0xd8>
 8005fe8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f47f aa81 	bne.w	80054f2 <_dtoa_r+0x92>
 8005ff0:	4b11      	ldr	r3, [pc, #68]	; (8006038 <_dtoa_r+0xbd8>)
 8005ff2:	f7ff baa1 	b.w	8005538 <_dtoa_r+0xd8>
 8005ff6:	f1b9 0f00 	cmp.w	r9, #0
 8005ffa:	dc03      	bgt.n	8006004 <_dtoa_r+0xba4>
 8005ffc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	f73f aecb 	bgt.w	8005d9a <_dtoa_r+0x93a>
 8006004:	9f03      	ldr	r7, [sp, #12]
 8006006:	4621      	mov	r1, r4
 8006008:	4658      	mov	r0, fp
 800600a:	f7ff f99b 	bl	8005344 <quorem>
 800600e:	9a03      	ldr	r2, [sp, #12]
 8006010:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006014:	f807 3b01 	strb.w	r3, [r7], #1
 8006018:	1aba      	subs	r2, r7, r2
 800601a:	4591      	cmp	r9, r2
 800601c:	ddba      	ble.n	8005f94 <_dtoa_r+0xb34>
 800601e:	4659      	mov	r1, fp
 8006020:	2300      	movs	r3, #0
 8006022:	220a      	movs	r2, #10
 8006024:	4628      	mov	r0, r5
 8006026:	f000 f98d 	bl	8006344 <__multadd>
 800602a:	4683      	mov	fp, r0
 800602c:	e7eb      	b.n	8006006 <_dtoa_r+0xba6>
 800602e:	bf00      	nop
 8006030:	080079b3 	.word	0x080079b3
 8006034:	08007910 	.word	0x08007910
 8006038:	08007934 	.word	0x08007934

0800603c <std>:
 800603c:	2300      	movs	r3, #0
 800603e:	b510      	push	{r4, lr}
 8006040:	4604      	mov	r4, r0
 8006042:	e9c0 3300 	strd	r3, r3, [r0]
 8006046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800604a:	6083      	str	r3, [r0, #8]
 800604c:	8181      	strh	r1, [r0, #12]
 800604e:	6643      	str	r3, [r0, #100]	; 0x64
 8006050:	81c2      	strh	r2, [r0, #14]
 8006052:	6183      	str	r3, [r0, #24]
 8006054:	4619      	mov	r1, r3
 8006056:	2208      	movs	r2, #8
 8006058:	305c      	adds	r0, #92	; 0x5c
 800605a:	f7fe fcf3 	bl	8004a44 <memset>
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <std+0x38>)
 8006060:	6224      	str	r4, [r4, #32]
 8006062:	6263      	str	r3, [r4, #36]	; 0x24
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <std+0x3c>)
 8006066:	62a3      	str	r3, [r4, #40]	; 0x28
 8006068:	4b04      	ldr	r3, [pc, #16]	; (800607c <std+0x40>)
 800606a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800606c:	4b04      	ldr	r3, [pc, #16]	; (8006080 <std+0x44>)
 800606e:	6323      	str	r3, [r4, #48]	; 0x30
 8006070:	bd10      	pop	{r4, pc}
 8006072:	bf00      	nop
 8006074:	08006e35 	.word	0x08006e35
 8006078:	08006e57 	.word	0x08006e57
 800607c:	08006e8f 	.word	0x08006e8f
 8006080:	08006eb3 	.word	0x08006eb3

08006084 <_cleanup_r>:
 8006084:	4901      	ldr	r1, [pc, #4]	; (800608c <_cleanup_r+0x8>)
 8006086:	f000 b8af 	b.w	80061e8 <_fwalk_reent>
 800608a:	bf00      	nop
 800608c:	080071c1 	.word	0x080071c1

08006090 <__sfmoreglue>:
 8006090:	2268      	movs	r2, #104	; 0x68
 8006092:	b570      	push	{r4, r5, r6, lr}
 8006094:	1e4d      	subs	r5, r1, #1
 8006096:	4355      	muls	r5, r2
 8006098:	460e      	mov	r6, r1
 800609a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800609e:	f000 fced 	bl	8006a7c <_malloc_r>
 80060a2:	4604      	mov	r4, r0
 80060a4:	b140      	cbz	r0, 80060b8 <__sfmoreglue+0x28>
 80060a6:	2100      	movs	r1, #0
 80060a8:	e9c0 1600 	strd	r1, r6, [r0]
 80060ac:	300c      	adds	r0, #12
 80060ae:	60a0      	str	r0, [r4, #8]
 80060b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060b4:	f7fe fcc6 	bl	8004a44 <memset>
 80060b8:	4620      	mov	r0, r4
 80060ba:	bd70      	pop	{r4, r5, r6, pc}

080060bc <__sfp_lock_acquire>:
 80060bc:	4801      	ldr	r0, [pc, #4]	; (80060c4 <__sfp_lock_acquire+0x8>)
 80060be:	f000 b8b8 	b.w	8006232 <__retarget_lock_acquire_recursive>
 80060c2:	bf00      	nop
 80060c4:	2000047d 	.word	0x2000047d

080060c8 <__sfp_lock_release>:
 80060c8:	4801      	ldr	r0, [pc, #4]	; (80060d0 <__sfp_lock_release+0x8>)
 80060ca:	f000 b8b3 	b.w	8006234 <__retarget_lock_release_recursive>
 80060ce:	bf00      	nop
 80060d0:	2000047d 	.word	0x2000047d

080060d4 <__sinit_lock_acquire>:
 80060d4:	4801      	ldr	r0, [pc, #4]	; (80060dc <__sinit_lock_acquire+0x8>)
 80060d6:	f000 b8ac 	b.w	8006232 <__retarget_lock_acquire_recursive>
 80060da:	bf00      	nop
 80060dc:	2000047e 	.word	0x2000047e

080060e0 <__sinit_lock_release>:
 80060e0:	4801      	ldr	r0, [pc, #4]	; (80060e8 <__sinit_lock_release+0x8>)
 80060e2:	f000 b8a7 	b.w	8006234 <__retarget_lock_release_recursive>
 80060e6:	bf00      	nop
 80060e8:	2000047e 	.word	0x2000047e

080060ec <__sinit>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	4604      	mov	r4, r0
 80060f0:	f7ff fff0 	bl	80060d4 <__sinit_lock_acquire>
 80060f4:	69a3      	ldr	r3, [r4, #24]
 80060f6:	b11b      	cbz	r3, 8006100 <__sinit+0x14>
 80060f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060fc:	f7ff bff0 	b.w	80060e0 <__sinit_lock_release>
 8006100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006104:	6523      	str	r3, [r4, #80]	; 0x50
 8006106:	4b13      	ldr	r3, [pc, #76]	; (8006154 <__sinit+0x68>)
 8006108:	4a13      	ldr	r2, [pc, #76]	; (8006158 <__sinit+0x6c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	62a2      	str	r2, [r4, #40]	; 0x28
 800610e:	42a3      	cmp	r3, r4
 8006110:	bf08      	it	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	4620      	mov	r0, r4
 8006116:	bf08      	it	eq
 8006118:	61a3      	streq	r3, [r4, #24]
 800611a:	f000 f81f 	bl	800615c <__sfp>
 800611e:	6060      	str	r0, [r4, #4]
 8006120:	4620      	mov	r0, r4
 8006122:	f000 f81b 	bl	800615c <__sfp>
 8006126:	60a0      	str	r0, [r4, #8]
 8006128:	4620      	mov	r0, r4
 800612a:	f000 f817 	bl	800615c <__sfp>
 800612e:	2200      	movs	r2, #0
 8006130:	2104      	movs	r1, #4
 8006132:	60e0      	str	r0, [r4, #12]
 8006134:	6860      	ldr	r0, [r4, #4]
 8006136:	f7ff ff81 	bl	800603c <std>
 800613a:	2201      	movs	r2, #1
 800613c:	2109      	movs	r1, #9
 800613e:	68a0      	ldr	r0, [r4, #8]
 8006140:	f7ff ff7c 	bl	800603c <std>
 8006144:	2202      	movs	r2, #2
 8006146:	2112      	movs	r1, #18
 8006148:	68e0      	ldr	r0, [r4, #12]
 800614a:	f7ff ff77 	bl	800603c <std>
 800614e:	2301      	movs	r3, #1
 8006150:	61a3      	str	r3, [r4, #24]
 8006152:	e7d1      	b.n	80060f8 <__sinit+0xc>
 8006154:	080078fc 	.word	0x080078fc
 8006158:	08006085 	.word	0x08006085

0800615c <__sfp>:
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	4607      	mov	r7, r0
 8006160:	f7ff ffac 	bl	80060bc <__sfp_lock_acquire>
 8006164:	4b1e      	ldr	r3, [pc, #120]	; (80061e0 <__sfp+0x84>)
 8006166:	681e      	ldr	r6, [r3, #0]
 8006168:	69b3      	ldr	r3, [r6, #24]
 800616a:	b913      	cbnz	r3, 8006172 <__sfp+0x16>
 800616c:	4630      	mov	r0, r6
 800616e:	f7ff ffbd 	bl	80060ec <__sinit>
 8006172:	3648      	adds	r6, #72	; 0x48
 8006174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006178:	3b01      	subs	r3, #1
 800617a:	d503      	bpl.n	8006184 <__sfp+0x28>
 800617c:	6833      	ldr	r3, [r6, #0]
 800617e:	b30b      	cbz	r3, 80061c4 <__sfp+0x68>
 8006180:	6836      	ldr	r6, [r6, #0]
 8006182:	e7f7      	b.n	8006174 <__sfp+0x18>
 8006184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006188:	b9d5      	cbnz	r5, 80061c0 <__sfp+0x64>
 800618a:	4b16      	ldr	r3, [pc, #88]	; (80061e4 <__sfp+0x88>)
 800618c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006190:	60e3      	str	r3, [r4, #12]
 8006192:	6665      	str	r5, [r4, #100]	; 0x64
 8006194:	f000 f84c 	bl	8006230 <__retarget_lock_init_recursive>
 8006198:	f7ff ff96 	bl	80060c8 <__sfp_lock_release>
 800619c:	2208      	movs	r2, #8
 800619e:	4629      	mov	r1, r5
 80061a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80061a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80061a8:	6025      	str	r5, [r4, #0]
 80061aa:	61a5      	str	r5, [r4, #24]
 80061ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061b0:	f7fe fc48 	bl	8004a44 <memset>
 80061b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061bc:	4620      	mov	r0, r4
 80061be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c0:	3468      	adds	r4, #104	; 0x68
 80061c2:	e7d9      	b.n	8006178 <__sfp+0x1c>
 80061c4:	2104      	movs	r1, #4
 80061c6:	4638      	mov	r0, r7
 80061c8:	f7ff ff62 	bl	8006090 <__sfmoreglue>
 80061cc:	4604      	mov	r4, r0
 80061ce:	6030      	str	r0, [r6, #0]
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d1d5      	bne.n	8006180 <__sfp+0x24>
 80061d4:	f7ff ff78 	bl	80060c8 <__sfp_lock_release>
 80061d8:	230c      	movs	r3, #12
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	e7ee      	b.n	80061bc <__sfp+0x60>
 80061de:	bf00      	nop
 80061e0:	080078fc 	.word	0x080078fc
 80061e4:	ffff0001 	.word	0xffff0001

080061e8 <_fwalk_reent>:
 80061e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ec:	4606      	mov	r6, r0
 80061ee:	4688      	mov	r8, r1
 80061f0:	2700      	movs	r7, #0
 80061f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061fa:	f1b9 0901 	subs.w	r9, r9, #1
 80061fe:	d505      	bpl.n	800620c <_fwalk_reent+0x24>
 8006200:	6824      	ldr	r4, [r4, #0]
 8006202:	2c00      	cmp	r4, #0
 8006204:	d1f7      	bne.n	80061f6 <_fwalk_reent+0xe>
 8006206:	4638      	mov	r0, r7
 8006208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800620c:	89ab      	ldrh	r3, [r5, #12]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d907      	bls.n	8006222 <_fwalk_reent+0x3a>
 8006212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006216:	3301      	adds	r3, #1
 8006218:	d003      	beq.n	8006222 <_fwalk_reent+0x3a>
 800621a:	4629      	mov	r1, r5
 800621c:	4630      	mov	r0, r6
 800621e:	47c0      	blx	r8
 8006220:	4307      	orrs	r7, r0
 8006222:	3568      	adds	r5, #104	; 0x68
 8006224:	e7e9      	b.n	80061fa <_fwalk_reent+0x12>
	...

08006228 <_localeconv_r>:
 8006228:	4800      	ldr	r0, [pc, #0]	; (800622c <_localeconv_r+0x4>)
 800622a:	4770      	bx	lr
 800622c:	20000164 	.word	0x20000164

08006230 <__retarget_lock_init_recursive>:
 8006230:	4770      	bx	lr

08006232 <__retarget_lock_acquire_recursive>:
 8006232:	4770      	bx	lr

08006234 <__retarget_lock_release_recursive>:
 8006234:	4770      	bx	lr
	...

08006238 <malloc>:
 8006238:	4b02      	ldr	r3, [pc, #8]	; (8006244 <malloc+0xc>)
 800623a:	4601      	mov	r1, r0
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	f000 bc1d 	b.w	8006a7c <_malloc_r>
 8006242:	bf00      	nop
 8006244:	20000010 	.word	0x20000010

08006248 <memchr>:
 8006248:	4603      	mov	r3, r0
 800624a:	b510      	push	{r4, lr}
 800624c:	b2c9      	uxtb	r1, r1
 800624e:	4402      	add	r2, r0
 8006250:	4293      	cmp	r3, r2
 8006252:	4618      	mov	r0, r3
 8006254:	d101      	bne.n	800625a <memchr+0x12>
 8006256:	2000      	movs	r0, #0
 8006258:	e003      	b.n	8006262 <memchr+0x1a>
 800625a:	7804      	ldrb	r4, [r0, #0]
 800625c:	3301      	adds	r3, #1
 800625e:	428c      	cmp	r4, r1
 8006260:	d1f6      	bne.n	8006250 <memchr+0x8>
 8006262:	bd10      	pop	{r4, pc}

08006264 <memcpy>:
 8006264:	440a      	add	r2, r1
 8006266:	4291      	cmp	r1, r2
 8006268:	f100 33ff 	add.w	r3, r0, #4294967295
 800626c:	d100      	bne.n	8006270 <memcpy+0xc>
 800626e:	4770      	bx	lr
 8006270:	b510      	push	{r4, lr}
 8006272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006276:	4291      	cmp	r1, r2
 8006278:	f803 4f01 	strb.w	r4, [r3, #1]!
 800627c:	d1f9      	bne.n	8006272 <memcpy+0xe>
 800627e:	bd10      	pop	{r4, pc}

08006280 <_Balloc>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006284:	4604      	mov	r4, r0
 8006286:	460d      	mov	r5, r1
 8006288:	b976      	cbnz	r6, 80062a8 <_Balloc+0x28>
 800628a:	2010      	movs	r0, #16
 800628c:	f7ff ffd4 	bl	8006238 <malloc>
 8006290:	4602      	mov	r2, r0
 8006292:	6260      	str	r0, [r4, #36]	; 0x24
 8006294:	b920      	cbnz	r0, 80062a0 <_Balloc+0x20>
 8006296:	2166      	movs	r1, #102	; 0x66
 8006298:	4b17      	ldr	r3, [pc, #92]	; (80062f8 <_Balloc+0x78>)
 800629a:	4818      	ldr	r0, [pc, #96]	; (80062fc <_Balloc+0x7c>)
 800629c:	f000 fee0 	bl	8007060 <__assert_func>
 80062a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062a4:	6006      	str	r6, [r0, #0]
 80062a6:	60c6      	str	r6, [r0, #12]
 80062a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062aa:	68f3      	ldr	r3, [r6, #12]
 80062ac:	b183      	cbz	r3, 80062d0 <_Balloc+0x50>
 80062ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062b6:	b9b8      	cbnz	r0, 80062e8 <_Balloc+0x68>
 80062b8:	2101      	movs	r1, #1
 80062ba:	fa01 f605 	lsl.w	r6, r1, r5
 80062be:	1d72      	adds	r2, r6, #5
 80062c0:	4620      	mov	r0, r4
 80062c2:	0092      	lsls	r2, r2, #2
 80062c4:	f000 fb5e 	bl	8006984 <_calloc_r>
 80062c8:	b160      	cbz	r0, 80062e4 <_Balloc+0x64>
 80062ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062ce:	e00e      	b.n	80062ee <_Balloc+0x6e>
 80062d0:	2221      	movs	r2, #33	; 0x21
 80062d2:	2104      	movs	r1, #4
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 fb55 	bl	8006984 <_calloc_r>
 80062da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062dc:	60f0      	str	r0, [r6, #12]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e4      	bne.n	80062ae <_Balloc+0x2e>
 80062e4:	2000      	movs	r0, #0
 80062e6:	bd70      	pop	{r4, r5, r6, pc}
 80062e8:	6802      	ldr	r2, [r0, #0]
 80062ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062ee:	2300      	movs	r3, #0
 80062f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062f4:	e7f7      	b.n	80062e6 <_Balloc+0x66>
 80062f6:	bf00      	nop
 80062f8:	08007941 	.word	0x08007941
 80062fc:	08007a24 	.word	0x08007a24

08006300 <_Bfree>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006304:	4605      	mov	r5, r0
 8006306:	460c      	mov	r4, r1
 8006308:	b976      	cbnz	r6, 8006328 <_Bfree+0x28>
 800630a:	2010      	movs	r0, #16
 800630c:	f7ff ff94 	bl	8006238 <malloc>
 8006310:	4602      	mov	r2, r0
 8006312:	6268      	str	r0, [r5, #36]	; 0x24
 8006314:	b920      	cbnz	r0, 8006320 <_Bfree+0x20>
 8006316:	218a      	movs	r1, #138	; 0x8a
 8006318:	4b08      	ldr	r3, [pc, #32]	; (800633c <_Bfree+0x3c>)
 800631a:	4809      	ldr	r0, [pc, #36]	; (8006340 <_Bfree+0x40>)
 800631c:	f000 fea0 	bl	8007060 <__assert_func>
 8006320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006324:	6006      	str	r6, [r0, #0]
 8006326:	60c6      	str	r6, [r0, #12]
 8006328:	b13c      	cbz	r4, 800633a <_Bfree+0x3a>
 800632a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800632c:	6862      	ldr	r2, [r4, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006334:	6021      	str	r1, [r4, #0]
 8006336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	08007941 	.word	0x08007941
 8006340:	08007a24 	.word	0x08007a24

08006344 <__multadd>:
 8006344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006348:	4607      	mov	r7, r0
 800634a:	460c      	mov	r4, r1
 800634c:	461e      	mov	r6, r3
 800634e:	2000      	movs	r0, #0
 8006350:	690d      	ldr	r5, [r1, #16]
 8006352:	f101 0c14 	add.w	ip, r1, #20
 8006356:	f8dc 3000 	ldr.w	r3, [ip]
 800635a:	3001      	adds	r0, #1
 800635c:	b299      	uxth	r1, r3
 800635e:	fb02 6101 	mla	r1, r2, r1, r6
 8006362:	0c1e      	lsrs	r6, r3, #16
 8006364:	0c0b      	lsrs	r3, r1, #16
 8006366:	fb02 3306 	mla	r3, r2, r6, r3
 800636a:	b289      	uxth	r1, r1
 800636c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006370:	4285      	cmp	r5, r0
 8006372:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006376:	f84c 1b04 	str.w	r1, [ip], #4
 800637a:	dcec      	bgt.n	8006356 <__multadd+0x12>
 800637c:	b30e      	cbz	r6, 80063c2 <__multadd+0x7e>
 800637e:	68a3      	ldr	r3, [r4, #8]
 8006380:	42ab      	cmp	r3, r5
 8006382:	dc19      	bgt.n	80063b8 <__multadd+0x74>
 8006384:	6861      	ldr	r1, [r4, #4]
 8006386:	4638      	mov	r0, r7
 8006388:	3101      	adds	r1, #1
 800638a:	f7ff ff79 	bl	8006280 <_Balloc>
 800638e:	4680      	mov	r8, r0
 8006390:	b928      	cbnz	r0, 800639e <__multadd+0x5a>
 8006392:	4602      	mov	r2, r0
 8006394:	21b5      	movs	r1, #181	; 0xb5
 8006396:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <__multadd+0x84>)
 8006398:	480c      	ldr	r0, [pc, #48]	; (80063cc <__multadd+0x88>)
 800639a:	f000 fe61 	bl	8007060 <__assert_func>
 800639e:	6922      	ldr	r2, [r4, #16]
 80063a0:	f104 010c 	add.w	r1, r4, #12
 80063a4:	3202      	adds	r2, #2
 80063a6:	0092      	lsls	r2, r2, #2
 80063a8:	300c      	adds	r0, #12
 80063aa:	f7ff ff5b 	bl	8006264 <memcpy>
 80063ae:	4621      	mov	r1, r4
 80063b0:	4638      	mov	r0, r7
 80063b2:	f7ff ffa5 	bl	8006300 <_Bfree>
 80063b6:	4644      	mov	r4, r8
 80063b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063bc:	3501      	adds	r5, #1
 80063be:	615e      	str	r6, [r3, #20]
 80063c0:	6125      	str	r5, [r4, #16]
 80063c2:	4620      	mov	r0, r4
 80063c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c8:	080079b3 	.word	0x080079b3
 80063cc:	08007a24 	.word	0x08007a24

080063d0 <__hi0bits>:
 80063d0:	0c02      	lsrs	r2, r0, #16
 80063d2:	0412      	lsls	r2, r2, #16
 80063d4:	4603      	mov	r3, r0
 80063d6:	b9ca      	cbnz	r2, 800640c <__hi0bits+0x3c>
 80063d8:	0403      	lsls	r3, r0, #16
 80063da:	2010      	movs	r0, #16
 80063dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80063e0:	bf04      	itt	eq
 80063e2:	021b      	lsleq	r3, r3, #8
 80063e4:	3008      	addeq	r0, #8
 80063e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80063ea:	bf04      	itt	eq
 80063ec:	011b      	lsleq	r3, r3, #4
 80063ee:	3004      	addeq	r0, #4
 80063f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80063f4:	bf04      	itt	eq
 80063f6:	009b      	lsleq	r3, r3, #2
 80063f8:	3002      	addeq	r0, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	db05      	blt.n	800640a <__hi0bits+0x3a>
 80063fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006402:	f100 0001 	add.w	r0, r0, #1
 8006406:	bf08      	it	eq
 8006408:	2020      	moveq	r0, #32
 800640a:	4770      	bx	lr
 800640c:	2000      	movs	r0, #0
 800640e:	e7e5      	b.n	80063dc <__hi0bits+0xc>

08006410 <__lo0bits>:
 8006410:	6803      	ldr	r3, [r0, #0]
 8006412:	4602      	mov	r2, r0
 8006414:	f013 0007 	ands.w	r0, r3, #7
 8006418:	d00b      	beq.n	8006432 <__lo0bits+0x22>
 800641a:	07d9      	lsls	r1, r3, #31
 800641c:	d421      	bmi.n	8006462 <__lo0bits+0x52>
 800641e:	0798      	lsls	r0, r3, #30
 8006420:	bf49      	itett	mi
 8006422:	085b      	lsrmi	r3, r3, #1
 8006424:	089b      	lsrpl	r3, r3, #2
 8006426:	2001      	movmi	r0, #1
 8006428:	6013      	strmi	r3, [r2, #0]
 800642a:	bf5c      	itt	pl
 800642c:	2002      	movpl	r0, #2
 800642e:	6013      	strpl	r3, [r2, #0]
 8006430:	4770      	bx	lr
 8006432:	b299      	uxth	r1, r3
 8006434:	b909      	cbnz	r1, 800643a <__lo0bits+0x2a>
 8006436:	2010      	movs	r0, #16
 8006438:	0c1b      	lsrs	r3, r3, #16
 800643a:	b2d9      	uxtb	r1, r3
 800643c:	b909      	cbnz	r1, 8006442 <__lo0bits+0x32>
 800643e:	3008      	adds	r0, #8
 8006440:	0a1b      	lsrs	r3, r3, #8
 8006442:	0719      	lsls	r1, r3, #28
 8006444:	bf04      	itt	eq
 8006446:	091b      	lsreq	r3, r3, #4
 8006448:	3004      	addeq	r0, #4
 800644a:	0799      	lsls	r1, r3, #30
 800644c:	bf04      	itt	eq
 800644e:	089b      	lsreq	r3, r3, #2
 8006450:	3002      	addeq	r0, #2
 8006452:	07d9      	lsls	r1, r3, #31
 8006454:	d403      	bmi.n	800645e <__lo0bits+0x4e>
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	f100 0001 	add.w	r0, r0, #1
 800645c:	d003      	beq.n	8006466 <__lo0bits+0x56>
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	4770      	bx	lr
 8006462:	2000      	movs	r0, #0
 8006464:	4770      	bx	lr
 8006466:	2020      	movs	r0, #32
 8006468:	4770      	bx	lr
	...

0800646c <__i2b>:
 800646c:	b510      	push	{r4, lr}
 800646e:	460c      	mov	r4, r1
 8006470:	2101      	movs	r1, #1
 8006472:	f7ff ff05 	bl	8006280 <_Balloc>
 8006476:	4602      	mov	r2, r0
 8006478:	b928      	cbnz	r0, 8006486 <__i2b+0x1a>
 800647a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800647e:	4b04      	ldr	r3, [pc, #16]	; (8006490 <__i2b+0x24>)
 8006480:	4804      	ldr	r0, [pc, #16]	; (8006494 <__i2b+0x28>)
 8006482:	f000 fded 	bl	8007060 <__assert_func>
 8006486:	2301      	movs	r3, #1
 8006488:	6144      	str	r4, [r0, #20]
 800648a:	6103      	str	r3, [r0, #16]
 800648c:	bd10      	pop	{r4, pc}
 800648e:	bf00      	nop
 8006490:	080079b3 	.word	0x080079b3
 8006494:	08007a24 	.word	0x08007a24

08006498 <__multiply>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	4691      	mov	r9, r2
 800649e:	690a      	ldr	r2, [r1, #16]
 80064a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064a4:	460c      	mov	r4, r1
 80064a6:	429a      	cmp	r2, r3
 80064a8:	bfbe      	ittt	lt
 80064aa:	460b      	movlt	r3, r1
 80064ac:	464c      	movlt	r4, r9
 80064ae:	4699      	movlt	r9, r3
 80064b0:	6927      	ldr	r7, [r4, #16]
 80064b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80064b6:	68a3      	ldr	r3, [r4, #8]
 80064b8:	6861      	ldr	r1, [r4, #4]
 80064ba:	eb07 060a 	add.w	r6, r7, sl
 80064be:	42b3      	cmp	r3, r6
 80064c0:	b085      	sub	sp, #20
 80064c2:	bfb8      	it	lt
 80064c4:	3101      	addlt	r1, #1
 80064c6:	f7ff fedb 	bl	8006280 <_Balloc>
 80064ca:	b930      	cbnz	r0, 80064da <__multiply+0x42>
 80064cc:	4602      	mov	r2, r0
 80064ce:	f240 115d 	movw	r1, #349	; 0x15d
 80064d2:	4b43      	ldr	r3, [pc, #268]	; (80065e0 <__multiply+0x148>)
 80064d4:	4843      	ldr	r0, [pc, #268]	; (80065e4 <__multiply+0x14c>)
 80064d6:	f000 fdc3 	bl	8007060 <__assert_func>
 80064da:	f100 0514 	add.w	r5, r0, #20
 80064de:	462b      	mov	r3, r5
 80064e0:	2200      	movs	r2, #0
 80064e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064e6:	4543      	cmp	r3, r8
 80064e8:	d321      	bcc.n	800652e <__multiply+0x96>
 80064ea:	f104 0314 	add.w	r3, r4, #20
 80064ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80064f2:	f109 0314 	add.w	r3, r9, #20
 80064f6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80064fa:	9202      	str	r2, [sp, #8]
 80064fc:	1b3a      	subs	r2, r7, r4
 80064fe:	3a15      	subs	r2, #21
 8006500:	f022 0203 	bic.w	r2, r2, #3
 8006504:	3204      	adds	r2, #4
 8006506:	f104 0115 	add.w	r1, r4, #21
 800650a:	428f      	cmp	r7, r1
 800650c:	bf38      	it	cc
 800650e:	2204      	movcc	r2, #4
 8006510:	9201      	str	r2, [sp, #4]
 8006512:	9a02      	ldr	r2, [sp, #8]
 8006514:	9303      	str	r3, [sp, #12]
 8006516:	429a      	cmp	r2, r3
 8006518:	d80c      	bhi.n	8006534 <__multiply+0x9c>
 800651a:	2e00      	cmp	r6, #0
 800651c:	dd03      	ble.n	8006526 <__multiply+0x8e>
 800651e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006522:	2b00      	cmp	r3, #0
 8006524:	d059      	beq.n	80065da <__multiply+0x142>
 8006526:	6106      	str	r6, [r0, #16]
 8006528:	b005      	add	sp, #20
 800652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652e:	f843 2b04 	str.w	r2, [r3], #4
 8006532:	e7d8      	b.n	80064e6 <__multiply+0x4e>
 8006534:	f8b3 a000 	ldrh.w	sl, [r3]
 8006538:	f1ba 0f00 	cmp.w	sl, #0
 800653c:	d023      	beq.n	8006586 <__multiply+0xee>
 800653e:	46a9      	mov	r9, r5
 8006540:	f04f 0c00 	mov.w	ip, #0
 8006544:	f104 0e14 	add.w	lr, r4, #20
 8006548:	f85e 2b04 	ldr.w	r2, [lr], #4
 800654c:	f8d9 1000 	ldr.w	r1, [r9]
 8006550:	fa1f fb82 	uxth.w	fp, r2
 8006554:	b289      	uxth	r1, r1
 8006556:	fb0a 110b 	mla	r1, sl, fp, r1
 800655a:	4461      	add	r1, ip
 800655c:	f8d9 c000 	ldr.w	ip, [r9]
 8006560:	0c12      	lsrs	r2, r2, #16
 8006562:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006566:	fb0a c202 	mla	r2, sl, r2, ip
 800656a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800656e:	b289      	uxth	r1, r1
 8006570:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006574:	4577      	cmp	r7, lr
 8006576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800657a:	f849 1b04 	str.w	r1, [r9], #4
 800657e:	d8e3      	bhi.n	8006548 <__multiply+0xb0>
 8006580:	9a01      	ldr	r2, [sp, #4]
 8006582:	f845 c002 	str.w	ip, [r5, r2]
 8006586:	9a03      	ldr	r2, [sp, #12]
 8006588:	3304      	adds	r3, #4
 800658a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800658e:	f1b9 0f00 	cmp.w	r9, #0
 8006592:	d020      	beq.n	80065d6 <__multiply+0x13e>
 8006594:	46ae      	mov	lr, r5
 8006596:	f04f 0a00 	mov.w	sl, #0
 800659a:	6829      	ldr	r1, [r5, #0]
 800659c:	f104 0c14 	add.w	ip, r4, #20
 80065a0:	f8bc b000 	ldrh.w	fp, [ip]
 80065a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80065a8:	b289      	uxth	r1, r1
 80065aa:	fb09 220b 	mla	r2, r9, fp, r2
 80065ae:	4492      	add	sl, r2
 80065b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80065b4:	f84e 1b04 	str.w	r1, [lr], #4
 80065b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80065bc:	f8be 1000 	ldrh.w	r1, [lr]
 80065c0:	0c12      	lsrs	r2, r2, #16
 80065c2:	fb09 1102 	mla	r1, r9, r2, r1
 80065c6:	4567      	cmp	r7, ip
 80065c8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80065cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065d0:	d8e6      	bhi.n	80065a0 <__multiply+0x108>
 80065d2:	9a01      	ldr	r2, [sp, #4]
 80065d4:	50a9      	str	r1, [r5, r2]
 80065d6:	3504      	adds	r5, #4
 80065d8:	e79b      	b.n	8006512 <__multiply+0x7a>
 80065da:	3e01      	subs	r6, #1
 80065dc:	e79d      	b.n	800651a <__multiply+0x82>
 80065de:	bf00      	nop
 80065e0:	080079b3 	.word	0x080079b3
 80065e4:	08007a24 	.word	0x08007a24

080065e8 <__pow5mult>:
 80065e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065ec:	4615      	mov	r5, r2
 80065ee:	f012 0203 	ands.w	r2, r2, #3
 80065f2:	4606      	mov	r6, r0
 80065f4:	460f      	mov	r7, r1
 80065f6:	d007      	beq.n	8006608 <__pow5mult+0x20>
 80065f8:	4c25      	ldr	r4, [pc, #148]	; (8006690 <__pow5mult+0xa8>)
 80065fa:	3a01      	subs	r2, #1
 80065fc:	2300      	movs	r3, #0
 80065fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006602:	f7ff fe9f 	bl	8006344 <__multadd>
 8006606:	4607      	mov	r7, r0
 8006608:	10ad      	asrs	r5, r5, #2
 800660a:	d03d      	beq.n	8006688 <__pow5mult+0xa0>
 800660c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800660e:	b97c      	cbnz	r4, 8006630 <__pow5mult+0x48>
 8006610:	2010      	movs	r0, #16
 8006612:	f7ff fe11 	bl	8006238 <malloc>
 8006616:	4602      	mov	r2, r0
 8006618:	6270      	str	r0, [r6, #36]	; 0x24
 800661a:	b928      	cbnz	r0, 8006628 <__pow5mult+0x40>
 800661c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006620:	4b1c      	ldr	r3, [pc, #112]	; (8006694 <__pow5mult+0xac>)
 8006622:	481d      	ldr	r0, [pc, #116]	; (8006698 <__pow5mult+0xb0>)
 8006624:	f000 fd1c 	bl	8007060 <__assert_func>
 8006628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800662c:	6004      	str	r4, [r0, #0]
 800662e:	60c4      	str	r4, [r0, #12]
 8006630:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006638:	b94c      	cbnz	r4, 800664e <__pow5mult+0x66>
 800663a:	f240 2171 	movw	r1, #625	; 0x271
 800663e:	4630      	mov	r0, r6
 8006640:	f7ff ff14 	bl	800646c <__i2b>
 8006644:	2300      	movs	r3, #0
 8006646:	4604      	mov	r4, r0
 8006648:	f8c8 0008 	str.w	r0, [r8, #8]
 800664c:	6003      	str	r3, [r0, #0]
 800664e:	f04f 0900 	mov.w	r9, #0
 8006652:	07eb      	lsls	r3, r5, #31
 8006654:	d50a      	bpl.n	800666c <__pow5mult+0x84>
 8006656:	4639      	mov	r1, r7
 8006658:	4622      	mov	r2, r4
 800665a:	4630      	mov	r0, r6
 800665c:	f7ff ff1c 	bl	8006498 <__multiply>
 8006660:	4680      	mov	r8, r0
 8006662:	4639      	mov	r1, r7
 8006664:	4630      	mov	r0, r6
 8006666:	f7ff fe4b 	bl	8006300 <_Bfree>
 800666a:	4647      	mov	r7, r8
 800666c:	106d      	asrs	r5, r5, #1
 800666e:	d00b      	beq.n	8006688 <__pow5mult+0xa0>
 8006670:	6820      	ldr	r0, [r4, #0]
 8006672:	b938      	cbnz	r0, 8006684 <__pow5mult+0x9c>
 8006674:	4622      	mov	r2, r4
 8006676:	4621      	mov	r1, r4
 8006678:	4630      	mov	r0, r6
 800667a:	f7ff ff0d 	bl	8006498 <__multiply>
 800667e:	6020      	str	r0, [r4, #0]
 8006680:	f8c0 9000 	str.w	r9, [r0]
 8006684:	4604      	mov	r4, r0
 8006686:	e7e4      	b.n	8006652 <__pow5mult+0x6a>
 8006688:	4638      	mov	r0, r7
 800668a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800668e:	bf00      	nop
 8006690:	08007b70 	.word	0x08007b70
 8006694:	08007941 	.word	0x08007941
 8006698:	08007a24 	.word	0x08007a24

0800669c <__lshift>:
 800669c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a0:	460c      	mov	r4, r1
 80066a2:	4607      	mov	r7, r0
 80066a4:	4691      	mov	r9, r2
 80066a6:	6923      	ldr	r3, [r4, #16]
 80066a8:	6849      	ldr	r1, [r1, #4]
 80066aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066b4:	f108 0601 	add.w	r6, r8, #1
 80066b8:	42b3      	cmp	r3, r6
 80066ba:	db0b      	blt.n	80066d4 <__lshift+0x38>
 80066bc:	4638      	mov	r0, r7
 80066be:	f7ff fddf 	bl	8006280 <_Balloc>
 80066c2:	4605      	mov	r5, r0
 80066c4:	b948      	cbnz	r0, 80066da <__lshift+0x3e>
 80066c6:	4602      	mov	r2, r0
 80066c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80066cc:	4b29      	ldr	r3, [pc, #164]	; (8006774 <__lshift+0xd8>)
 80066ce:	482a      	ldr	r0, [pc, #168]	; (8006778 <__lshift+0xdc>)
 80066d0:	f000 fcc6 	bl	8007060 <__assert_func>
 80066d4:	3101      	adds	r1, #1
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	e7ee      	b.n	80066b8 <__lshift+0x1c>
 80066da:	2300      	movs	r3, #0
 80066dc:	f100 0114 	add.w	r1, r0, #20
 80066e0:	f100 0210 	add.w	r2, r0, #16
 80066e4:	4618      	mov	r0, r3
 80066e6:	4553      	cmp	r3, sl
 80066e8:	db37      	blt.n	800675a <__lshift+0xbe>
 80066ea:	6920      	ldr	r0, [r4, #16]
 80066ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066f0:	f104 0314 	add.w	r3, r4, #20
 80066f4:	f019 091f 	ands.w	r9, r9, #31
 80066f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006700:	d02f      	beq.n	8006762 <__lshift+0xc6>
 8006702:	468a      	mov	sl, r1
 8006704:	f04f 0c00 	mov.w	ip, #0
 8006708:	f1c9 0e20 	rsb	lr, r9, #32
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	fa02 f209 	lsl.w	r2, r2, r9
 8006712:	ea42 020c 	orr.w	r2, r2, ip
 8006716:	f84a 2b04 	str.w	r2, [sl], #4
 800671a:	f853 2b04 	ldr.w	r2, [r3], #4
 800671e:	4298      	cmp	r0, r3
 8006720:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006724:	d8f2      	bhi.n	800670c <__lshift+0x70>
 8006726:	1b03      	subs	r3, r0, r4
 8006728:	3b15      	subs	r3, #21
 800672a:	f023 0303 	bic.w	r3, r3, #3
 800672e:	3304      	adds	r3, #4
 8006730:	f104 0215 	add.w	r2, r4, #21
 8006734:	4290      	cmp	r0, r2
 8006736:	bf38      	it	cc
 8006738:	2304      	movcc	r3, #4
 800673a:	f841 c003 	str.w	ip, [r1, r3]
 800673e:	f1bc 0f00 	cmp.w	ip, #0
 8006742:	d001      	beq.n	8006748 <__lshift+0xac>
 8006744:	f108 0602 	add.w	r6, r8, #2
 8006748:	3e01      	subs	r6, #1
 800674a:	4638      	mov	r0, r7
 800674c:	4621      	mov	r1, r4
 800674e:	612e      	str	r6, [r5, #16]
 8006750:	f7ff fdd6 	bl	8006300 <_Bfree>
 8006754:	4628      	mov	r0, r5
 8006756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675a:	f842 0f04 	str.w	r0, [r2, #4]!
 800675e:	3301      	adds	r3, #1
 8006760:	e7c1      	b.n	80066e6 <__lshift+0x4a>
 8006762:	3904      	subs	r1, #4
 8006764:	f853 2b04 	ldr.w	r2, [r3], #4
 8006768:	4298      	cmp	r0, r3
 800676a:	f841 2f04 	str.w	r2, [r1, #4]!
 800676e:	d8f9      	bhi.n	8006764 <__lshift+0xc8>
 8006770:	e7ea      	b.n	8006748 <__lshift+0xac>
 8006772:	bf00      	nop
 8006774:	080079b3 	.word	0x080079b3
 8006778:	08007a24 	.word	0x08007a24

0800677c <__mcmp>:
 800677c:	4603      	mov	r3, r0
 800677e:	690a      	ldr	r2, [r1, #16]
 8006780:	6900      	ldr	r0, [r0, #16]
 8006782:	b530      	push	{r4, r5, lr}
 8006784:	1a80      	subs	r0, r0, r2
 8006786:	d10d      	bne.n	80067a4 <__mcmp+0x28>
 8006788:	3314      	adds	r3, #20
 800678a:	3114      	adds	r1, #20
 800678c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006790:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006794:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006798:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800679c:	4295      	cmp	r5, r2
 800679e:	d002      	beq.n	80067a6 <__mcmp+0x2a>
 80067a0:	d304      	bcc.n	80067ac <__mcmp+0x30>
 80067a2:	2001      	movs	r0, #1
 80067a4:	bd30      	pop	{r4, r5, pc}
 80067a6:	42a3      	cmp	r3, r4
 80067a8:	d3f4      	bcc.n	8006794 <__mcmp+0x18>
 80067aa:	e7fb      	b.n	80067a4 <__mcmp+0x28>
 80067ac:	f04f 30ff 	mov.w	r0, #4294967295
 80067b0:	e7f8      	b.n	80067a4 <__mcmp+0x28>
	...

080067b4 <__mdiff>:
 80067b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b8:	460d      	mov	r5, r1
 80067ba:	4607      	mov	r7, r0
 80067bc:	4611      	mov	r1, r2
 80067be:	4628      	mov	r0, r5
 80067c0:	4614      	mov	r4, r2
 80067c2:	f7ff ffdb 	bl	800677c <__mcmp>
 80067c6:	1e06      	subs	r6, r0, #0
 80067c8:	d111      	bne.n	80067ee <__mdiff+0x3a>
 80067ca:	4631      	mov	r1, r6
 80067cc:	4638      	mov	r0, r7
 80067ce:	f7ff fd57 	bl	8006280 <_Balloc>
 80067d2:	4602      	mov	r2, r0
 80067d4:	b928      	cbnz	r0, 80067e2 <__mdiff+0x2e>
 80067d6:	f240 2132 	movw	r1, #562	; 0x232
 80067da:	4b3a      	ldr	r3, [pc, #232]	; (80068c4 <__mdiff+0x110>)
 80067dc:	483a      	ldr	r0, [pc, #232]	; (80068c8 <__mdiff+0x114>)
 80067de:	f000 fc3f 	bl	8007060 <__assert_func>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80067e8:	4610      	mov	r0, r2
 80067ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ee:	bfa4      	itt	ge
 80067f0:	4623      	movge	r3, r4
 80067f2:	462c      	movge	r4, r5
 80067f4:	4638      	mov	r0, r7
 80067f6:	6861      	ldr	r1, [r4, #4]
 80067f8:	bfa6      	itte	ge
 80067fa:	461d      	movge	r5, r3
 80067fc:	2600      	movge	r6, #0
 80067fe:	2601      	movlt	r6, #1
 8006800:	f7ff fd3e 	bl	8006280 <_Balloc>
 8006804:	4602      	mov	r2, r0
 8006806:	b918      	cbnz	r0, 8006810 <__mdiff+0x5c>
 8006808:	f44f 7110 	mov.w	r1, #576	; 0x240
 800680c:	4b2d      	ldr	r3, [pc, #180]	; (80068c4 <__mdiff+0x110>)
 800680e:	e7e5      	b.n	80067dc <__mdiff+0x28>
 8006810:	f102 0814 	add.w	r8, r2, #20
 8006814:	46c2      	mov	sl, r8
 8006816:	f04f 0c00 	mov.w	ip, #0
 800681a:	6927      	ldr	r7, [r4, #16]
 800681c:	60c6      	str	r6, [r0, #12]
 800681e:	692e      	ldr	r6, [r5, #16]
 8006820:	f104 0014 	add.w	r0, r4, #20
 8006824:	f105 0914 	add.w	r9, r5, #20
 8006828:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800682c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006830:	3410      	adds	r4, #16
 8006832:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006836:	f859 3b04 	ldr.w	r3, [r9], #4
 800683a:	fa1f f18b 	uxth.w	r1, fp
 800683e:	448c      	add	ip, r1
 8006840:	b299      	uxth	r1, r3
 8006842:	0c1b      	lsrs	r3, r3, #16
 8006844:	ebac 0101 	sub.w	r1, ip, r1
 8006848:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800684c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006850:	b289      	uxth	r1, r1
 8006852:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006856:	454e      	cmp	r6, r9
 8006858:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800685c:	f84a 3b04 	str.w	r3, [sl], #4
 8006860:	d8e7      	bhi.n	8006832 <__mdiff+0x7e>
 8006862:	1b73      	subs	r3, r6, r5
 8006864:	3b15      	subs	r3, #21
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	3515      	adds	r5, #21
 800686c:	3304      	adds	r3, #4
 800686e:	42ae      	cmp	r6, r5
 8006870:	bf38      	it	cc
 8006872:	2304      	movcc	r3, #4
 8006874:	4418      	add	r0, r3
 8006876:	4443      	add	r3, r8
 8006878:	461e      	mov	r6, r3
 800687a:	4605      	mov	r5, r0
 800687c:	4575      	cmp	r5, lr
 800687e:	d30e      	bcc.n	800689e <__mdiff+0xea>
 8006880:	f10e 0103 	add.w	r1, lr, #3
 8006884:	1a09      	subs	r1, r1, r0
 8006886:	f021 0103 	bic.w	r1, r1, #3
 800688a:	3803      	subs	r0, #3
 800688c:	4586      	cmp	lr, r0
 800688e:	bf38      	it	cc
 8006890:	2100      	movcc	r1, #0
 8006892:	4419      	add	r1, r3
 8006894:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006898:	b18b      	cbz	r3, 80068be <__mdiff+0x10a>
 800689a:	6117      	str	r7, [r2, #16]
 800689c:	e7a4      	b.n	80067e8 <__mdiff+0x34>
 800689e:	f855 8b04 	ldr.w	r8, [r5], #4
 80068a2:	fa1f f188 	uxth.w	r1, r8
 80068a6:	4461      	add	r1, ip
 80068a8:	140c      	asrs	r4, r1, #16
 80068aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80068ae:	b289      	uxth	r1, r1
 80068b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80068b4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80068b8:	f846 1b04 	str.w	r1, [r6], #4
 80068bc:	e7de      	b.n	800687c <__mdiff+0xc8>
 80068be:	3f01      	subs	r7, #1
 80068c0:	e7e8      	b.n	8006894 <__mdiff+0xe0>
 80068c2:	bf00      	nop
 80068c4:	080079b3 	.word	0x080079b3
 80068c8:	08007a24 	.word	0x08007a24

080068cc <__d2b>:
 80068cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80068d0:	2101      	movs	r1, #1
 80068d2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80068d6:	4690      	mov	r8, r2
 80068d8:	461d      	mov	r5, r3
 80068da:	f7ff fcd1 	bl	8006280 <_Balloc>
 80068de:	4604      	mov	r4, r0
 80068e0:	b930      	cbnz	r0, 80068f0 <__d2b+0x24>
 80068e2:	4602      	mov	r2, r0
 80068e4:	f240 310a 	movw	r1, #778	; 0x30a
 80068e8:	4b24      	ldr	r3, [pc, #144]	; (800697c <__d2b+0xb0>)
 80068ea:	4825      	ldr	r0, [pc, #148]	; (8006980 <__d2b+0xb4>)
 80068ec:	f000 fbb8 	bl	8007060 <__assert_func>
 80068f0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80068f4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80068f8:	bb2d      	cbnz	r5, 8006946 <__d2b+0x7a>
 80068fa:	9301      	str	r3, [sp, #4]
 80068fc:	f1b8 0300 	subs.w	r3, r8, #0
 8006900:	d026      	beq.n	8006950 <__d2b+0x84>
 8006902:	4668      	mov	r0, sp
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	f7ff fd83 	bl	8006410 <__lo0bits>
 800690a:	9900      	ldr	r1, [sp, #0]
 800690c:	b1f0      	cbz	r0, 800694c <__d2b+0x80>
 800690e:	9a01      	ldr	r2, [sp, #4]
 8006910:	f1c0 0320 	rsb	r3, r0, #32
 8006914:	fa02 f303 	lsl.w	r3, r2, r3
 8006918:	430b      	orrs	r3, r1
 800691a:	40c2      	lsrs	r2, r0
 800691c:	6163      	str	r3, [r4, #20]
 800691e:	9201      	str	r2, [sp, #4]
 8006920:	9b01      	ldr	r3, [sp, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	bf14      	ite	ne
 8006926:	2102      	movne	r1, #2
 8006928:	2101      	moveq	r1, #1
 800692a:	61a3      	str	r3, [r4, #24]
 800692c:	6121      	str	r1, [r4, #16]
 800692e:	b1c5      	cbz	r5, 8006962 <__d2b+0x96>
 8006930:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006934:	4405      	add	r5, r0
 8006936:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800693a:	603d      	str	r5, [r7, #0]
 800693c:	6030      	str	r0, [r6, #0]
 800693e:	4620      	mov	r0, r4
 8006940:	b002      	add	sp, #8
 8006942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800694a:	e7d6      	b.n	80068fa <__d2b+0x2e>
 800694c:	6161      	str	r1, [r4, #20]
 800694e:	e7e7      	b.n	8006920 <__d2b+0x54>
 8006950:	a801      	add	r0, sp, #4
 8006952:	f7ff fd5d 	bl	8006410 <__lo0bits>
 8006956:	2101      	movs	r1, #1
 8006958:	9b01      	ldr	r3, [sp, #4]
 800695a:	6121      	str	r1, [r4, #16]
 800695c:	6163      	str	r3, [r4, #20]
 800695e:	3020      	adds	r0, #32
 8006960:	e7e5      	b.n	800692e <__d2b+0x62>
 8006962:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006966:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800696a:	6038      	str	r0, [r7, #0]
 800696c:	6918      	ldr	r0, [r3, #16]
 800696e:	f7ff fd2f 	bl	80063d0 <__hi0bits>
 8006972:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006976:	6031      	str	r1, [r6, #0]
 8006978:	e7e1      	b.n	800693e <__d2b+0x72>
 800697a:	bf00      	nop
 800697c:	080079b3 	.word	0x080079b3
 8006980:	08007a24 	.word	0x08007a24

08006984 <_calloc_r>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	fba1 5402 	umull	r5, r4, r1, r2
 800698a:	b934      	cbnz	r4, 800699a <_calloc_r+0x16>
 800698c:	4629      	mov	r1, r5
 800698e:	f000 f875 	bl	8006a7c <_malloc_r>
 8006992:	4606      	mov	r6, r0
 8006994:	b928      	cbnz	r0, 80069a2 <_calloc_r+0x1e>
 8006996:	4630      	mov	r0, r6
 8006998:	bd70      	pop	{r4, r5, r6, pc}
 800699a:	220c      	movs	r2, #12
 800699c:	2600      	movs	r6, #0
 800699e:	6002      	str	r2, [r0, #0]
 80069a0:	e7f9      	b.n	8006996 <_calloc_r+0x12>
 80069a2:	462a      	mov	r2, r5
 80069a4:	4621      	mov	r1, r4
 80069a6:	f7fe f84d 	bl	8004a44 <memset>
 80069aa:	e7f4      	b.n	8006996 <_calloc_r+0x12>

080069ac <_free_r>:
 80069ac:	b538      	push	{r3, r4, r5, lr}
 80069ae:	4605      	mov	r5, r0
 80069b0:	2900      	cmp	r1, #0
 80069b2:	d040      	beq.n	8006a36 <_free_r+0x8a>
 80069b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b8:	1f0c      	subs	r4, r1, #4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	bfb8      	it	lt
 80069be:	18e4      	addlt	r4, r4, r3
 80069c0:	f000 fcd6 	bl	8007370 <__malloc_lock>
 80069c4:	4a1c      	ldr	r2, [pc, #112]	; (8006a38 <_free_r+0x8c>)
 80069c6:	6813      	ldr	r3, [r2, #0]
 80069c8:	b933      	cbnz	r3, 80069d8 <_free_r+0x2c>
 80069ca:	6063      	str	r3, [r4, #4]
 80069cc:	6014      	str	r4, [r2, #0]
 80069ce:	4628      	mov	r0, r5
 80069d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069d4:	f000 bcd2 	b.w	800737c <__malloc_unlock>
 80069d8:	42a3      	cmp	r3, r4
 80069da:	d908      	bls.n	80069ee <_free_r+0x42>
 80069dc:	6820      	ldr	r0, [r4, #0]
 80069de:	1821      	adds	r1, r4, r0
 80069e0:	428b      	cmp	r3, r1
 80069e2:	bf01      	itttt	eq
 80069e4:	6819      	ldreq	r1, [r3, #0]
 80069e6:	685b      	ldreq	r3, [r3, #4]
 80069e8:	1809      	addeq	r1, r1, r0
 80069ea:	6021      	streq	r1, [r4, #0]
 80069ec:	e7ed      	b.n	80069ca <_free_r+0x1e>
 80069ee:	461a      	mov	r2, r3
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	b10b      	cbz	r3, 80069f8 <_free_r+0x4c>
 80069f4:	42a3      	cmp	r3, r4
 80069f6:	d9fa      	bls.n	80069ee <_free_r+0x42>
 80069f8:	6811      	ldr	r1, [r2, #0]
 80069fa:	1850      	adds	r0, r2, r1
 80069fc:	42a0      	cmp	r0, r4
 80069fe:	d10b      	bne.n	8006a18 <_free_r+0x6c>
 8006a00:	6820      	ldr	r0, [r4, #0]
 8006a02:	4401      	add	r1, r0
 8006a04:	1850      	adds	r0, r2, r1
 8006a06:	4283      	cmp	r3, r0
 8006a08:	6011      	str	r1, [r2, #0]
 8006a0a:	d1e0      	bne.n	80069ce <_free_r+0x22>
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4401      	add	r1, r0
 8006a12:	6011      	str	r1, [r2, #0]
 8006a14:	6053      	str	r3, [r2, #4]
 8006a16:	e7da      	b.n	80069ce <_free_r+0x22>
 8006a18:	d902      	bls.n	8006a20 <_free_r+0x74>
 8006a1a:	230c      	movs	r3, #12
 8006a1c:	602b      	str	r3, [r5, #0]
 8006a1e:	e7d6      	b.n	80069ce <_free_r+0x22>
 8006a20:	6820      	ldr	r0, [r4, #0]
 8006a22:	1821      	adds	r1, r4, r0
 8006a24:	428b      	cmp	r3, r1
 8006a26:	bf01      	itttt	eq
 8006a28:	6819      	ldreq	r1, [r3, #0]
 8006a2a:	685b      	ldreq	r3, [r3, #4]
 8006a2c:	1809      	addeq	r1, r1, r0
 8006a2e:	6021      	streq	r1, [r4, #0]
 8006a30:	6063      	str	r3, [r4, #4]
 8006a32:	6054      	str	r4, [r2, #4]
 8006a34:	e7cb      	b.n	80069ce <_free_r+0x22>
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	20000480 	.word	0x20000480

08006a3c <sbrk_aligned>:
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	4e0e      	ldr	r6, [pc, #56]	; (8006a78 <sbrk_aligned+0x3c>)
 8006a40:	460c      	mov	r4, r1
 8006a42:	6831      	ldr	r1, [r6, #0]
 8006a44:	4605      	mov	r5, r0
 8006a46:	b911      	cbnz	r1, 8006a4e <sbrk_aligned+0x12>
 8006a48:	f000 f9e4 	bl	8006e14 <_sbrk_r>
 8006a4c:	6030      	str	r0, [r6, #0]
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4628      	mov	r0, r5
 8006a52:	f000 f9df 	bl	8006e14 <_sbrk_r>
 8006a56:	1c43      	adds	r3, r0, #1
 8006a58:	d00a      	beq.n	8006a70 <sbrk_aligned+0x34>
 8006a5a:	1cc4      	adds	r4, r0, #3
 8006a5c:	f024 0403 	bic.w	r4, r4, #3
 8006a60:	42a0      	cmp	r0, r4
 8006a62:	d007      	beq.n	8006a74 <sbrk_aligned+0x38>
 8006a64:	1a21      	subs	r1, r4, r0
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 f9d4 	bl	8006e14 <_sbrk_r>
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d101      	bne.n	8006a74 <sbrk_aligned+0x38>
 8006a70:	f04f 34ff 	mov.w	r4, #4294967295
 8006a74:	4620      	mov	r0, r4
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
 8006a78:	20000484 	.word	0x20000484

08006a7c <_malloc_r>:
 8006a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a80:	1ccd      	adds	r5, r1, #3
 8006a82:	f025 0503 	bic.w	r5, r5, #3
 8006a86:	3508      	adds	r5, #8
 8006a88:	2d0c      	cmp	r5, #12
 8006a8a:	bf38      	it	cc
 8006a8c:	250c      	movcc	r5, #12
 8006a8e:	2d00      	cmp	r5, #0
 8006a90:	4607      	mov	r7, r0
 8006a92:	db01      	blt.n	8006a98 <_malloc_r+0x1c>
 8006a94:	42a9      	cmp	r1, r5
 8006a96:	d905      	bls.n	8006aa4 <_malloc_r+0x28>
 8006a98:	230c      	movs	r3, #12
 8006a9a:	2600      	movs	r6, #0
 8006a9c:	603b      	str	r3, [r7, #0]
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa4:	4e2e      	ldr	r6, [pc, #184]	; (8006b60 <_malloc_r+0xe4>)
 8006aa6:	f000 fc63 	bl	8007370 <__malloc_lock>
 8006aaa:	6833      	ldr	r3, [r6, #0]
 8006aac:	461c      	mov	r4, r3
 8006aae:	bb34      	cbnz	r4, 8006afe <_malloc_r+0x82>
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	f7ff ffc2 	bl	8006a3c <sbrk_aligned>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	4604      	mov	r4, r0
 8006abc:	d14d      	bne.n	8006b5a <_malloc_r+0xde>
 8006abe:	6834      	ldr	r4, [r6, #0]
 8006ac0:	4626      	mov	r6, r4
 8006ac2:	2e00      	cmp	r6, #0
 8006ac4:	d140      	bne.n	8006b48 <_malloc_r+0xcc>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4638      	mov	r0, r7
 8006acc:	eb04 0803 	add.w	r8, r4, r3
 8006ad0:	f000 f9a0 	bl	8006e14 <_sbrk_r>
 8006ad4:	4580      	cmp	r8, r0
 8006ad6:	d13a      	bne.n	8006b4e <_malloc_r+0xd2>
 8006ad8:	6821      	ldr	r1, [r4, #0]
 8006ada:	3503      	adds	r5, #3
 8006adc:	1a6d      	subs	r5, r5, r1
 8006ade:	f025 0503 	bic.w	r5, r5, #3
 8006ae2:	3508      	adds	r5, #8
 8006ae4:	2d0c      	cmp	r5, #12
 8006ae6:	bf38      	it	cc
 8006ae8:	250c      	movcc	r5, #12
 8006aea:	4638      	mov	r0, r7
 8006aec:	4629      	mov	r1, r5
 8006aee:	f7ff ffa5 	bl	8006a3c <sbrk_aligned>
 8006af2:	3001      	adds	r0, #1
 8006af4:	d02b      	beq.n	8006b4e <_malloc_r+0xd2>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	442b      	add	r3, r5
 8006afa:	6023      	str	r3, [r4, #0]
 8006afc:	e00e      	b.n	8006b1c <_malloc_r+0xa0>
 8006afe:	6822      	ldr	r2, [r4, #0]
 8006b00:	1b52      	subs	r2, r2, r5
 8006b02:	d41e      	bmi.n	8006b42 <_malloc_r+0xc6>
 8006b04:	2a0b      	cmp	r2, #11
 8006b06:	d916      	bls.n	8006b36 <_malloc_r+0xba>
 8006b08:	1961      	adds	r1, r4, r5
 8006b0a:	42a3      	cmp	r3, r4
 8006b0c:	6025      	str	r5, [r4, #0]
 8006b0e:	bf18      	it	ne
 8006b10:	6059      	strne	r1, [r3, #4]
 8006b12:	6863      	ldr	r3, [r4, #4]
 8006b14:	bf08      	it	eq
 8006b16:	6031      	streq	r1, [r6, #0]
 8006b18:	5162      	str	r2, [r4, r5]
 8006b1a:	604b      	str	r3, [r1, #4]
 8006b1c:	4638      	mov	r0, r7
 8006b1e:	f104 060b 	add.w	r6, r4, #11
 8006b22:	f000 fc2b 	bl	800737c <__malloc_unlock>
 8006b26:	f026 0607 	bic.w	r6, r6, #7
 8006b2a:	1d23      	adds	r3, r4, #4
 8006b2c:	1af2      	subs	r2, r6, r3
 8006b2e:	d0b6      	beq.n	8006a9e <_malloc_r+0x22>
 8006b30:	1b9b      	subs	r3, r3, r6
 8006b32:	50a3      	str	r3, [r4, r2]
 8006b34:	e7b3      	b.n	8006a9e <_malloc_r+0x22>
 8006b36:	6862      	ldr	r2, [r4, #4]
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	bf0c      	ite	eq
 8006b3c:	6032      	streq	r2, [r6, #0]
 8006b3e:	605a      	strne	r2, [r3, #4]
 8006b40:	e7ec      	b.n	8006b1c <_malloc_r+0xa0>
 8006b42:	4623      	mov	r3, r4
 8006b44:	6864      	ldr	r4, [r4, #4]
 8006b46:	e7b2      	b.n	8006aae <_malloc_r+0x32>
 8006b48:	4634      	mov	r4, r6
 8006b4a:	6876      	ldr	r6, [r6, #4]
 8006b4c:	e7b9      	b.n	8006ac2 <_malloc_r+0x46>
 8006b4e:	230c      	movs	r3, #12
 8006b50:	4638      	mov	r0, r7
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	f000 fc12 	bl	800737c <__malloc_unlock>
 8006b58:	e7a1      	b.n	8006a9e <_malloc_r+0x22>
 8006b5a:	6025      	str	r5, [r4, #0]
 8006b5c:	e7de      	b.n	8006b1c <_malloc_r+0xa0>
 8006b5e:	bf00      	nop
 8006b60:	20000480 	.word	0x20000480

08006b64 <__sfputc_r>:
 8006b64:	6893      	ldr	r3, [r2, #8]
 8006b66:	b410      	push	{r4}
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	6093      	str	r3, [r2, #8]
 8006b6e:	da07      	bge.n	8006b80 <__sfputc_r+0x1c>
 8006b70:	6994      	ldr	r4, [r2, #24]
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	db01      	blt.n	8006b7a <__sfputc_r+0x16>
 8006b76:	290a      	cmp	r1, #10
 8006b78:	d102      	bne.n	8006b80 <__sfputc_r+0x1c>
 8006b7a:	bc10      	pop	{r4}
 8006b7c:	f000 b99e 	b.w	8006ebc <__swbuf_r>
 8006b80:	6813      	ldr	r3, [r2, #0]
 8006b82:	1c58      	adds	r0, r3, #1
 8006b84:	6010      	str	r0, [r2, #0]
 8006b86:	7019      	strb	r1, [r3, #0]
 8006b88:	4608      	mov	r0, r1
 8006b8a:	bc10      	pop	{r4}
 8006b8c:	4770      	bx	lr

08006b8e <__sfputs_r>:
 8006b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b90:	4606      	mov	r6, r0
 8006b92:	460f      	mov	r7, r1
 8006b94:	4614      	mov	r4, r2
 8006b96:	18d5      	adds	r5, r2, r3
 8006b98:	42ac      	cmp	r4, r5
 8006b9a:	d101      	bne.n	8006ba0 <__sfputs_r+0x12>
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e007      	b.n	8006bb0 <__sfputs_r+0x22>
 8006ba0:	463a      	mov	r2, r7
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba8:	f7ff ffdc 	bl	8006b64 <__sfputc_r>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d1f3      	bne.n	8006b98 <__sfputs_r+0xa>
 8006bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bb4 <_vfiprintf_r>:
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	460d      	mov	r5, r1
 8006bba:	4614      	mov	r4, r2
 8006bbc:	4698      	mov	r8, r3
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	b09d      	sub	sp, #116	; 0x74
 8006bc2:	b118      	cbz	r0, 8006bcc <_vfiprintf_r+0x18>
 8006bc4:	6983      	ldr	r3, [r0, #24]
 8006bc6:	b90b      	cbnz	r3, 8006bcc <_vfiprintf_r+0x18>
 8006bc8:	f7ff fa90 	bl	80060ec <__sinit>
 8006bcc:	4b89      	ldr	r3, [pc, #548]	; (8006df4 <_vfiprintf_r+0x240>)
 8006bce:	429d      	cmp	r5, r3
 8006bd0:	d11b      	bne.n	8006c0a <_vfiprintf_r+0x56>
 8006bd2:	6875      	ldr	r5, [r6, #4]
 8006bd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bd6:	07d9      	lsls	r1, r3, #31
 8006bd8:	d405      	bmi.n	8006be6 <_vfiprintf_r+0x32>
 8006bda:	89ab      	ldrh	r3, [r5, #12]
 8006bdc:	059a      	lsls	r2, r3, #22
 8006bde:	d402      	bmi.n	8006be6 <_vfiprintf_r+0x32>
 8006be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006be2:	f7ff fb26 	bl	8006232 <__retarget_lock_acquire_recursive>
 8006be6:	89ab      	ldrh	r3, [r5, #12]
 8006be8:	071b      	lsls	r3, r3, #28
 8006bea:	d501      	bpl.n	8006bf0 <_vfiprintf_r+0x3c>
 8006bec:	692b      	ldr	r3, [r5, #16]
 8006bee:	b9eb      	cbnz	r3, 8006c2c <_vfiprintf_r+0x78>
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f000 f9c6 	bl	8006f84 <__swsetup_r>
 8006bf8:	b1c0      	cbz	r0, 8006c2c <_vfiprintf_r+0x78>
 8006bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bfc:	07dc      	lsls	r4, r3, #31
 8006bfe:	d50e      	bpl.n	8006c1e <_vfiprintf_r+0x6a>
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	b01d      	add	sp, #116	; 0x74
 8006c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0a:	4b7b      	ldr	r3, [pc, #492]	; (8006df8 <_vfiprintf_r+0x244>)
 8006c0c:	429d      	cmp	r5, r3
 8006c0e:	d101      	bne.n	8006c14 <_vfiprintf_r+0x60>
 8006c10:	68b5      	ldr	r5, [r6, #8]
 8006c12:	e7df      	b.n	8006bd4 <_vfiprintf_r+0x20>
 8006c14:	4b79      	ldr	r3, [pc, #484]	; (8006dfc <_vfiprintf_r+0x248>)
 8006c16:	429d      	cmp	r5, r3
 8006c18:	bf08      	it	eq
 8006c1a:	68f5      	ldreq	r5, [r6, #12]
 8006c1c:	e7da      	b.n	8006bd4 <_vfiprintf_r+0x20>
 8006c1e:	89ab      	ldrh	r3, [r5, #12]
 8006c20:	0598      	lsls	r0, r3, #22
 8006c22:	d4ed      	bmi.n	8006c00 <_vfiprintf_r+0x4c>
 8006c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c26:	f7ff fb05 	bl	8006234 <__retarget_lock_release_recursive>
 8006c2a:	e7e9      	b.n	8006c00 <_vfiprintf_r+0x4c>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c30:	2320      	movs	r3, #32
 8006c32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c36:	2330      	movs	r3, #48	; 0x30
 8006c38:	f04f 0901 	mov.w	r9, #1
 8006c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c40:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006e00 <_vfiprintf_r+0x24c>
 8006c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c48:	4623      	mov	r3, r4
 8006c4a:	469a      	mov	sl, r3
 8006c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c50:	b10a      	cbz	r2, 8006c56 <_vfiprintf_r+0xa2>
 8006c52:	2a25      	cmp	r2, #37	; 0x25
 8006c54:	d1f9      	bne.n	8006c4a <_vfiprintf_r+0x96>
 8006c56:	ebba 0b04 	subs.w	fp, sl, r4
 8006c5a:	d00b      	beq.n	8006c74 <_vfiprintf_r+0xc0>
 8006c5c:	465b      	mov	r3, fp
 8006c5e:	4622      	mov	r2, r4
 8006c60:	4629      	mov	r1, r5
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7ff ff93 	bl	8006b8e <__sfputs_r>
 8006c68:	3001      	adds	r0, #1
 8006c6a:	f000 80aa 	beq.w	8006dc2 <_vfiprintf_r+0x20e>
 8006c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c70:	445a      	add	r2, fp
 8006c72:	9209      	str	r2, [sp, #36]	; 0x24
 8006c74:	f89a 3000 	ldrb.w	r3, [sl]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80a2 	beq.w	8006dc2 <_vfiprintf_r+0x20e>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f04f 32ff 	mov.w	r2, #4294967295
 8006c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c88:	f10a 0a01 	add.w	sl, sl, #1
 8006c8c:	9304      	str	r3, [sp, #16]
 8006c8e:	9307      	str	r3, [sp, #28]
 8006c90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c94:	931a      	str	r3, [sp, #104]	; 0x68
 8006c96:	4654      	mov	r4, sl
 8006c98:	2205      	movs	r2, #5
 8006c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c9e:	4858      	ldr	r0, [pc, #352]	; (8006e00 <_vfiprintf_r+0x24c>)
 8006ca0:	f7ff fad2 	bl	8006248 <memchr>
 8006ca4:	9a04      	ldr	r2, [sp, #16]
 8006ca6:	b9d8      	cbnz	r0, 8006ce0 <_vfiprintf_r+0x12c>
 8006ca8:	06d1      	lsls	r1, r2, #27
 8006caa:	bf44      	itt	mi
 8006cac:	2320      	movmi	r3, #32
 8006cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cb2:	0713      	lsls	r3, r2, #28
 8006cb4:	bf44      	itt	mi
 8006cb6:	232b      	movmi	r3, #43	; 0x2b
 8006cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8006cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8006cc2:	d015      	beq.n	8006cf0 <_vfiprintf_r+0x13c>
 8006cc4:	4654      	mov	r4, sl
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	f04f 0c0a 	mov.w	ip, #10
 8006ccc:	9a07      	ldr	r2, [sp, #28]
 8006cce:	4621      	mov	r1, r4
 8006cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cd4:	3b30      	subs	r3, #48	; 0x30
 8006cd6:	2b09      	cmp	r3, #9
 8006cd8:	d94e      	bls.n	8006d78 <_vfiprintf_r+0x1c4>
 8006cda:	b1b0      	cbz	r0, 8006d0a <_vfiprintf_r+0x156>
 8006cdc:	9207      	str	r2, [sp, #28]
 8006cde:	e014      	b.n	8006d0a <_vfiprintf_r+0x156>
 8006ce0:	eba0 0308 	sub.w	r3, r0, r8
 8006ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	46a2      	mov	sl, r4
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	e7d2      	b.n	8006c96 <_vfiprintf_r+0xe2>
 8006cf0:	9b03      	ldr	r3, [sp, #12]
 8006cf2:	1d19      	adds	r1, r3, #4
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	9103      	str	r1, [sp, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	bfbb      	ittet	lt
 8006cfc:	425b      	neglt	r3, r3
 8006cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8006d02:	9307      	strge	r3, [sp, #28]
 8006d04:	9307      	strlt	r3, [sp, #28]
 8006d06:	bfb8      	it	lt
 8006d08:	9204      	strlt	r2, [sp, #16]
 8006d0a:	7823      	ldrb	r3, [r4, #0]
 8006d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d0e:	d10c      	bne.n	8006d2a <_vfiprintf_r+0x176>
 8006d10:	7863      	ldrb	r3, [r4, #1]
 8006d12:	2b2a      	cmp	r3, #42	; 0x2a
 8006d14:	d135      	bne.n	8006d82 <_vfiprintf_r+0x1ce>
 8006d16:	9b03      	ldr	r3, [sp, #12]
 8006d18:	3402      	adds	r4, #2
 8006d1a:	1d1a      	adds	r2, r3, #4
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	9203      	str	r2, [sp, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	bfb8      	it	lt
 8006d24:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d28:	9305      	str	r3, [sp, #20]
 8006d2a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006e04 <_vfiprintf_r+0x250>
 8006d2e:	2203      	movs	r2, #3
 8006d30:	4650      	mov	r0, sl
 8006d32:	7821      	ldrb	r1, [r4, #0]
 8006d34:	f7ff fa88 	bl	8006248 <memchr>
 8006d38:	b140      	cbz	r0, 8006d4c <_vfiprintf_r+0x198>
 8006d3a:	2340      	movs	r3, #64	; 0x40
 8006d3c:	eba0 000a 	sub.w	r0, r0, sl
 8006d40:	fa03 f000 	lsl.w	r0, r3, r0
 8006d44:	9b04      	ldr	r3, [sp, #16]
 8006d46:	3401      	adds	r4, #1
 8006d48:	4303      	orrs	r3, r0
 8006d4a:	9304      	str	r3, [sp, #16]
 8006d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d50:	2206      	movs	r2, #6
 8006d52:	482d      	ldr	r0, [pc, #180]	; (8006e08 <_vfiprintf_r+0x254>)
 8006d54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d58:	f7ff fa76 	bl	8006248 <memchr>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d03f      	beq.n	8006de0 <_vfiprintf_r+0x22c>
 8006d60:	4b2a      	ldr	r3, [pc, #168]	; (8006e0c <_vfiprintf_r+0x258>)
 8006d62:	bb1b      	cbnz	r3, 8006dac <_vfiprintf_r+0x1f8>
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	3307      	adds	r3, #7
 8006d68:	f023 0307 	bic.w	r3, r3, #7
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	9303      	str	r3, [sp, #12]
 8006d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d72:	443b      	add	r3, r7
 8006d74:	9309      	str	r3, [sp, #36]	; 0x24
 8006d76:	e767      	b.n	8006c48 <_vfiprintf_r+0x94>
 8006d78:	460c      	mov	r4, r1
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d80:	e7a5      	b.n	8006cce <_vfiprintf_r+0x11a>
 8006d82:	2300      	movs	r3, #0
 8006d84:	f04f 0c0a 	mov.w	ip, #10
 8006d88:	4619      	mov	r1, r3
 8006d8a:	3401      	adds	r4, #1
 8006d8c:	9305      	str	r3, [sp, #20]
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d94:	3a30      	subs	r2, #48	; 0x30
 8006d96:	2a09      	cmp	r2, #9
 8006d98:	d903      	bls.n	8006da2 <_vfiprintf_r+0x1ee>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0c5      	beq.n	8006d2a <_vfiprintf_r+0x176>
 8006d9e:	9105      	str	r1, [sp, #20]
 8006da0:	e7c3      	b.n	8006d2a <_vfiprintf_r+0x176>
 8006da2:	4604      	mov	r4, r0
 8006da4:	2301      	movs	r3, #1
 8006da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006daa:	e7f0      	b.n	8006d8e <_vfiprintf_r+0x1da>
 8006dac:	ab03      	add	r3, sp, #12
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	462a      	mov	r2, r5
 8006db2:	4630      	mov	r0, r6
 8006db4:	4b16      	ldr	r3, [pc, #88]	; (8006e10 <_vfiprintf_r+0x25c>)
 8006db6:	a904      	add	r1, sp, #16
 8006db8:	f7fd feea 	bl	8004b90 <_printf_float>
 8006dbc:	4607      	mov	r7, r0
 8006dbe:	1c78      	adds	r0, r7, #1
 8006dc0:	d1d6      	bne.n	8006d70 <_vfiprintf_r+0x1bc>
 8006dc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dc4:	07d9      	lsls	r1, r3, #31
 8006dc6:	d405      	bmi.n	8006dd4 <_vfiprintf_r+0x220>
 8006dc8:	89ab      	ldrh	r3, [r5, #12]
 8006dca:	059a      	lsls	r2, r3, #22
 8006dcc:	d402      	bmi.n	8006dd4 <_vfiprintf_r+0x220>
 8006dce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dd0:	f7ff fa30 	bl	8006234 <__retarget_lock_release_recursive>
 8006dd4:	89ab      	ldrh	r3, [r5, #12]
 8006dd6:	065b      	lsls	r3, r3, #25
 8006dd8:	f53f af12 	bmi.w	8006c00 <_vfiprintf_r+0x4c>
 8006ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dde:	e711      	b.n	8006c04 <_vfiprintf_r+0x50>
 8006de0:	ab03      	add	r3, sp, #12
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	462a      	mov	r2, r5
 8006de6:	4630      	mov	r0, r6
 8006de8:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <_vfiprintf_r+0x25c>)
 8006dea:	a904      	add	r1, sp, #16
 8006dec:	f7fe f96c 	bl	80050c8 <_printf_i>
 8006df0:	e7e4      	b.n	8006dbc <_vfiprintf_r+0x208>
 8006df2:	bf00      	nop
 8006df4:	080079e4 	.word	0x080079e4
 8006df8:	08007a04 	.word	0x08007a04
 8006dfc:	080079c4 	.word	0x080079c4
 8006e00:	08007b7c 	.word	0x08007b7c
 8006e04:	08007b82 	.word	0x08007b82
 8006e08:	08007b86 	.word	0x08007b86
 8006e0c:	08004b91 	.word	0x08004b91
 8006e10:	08006b8f 	.word	0x08006b8f

08006e14 <_sbrk_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	2300      	movs	r3, #0
 8006e18:	4d05      	ldr	r5, [pc, #20]	; (8006e30 <_sbrk_r+0x1c>)
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	f7fa ff90 	bl	8001d44 <_sbrk>
 8006e24:	1c43      	adds	r3, r0, #1
 8006e26:	d102      	bne.n	8006e2e <_sbrk_r+0x1a>
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	b103      	cbz	r3, 8006e2e <_sbrk_r+0x1a>
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	bd38      	pop	{r3, r4, r5, pc}
 8006e30:	20000488 	.word	0x20000488

08006e34 <__sread>:
 8006e34:	b510      	push	{r4, lr}
 8006e36:	460c      	mov	r4, r1
 8006e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e3c:	f000 faa4 	bl	8007388 <_read_r>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	bfab      	itete	ge
 8006e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e46:	89a3      	ldrhlt	r3, [r4, #12]
 8006e48:	181b      	addge	r3, r3, r0
 8006e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e4e:	bfac      	ite	ge
 8006e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e52:	81a3      	strhlt	r3, [r4, #12]
 8006e54:	bd10      	pop	{r4, pc}

08006e56 <__swrite>:
 8006e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e5a:	461f      	mov	r7, r3
 8006e5c:	898b      	ldrh	r3, [r1, #12]
 8006e5e:	4605      	mov	r5, r0
 8006e60:	05db      	lsls	r3, r3, #23
 8006e62:	460c      	mov	r4, r1
 8006e64:	4616      	mov	r6, r2
 8006e66:	d505      	bpl.n	8006e74 <__swrite+0x1e>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e70:	f000 f9f4 	bl	800725c <_lseek_r>
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	4632      	mov	r2, r6
 8006e78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e7c:	81a3      	strh	r3, [r4, #12]
 8006e7e:	4628      	mov	r0, r5
 8006e80:	463b      	mov	r3, r7
 8006e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8a:	f000 b869 	b.w	8006f60 <_write_r>

08006e8e <__sseek>:
 8006e8e:	b510      	push	{r4, lr}
 8006e90:	460c      	mov	r4, r1
 8006e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e96:	f000 f9e1 	bl	800725c <_lseek_r>
 8006e9a:	1c43      	adds	r3, r0, #1
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	bf15      	itete	ne
 8006ea0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006eaa:	81a3      	strheq	r3, [r4, #12]
 8006eac:	bf18      	it	ne
 8006eae:	81a3      	strhne	r3, [r4, #12]
 8006eb0:	bd10      	pop	{r4, pc}

08006eb2 <__sclose>:
 8006eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb6:	f000 b8f1 	b.w	800709c <_close_r>
	...

08006ebc <__swbuf_r>:
 8006ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ebe:	460e      	mov	r6, r1
 8006ec0:	4614      	mov	r4, r2
 8006ec2:	4605      	mov	r5, r0
 8006ec4:	b118      	cbz	r0, 8006ece <__swbuf_r+0x12>
 8006ec6:	6983      	ldr	r3, [r0, #24]
 8006ec8:	b90b      	cbnz	r3, 8006ece <__swbuf_r+0x12>
 8006eca:	f7ff f90f 	bl	80060ec <__sinit>
 8006ece:	4b21      	ldr	r3, [pc, #132]	; (8006f54 <__swbuf_r+0x98>)
 8006ed0:	429c      	cmp	r4, r3
 8006ed2:	d12b      	bne.n	8006f2c <__swbuf_r+0x70>
 8006ed4:	686c      	ldr	r4, [r5, #4]
 8006ed6:	69a3      	ldr	r3, [r4, #24]
 8006ed8:	60a3      	str	r3, [r4, #8]
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	071a      	lsls	r2, r3, #28
 8006ede:	d52f      	bpl.n	8006f40 <__swbuf_r+0x84>
 8006ee0:	6923      	ldr	r3, [r4, #16]
 8006ee2:	b36b      	cbz	r3, 8006f40 <__swbuf_r+0x84>
 8006ee4:	6923      	ldr	r3, [r4, #16]
 8006ee6:	6820      	ldr	r0, [r4, #0]
 8006ee8:	b2f6      	uxtb	r6, r6
 8006eea:	1ac0      	subs	r0, r0, r3
 8006eec:	6963      	ldr	r3, [r4, #20]
 8006eee:	4637      	mov	r7, r6
 8006ef0:	4283      	cmp	r3, r0
 8006ef2:	dc04      	bgt.n	8006efe <__swbuf_r+0x42>
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f000 f962 	bl	80071c0 <_fflush_r>
 8006efc:	bb30      	cbnz	r0, 8006f4c <__swbuf_r+0x90>
 8006efe:	68a3      	ldr	r3, [r4, #8]
 8006f00:	3001      	adds	r0, #1
 8006f02:	3b01      	subs	r3, #1
 8006f04:	60a3      	str	r3, [r4, #8]
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	6022      	str	r2, [r4, #0]
 8006f0c:	701e      	strb	r6, [r3, #0]
 8006f0e:	6963      	ldr	r3, [r4, #20]
 8006f10:	4283      	cmp	r3, r0
 8006f12:	d004      	beq.n	8006f1e <__swbuf_r+0x62>
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	07db      	lsls	r3, r3, #31
 8006f18:	d506      	bpl.n	8006f28 <__swbuf_r+0x6c>
 8006f1a:	2e0a      	cmp	r6, #10
 8006f1c:	d104      	bne.n	8006f28 <__swbuf_r+0x6c>
 8006f1e:	4621      	mov	r1, r4
 8006f20:	4628      	mov	r0, r5
 8006f22:	f000 f94d 	bl	80071c0 <_fflush_r>
 8006f26:	b988      	cbnz	r0, 8006f4c <__swbuf_r+0x90>
 8006f28:	4638      	mov	r0, r7
 8006f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <__swbuf_r+0x9c>)
 8006f2e:	429c      	cmp	r4, r3
 8006f30:	d101      	bne.n	8006f36 <__swbuf_r+0x7a>
 8006f32:	68ac      	ldr	r4, [r5, #8]
 8006f34:	e7cf      	b.n	8006ed6 <__swbuf_r+0x1a>
 8006f36:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <__swbuf_r+0xa0>)
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	bf08      	it	eq
 8006f3c:	68ec      	ldreq	r4, [r5, #12]
 8006f3e:	e7ca      	b.n	8006ed6 <__swbuf_r+0x1a>
 8006f40:	4621      	mov	r1, r4
 8006f42:	4628      	mov	r0, r5
 8006f44:	f000 f81e 	bl	8006f84 <__swsetup_r>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d0cb      	beq.n	8006ee4 <__swbuf_r+0x28>
 8006f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8006f50:	e7ea      	b.n	8006f28 <__swbuf_r+0x6c>
 8006f52:	bf00      	nop
 8006f54:	080079e4 	.word	0x080079e4
 8006f58:	08007a04 	.word	0x08007a04
 8006f5c:	080079c4 	.word	0x080079c4

08006f60 <_write_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4604      	mov	r4, r0
 8006f64:	4608      	mov	r0, r1
 8006f66:	4611      	mov	r1, r2
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4d05      	ldr	r5, [pc, #20]	; (8006f80 <_write_r+0x20>)
 8006f6c:	602a      	str	r2, [r5, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f7fa fe9c 	bl	8001cac <_write>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_write_r+0x1e>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_write_r+0x1e>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	20000488 	.word	0x20000488

08006f84 <__swsetup_r>:
 8006f84:	4b32      	ldr	r3, [pc, #200]	; (8007050 <__swsetup_r+0xcc>)
 8006f86:	b570      	push	{r4, r5, r6, lr}
 8006f88:	681d      	ldr	r5, [r3, #0]
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	b125      	cbz	r5, 8006f9a <__swsetup_r+0x16>
 8006f90:	69ab      	ldr	r3, [r5, #24]
 8006f92:	b913      	cbnz	r3, 8006f9a <__swsetup_r+0x16>
 8006f94:	4628      	mov	r0, r5
 8006f96:	f7ff f8a9 	bl	80060ec <__sinit>
 8006f9a:	4b2e      	ldr	r3, [pc, #184]	; (8007054 <__swsetup_r+0xd0>)
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	d10f      	bne.n	8006fc0 <__swsetup_r+0x3c>
 8006fa0:	686c      	ldr	r4, [r5, #4]
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fa8:	0719      	lsls	r1, r3, #28
 8006faa:	d42c      	bmi.n	8007006 <__swsetup_r+0x82>
 8006fac:	06dd      	lsls	r5, r3, #27
 8006fae:	d411      	bmi.n	8006fd4 <__swsetup_r+0x50>
 8006fb0:	2309      	movs	r3, #9
 8006fb2:	6033      	str	r3, [r6, #0]
 8006fb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fbc:	81a3      	strh	r3, [r4, #12]
 8006fbe:	e03e      	b.n	800703e <__swsetup_r+0xba>
 8006fc0:	4b25      	ldr	r3, [pc, #148]	; (8007058 <__swsetup_r+0xd4>)
 8006fc2:	429c      	cmp	r4, r3
 8006fc4:	d101      	bne.n	8006fca <__swsetup_r+0x46>
 8006fc6:	68ac      	ldr	r4, [r5, #8]
 8006fc8:	e7eb      	b.n	8006fa2 <__swsetup_r+0x1e>
 8006fca:	4b24      	ldr	r3, [pc, #144]	; (800705c <__swsetup_r+0xd8>)
 8006fcc:	429c      	cmp	r4, r3
 8006fce:	bf08      	it	eq
 8006fd0:	68ec      	ldreq	r4, [r5, #12]
 8006fd2:	e7e6      	b.n	8006fa2 <__swsetup_r+0x1e>
 8006fd4:	0758      	lsls	r0, r3, #29
 8006fd6:	d512      	bpl.n	8006ffe <__swsetup_r+0x7a>
 8006fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fda:	b141      	cbz	r1, 8006fee <__swsetup_r+0x6a>
 8006fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fe0:	4299      	cmp	r1, r3
 8006fe2:	d002      	beq.n	8006fea <__swsetup_r+0x66>
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f7ff fce1 	bl	80069ac <_free_r>
 8006fea:	2300      	movs	r3, #0
 8006fec:	6363      	str	r3, [r4, #52]	; 0x34
 8006fee:	89a3      	ldrh	r3, [r4, #12]
 8006ff0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ff4:	81a3      	strh	r3, [r4, #12]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	6063      	str	r3, [r4, #4]
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	f043 0308 	orr.w	r3, r3, #8
 8007004:	81a3      	strh	r3, [r4, #12]
 8007006:	6923      	ldr	r3, [r4, #16]
 8007008:	b94b      	cbnz	r3, 800701e <__swsetup_r+0x9a>
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007014:	d003      	beq.n	800701e <__swsetup_r+0x9a>
 8007016:	4621      	mov	r1, r4
 8007018:	4630      	mov	r0, r6
 800701a:	f000 f957 	bl	80072cc <__smakebuf_r>
 800701e:	89a0      	ldrh	r0, [r4, #12]
 8007020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007024:	f010 0301 	ands.w	r3, r0, #1
 8007028:	d00a      	beq.n	8007040 <__swsetup_r+0xbc>
 800702a:	2300      	movs	r3, #0
 800702c:	60a3      	str	r3, [r4, #8]
 800702e:	6963      	ldr	r3, [r4, #20]
 8007030:	425b      	negs	r3, r3
 8007032:	61a3      	str	r3, [r4, #24]
 8007034:	6923      	ldr	r3, [r4, #16]
 8007036:	b943      	cbnz	r3, 800704a <__swsetup_r+0xc6>
 8007038:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800703c:	d1ba      	bne.n	8006fb4 <__swsetup_r+0x30>
 800703e:	bd70      	pop	{r4, r5, r6, pc}
 8007040:	0781      	lsls	r1, r0, #30
 8007042:	bf58      	it	pl
 8007044:	6963      	ldrpl	r3, [r4, #20]
 8007046:	60a3      	str	r3, [r4, #8]
 8007048:	e7f4      	b.n	8007034 <__swsetup_r+0xb0>
 800704a:	2000      	movs	r0, #0
 800704c:	e7f7      	b.n	800703e <__swsetup_r+0xba>
 800704e:	bf00      	nop
 8007050:	20000010 	.word	0x20000010
 8007054:	080079e4 	.word	0x080079e4
 8007058:	08007a04 	.word	0x08007a04
 800705c:	080079c4 	.word	0x080079c4

08007060 <__assert_func>:
 8007060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007062:	4614      	mov	r4, r2
 8007064:	461a      	mov	r2, r3
 8007066:	4b09      	ldr	r3, [pc, #36]	; (800708c <__assert_func+0x2c>)
 8007068:	4605      	mov	r5, r0
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68d8      	ldr	r0, [r3, #12]
 800706e:	b14c      	cbz	r4, 8007084 <__assert_func+0x24>
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <__assert_func+0x30>)
 8007072:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007076:	9100      	str	r1, [sp, #0]
 8007078:	462b      	mov	r3, r5
 800707a:	4906      	ldr	r1, [pc, #24]	; (8007094 <__assert_func+0x34>)
 800707c:	f000 f8dc 	bl	8007238 <fiprintf>
 8007080:	f000 f9a1 	bl	80073c6 <abort>
 8007084:	4b04      	ldr	r3, [pc, #16]	; (8007098 <__assert_func+0x38>)
 8007086:	461c      	mov	r4, r3
 8007088:	e7f3      	b.n	8007072 <__assert_func+0x12>
 800708a:	bf00      	nop
 800708c:	20000010 	.word	0x20000010
 8007090:	08007b8d 	.word	0x08007b8d
 8007094:	08007b9a 	.word	0x08007b9a
 8007098:	08007bc8 	.word	0x08007bc8

0800709c <_close_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	2300      	movs	r3, #0
 80070a0:	4d05      	ldr	r5, [pc, #20]	; (80070b8 <_close_r+0x1c>)
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	602b      	str	r3, [r5, #0]
 80070a8:	f7fa fe1c 	bl	8001ce4 <_close>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_close_r+0x1a>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_close_r+0x1a>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	20000488 	.word	0x20000488

080070bc <__sflush_r>:
 80070bc:	898a      	ldrh	r2, [r1, #12]
 80070be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c0:	4605      	mov	r5, r0
 80070c2:	0710      	lsls	r0, r2, #28
 80070c4:	460c      	mov	r4, r1
 80070c6:	d457      	bmi.n	8007178 <__sflush_r+0xbc>
 80070c8:	684b      	ldr	r3, [r1, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	dc04      	bgt.n	80070d8 <__sflush_r+0x1c>
 80070ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	dc01      	bgt.n	80070d8 <__sflush_r+0x1c>
 80070d4:	2000      	movs	r0, #0
 80070d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070da:	2e00      	cmp	r6, #0
 80070dc:	d0fa      	beq.n	80070d4 <__sflush_r+0x18>
 80070de:	2300      	movs	r3, #0
 80070e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070e4:	682f      	ldr	r7, [r5, #0]
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	d032      	beq.n	8007150 <__sflush_r+0x94>
 80070ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	075a      	lsls	r2, r3, #29
 80070f0:	d505      	bpl.n	80070fe <__sflush_r+0x42>
 80070f2:	6863      	ldr	r3, [r4, #4]
 80070f4:	1ac0      	subs	r0, r0, r3
 80070f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070f8:	b10b      	cbz	r3, 80070fe <__sflush_r+0x42>
 80070fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070fc:	1ac0      	subs	r0, r0, r3
 80070fe:	2300      	movs	r3, #0
 8007100:	4602      	mov	r2, r0
 8007102:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007104:	4628      	mov	r0, r5
 8007106:	6a21      	ldr	r1, [r4, #32]
 8007108:	47b0      	blx	r6
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	d106      	bne.n	800711e <__sflush_r+0x62>
 8007110:	6829      	ldr	r1, [r5, #0]
 8007112:	291d      	cmp	r1, #29
 8007114:	d82c      	bhi.n	8007170 <__sflush_r+0xb4>
 8007116:	4a29      	ldr	r2, [pc, #164]	; (80071bc <__sflush_r+0x100>)
 8007118:	40ca      	lsrs	r2, r1
 800711a:	07d6      	lsls	r6, r2, #31
 800711c:	d528      	bpl.n	8007170 <__sflush_r+0xb4>
 800711e:	2200      	movs	r2, #0
 8007120:	6062      	str	r2, [r4, #4]
 8007122:	6922      	ldr	r2, [r4, #16]
 8007124:	04d9      	lsls	r1, r3, #19
 8007126:	6022      	str	r2, [r4, #0]
 8007128:	d504      	bpl.n	8007134 <__sflush_r+0x78>
 800712a:	1c42      	adds	r2, r0, #1
 800712c:	d101      	bne.n	8007132 <__sflush_r+0x76>
 800712e:	682b      	ldr	r3, [r5, #0]
 8007130:	b903      	cbnz	r3, 8007134 <__sflush_r+0x78>
 8007132:	6560      	str	r0, [r4, #84]	; 0x54
 8007134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007136:	602f      	str	r7, [r5, #0]
 8007138:	2900      	cmp	r1, #0
 800713a:	d0cb      	beq.n	80070d4 <__sflush_r+0x18>
 800713c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007140:	4299      	cmp	r1, r3
 8007142:	d002      	beq.n	800714a <__sflush_r+0x8e>
 8007144:	4628      	mov	r0, r5
 8007146:	f7ff fc31 	bl	80069ac <_free_r>
 800714a:	2000      	movs	r0, #0
 800714c:	6360      	str	r0, [r4, #52]	; 0x34
 800714e:	e7c2      	b.n	80070d6 <__sflush_r+0x1a>
 8007150:	6a21      	ldr	r1, [r4, #32]
 8007152:	2301      	movs	r3, #1
 8007154:	4628      	mov	r0, r5
 8007156:	47b0      	blx	r6
 8007158:	1c41      	adds	r1, r0, #1
 800715a:	d1c7      	bne.n	80070ec <__sflush_r+0x30>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0c4      	beq.n	80070ec <__sflush_r+0x30>
 8007162:	2b1d      	cmp	r3, #29
 8007164:	d001      	beq.n	800716a <__sflush_r+0xae>
 8007166:	2b16      	cmp	r3, #22
 8007168:	d101      	bne.n	800716e <__sflush_r+0xb2>
 800716a:	602f      	str	r7, [r5, #0]
 800716c:	e7b2      	b.n	80070d4 <__sflush_r+0x18>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	e7ae      	b.n	80070d6 <__sflush_r+0x1a>
 8007178:	690f      	ldr	r7, [r1, #16]
 800717a:	2f00      	cmp	r7, #0
 800717c:	d0aa      	beq.n	80070d4 <__sflush_r+0x18>
 800717e:	0793      	lsls	r3, r2, #30
 8007180:	bf18      	it	ne
 8007182:	2300      	movne	r3, #0
 8007184:	680e      	ldr	r6, [r1, #0]
 8007186:	bf08      	it	eq
 8007188:	694b      	ldreq	r3, [r1, #20]
 800718a:	1bf6      	subs	r6, r6, r7
 800718c:	600f      	str	r7, [r1, #0]
 800718e:	608b      	str	r3, [r1, #8]
 8007190:	2e00      	cmp	r6, #0
 8007192:	dd9f      	ble.n	80070d4 <__sflush_r+0x18>
 8007194:	4633      	mov	r3, r6
 8007196:	463a      	mov	r2, r7
 8007198:	4628      	mov	r0, r5
 800719a:	6a21      	ldr	r1, [r4, #32]
 800719c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80071a0:	47e0      	blx	ip
 80071a2:	2800      	cmp	r0, #0
 80071a4:	dc06      	bgt.n	80071b4 <__sflush_r+0xf8>
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	e790      	b.n	80070d6 <__sflush_r+0x1a>
 80071b4:	4407      	add	r7, r0
 80071b6:	1a36      	subs	r6, r6, r0
 80071b8:	e7ea      	b.n	8007190 <__sflush_r+0xd4>
 80071ba:	bf00      	nop
 80071bc:	20400001 	.word	0x20400001

080071c0 <_fflush_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	690b      	ldr	r3, [r1, #16]
 80071c4:	4605      	mov	r5, r0
 80071c6:	460c      	mov	r4, r1
 80071c8:	b913      	cbnz	r3, 80071d0 <_fflush_r+0x10>
 80071ca:	2500      	movs	r5, #0
 80071cc:	4628      	mov	r0, r5
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	b118      	cbz	r0, 80071da <_fflush_r+0x1a>
 80071d2:	6983      	ldr	r3, [r0, #24]
 80071d4:	b90b      	cbnz	r3, 80071da <_fflush_r+0x1a>
 80071d6:	f7fe ff89 	bl	80060ec <__sinit>
 80071da:	4b14      	ldr	r3, [pc, #80]	; (800722c <_fflush_r+0x6c>)
 80071dc:	429c      	cmp	r4, r3
 80071de:	d11b      	bne.n	8007218 <_fflush_r+0x58>
 80071e0:	686c      	ldr	r4, [r5, #4]
 80071e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0ef      	beq.n	80071ca <_fflush_r+0xa>
 80071ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071ec:	07d0      	lsls	r0, r2, #31
 80071ee:	d404      	bmi.n	80071fa <_fflush_r+0x3a>
 80071f0:	0599      	lsls	r1, r3, #22
 80071f2:	d402      	bmi.n	80071fa <_fflush_r+0x3a>
 80071f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071f6:	f7ff f81c 	bl	8006232 <__retarget_lock_acquire_recursive>
 80071fa:	4628      	mov	r0, r5
 80071fc:	4621      	mov	r1, r4
 80071fe:	f7ff ff5d 	bl	80070bc <__sflush_r>
 8007202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007204:	4605      	mov	r5, r0
 8007206:	07da      	lsls	r2, r3, #31
 8007208:	d4e0      	bmi.n	80071cc <_fflush_r+0xc>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	059b      	lsls	r3, r3, #22
 800720e:	d4dd      	bmi.n	80071cc <_fflush_r+0xc>
 8007210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007212:	f7ff f80f 	bl	8006234 <__retarget_lock_release_recursive>
 8007216:	e7d9      	b.n	80071cc <_fflush_r+0xc>
 8007218:	4b05      	ldr	r3, [pc, #20]	; (8007230 <_fflush_r+0x70>)
 800721a:	429c      	cmp	r4, r3
 800721c:	d101      	bne.n	8007222 <_fflush_r+0x62>
 800721e:	68ac      	ldr	r4, [r5, #8]
 8007220:	e7df      	b.n	80071e2 <_fflush_r+0x22>
 8007222:	4b04      	ldr	r3, [pc, #16]	; (8007234 <_fflush_r+0x74>)
 8007224:	429c      	cmp	r4, r3
 8007226:	bf08      	it	eq
 8007228:	68ec      	ldreq	r4, [r5, #12]
 800722a:	e7da      	b.n	80071e2 <_fflush_r+0x22>
 800722c:	080079e4 	.word	0x080079e4
 8007230:	08007a04 	.word	0x08007a04
 8007234:	080079c4 	.word	0x080079c4

08007238 <fiprintf>:
 8007238:	b40e      	push	{r1, r2, r3}
 800723a:	b503      	push	{r0, r1, lr}
 800723c:	4601      	mov	r1, r0
 800723e:	ab03      	add	r3, sp, #12
 8007240:	4805      	ldr	r0, [pc, #20]	; (8007258 <fiprintf+0x20>)
 8007242:	f853 2b04 	ldr.w	r2, [r3], #4
 8007246:	6800      	ldr	r0, [r0, #0]
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	f7ff fcb3 	bl	8006bb4 <_vfiprintf_r>
 800724e:	b002      	add	sp, #8
 8007250:	f85d eb04 	ldr.w	lr, [sp], #4
 8007254:	b003      	add	sp, #12
 8007256:	4770      	bx	lr
 8007258:	20000010 	.word	0x20000010

0800725c <_lseek_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4604      	mov	r4, r0
 8007260:	4608      	mov	r0, r1
 8007262:	4611      	mov	r1, r2
 8007264:	2200      	movs	r2, #0
 8007266:	4d05      	ldr	r5, [pc, #20]	; (800727c <_lseek_r+0x20>)
 8007268:	602a      	str	r2, [r5, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	f7fa fd5e 	bl	8001d2c <_lseek>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_lseek_r+0x1e>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_lseek_r+0x1e>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	20000488 	.word	0x20000488

08007280 <__swhatbuf_r>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	460e      	mov	r6, r1
 8007284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007288:	4614      	mov	r4, r2
 800728a:	2900      	cmp	r1, #0
 800728c:	461d      	mov	r5, r3
 800728e:	b096      	sub	sp, #88	; 0x58
 8007290:	da08      	bge.n	80072a4 <__swhatbuf_r+0x24>
 8007292:	2200      	movs	r2, #0
 8007294:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007298:	602a      	str	r2, [r5, #0]
 800729a:	061a      	lsls	r2, r3, #24
 800729c:	d410      	bmi.n	80072c0 <__swhatbuf_r+0x40>
 800729e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072a2:	e00e      	b.n	80072c2 <__swhatbuf_r+0x42>
 80072a4:	466a      	mov	r2, sp
 80072a6:	f000 f895 	bl	80073d4 <_fstat_r>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	dbf1      	blt.n	8007292 <__swhatbuf_r+0x12>
 80072ae:	9a01      	ldr	r2, [sp, #4]
 80072b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072b8:	425a      	negs	r2, r3
 80072ba:	415a      	adcs	r2, r3
 80072bc:	602a      	str	r2, [r5, #0]
 80072be:	e7ee      	b.n	800729e <__swhatbuf_r+0x1e>
 80072c0:	2340      	movs	r3, #64	; 0x40
 80072c2:	2000      	movs	r0, #0
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	b016      	add	sp, #88	; 0x58
 80072c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080072cc <__smakebuf_r>:
 80072cc:	898b      	ldrh	r3, [r1, #12]
 80072ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072d0:	079d      	lsls	r5, r3, #30
 80072d2:	4606      	mov	r6, r0
 80072d4:	460c      	mov	r4, r1
 80072d6:	d507      	bpl.n	80072e8 <__smakebuf_r+0x1c>
 80072d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	6123      	str	r3, [r4, #16]
 80072e0:	2301      	movs	r3, #1
 80072e2:	6163      	str	r3, [r4, #20]
 80072e4:	b002      	add	sp, #8
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	466a      	mov	r2, sp
 80072ea:	ab01      	add	r3, sp, #4
 80072ec:	f7ff ffc8 	bl	8007280 <__swhatbuf_r>
 80072f0:	9900      	ldr	r1, [sp, #0]
 80072f2:	4605      	mov	r5, r0
 80072f4:	4630      	mov	r0, r6
 80072f6:	f7ff fbc1 	bl	8006a7c <_malloc_r>
 80072fa:	b948      	cbnz	r0, 8007310 <__smakebuf_r+0x44>
 80072fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007300:	059a      	lsls	r2, r3, #22
 8007302:	d4ef      	bmi.n	80072e4 <__smakebuf_r+0x18>
 8007304:	f023 0303 	bic.w	r3, r3, #3
 8007308:	f043 0302 	orr.w	r3, r3, #2
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	e7e3      	b.n	80072d8 <__smakebuf_r+0xc>
 8007310:	4b0d      	ldr	r3, [pc, #52]	; (8007348 <__smakebuf_r+0x7c>)
 8007312:	62b3      	str	r3, [r6, #40]	; 0x28
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	6020      	str	r0, [r4, #0]
 8007318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	9b00      	ldr	r3, [sp, #0]
 8007320:	6120      	str	r0, [r4, #16]
 8007322:	6163      	str	r3, [r4, #20]
 8007324:	9b01      	ldr	r3, [sp, #4]
 8007326:	b15b      	cbz	r3, 8007340 <__smakebuf_r+0x74>
 8007328:	4630      	mov	r0, r6
 800732a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800732e:	f000 f863 	bl	80073f8 <_isatty_r>
 8007332:	b128      	cbz	r0, 8007340 <__smakebuf_r+0x74>
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	f023 0303 	bic.w	r3, r3, #3
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	81a3      	strh	r3, [r4, #12]
 8007340:	89a0      	ldrh	r0, [r4, #12]
 8007342:	4305      	orrs	r5, r0
 8007344:	81a5      	strh	r5, [r4, #12]
 8007346:	e7cd      	b.n	80072e4 <__smakebuf_r+0x18>
 8007348:	08006085 	.word	0x08006085

0800734c <__ascii_mbtowc>:
 800734c:	b082      	sub	sp, #8
 800734e:	b901      	cbnz	r1, 8007352 <__ascii_mbtowc+0x6>
 8007350:	a901      	add	r1, sp, #4
 8007352:	b142      	cbz	r2, 8007366 <__ascii_mbtowc+0x1a>
 8007354:	b14b      	cbz	r3, 800736a <__ascii_mbtowc+0x1e>
 8007356:	7813      	ldrb	r3, [r2, #0]
 8007358:	600b      	str	r3, [r1, #0]
 800735a:	7812      	ldrb	r2, [r2, #0]
 800735c:	1e10      	subs	r0, r2, #0
 800735e:	bf18      	it	ne
 8007360:	2001      	movne	r0, #1
 8007362:	b002      	add	sp, #8
 8007364:	4770      	bx	lr
 8007366:	4610      	mov	r0, r2
 8007368:	e7fb      	b.n	8007362 <__ascii_mbtowc+0x16>
 800736a:	f06f 0001 	mvn.w	r0, #1
 800736e:	e7f8      	b.n	8007362 <__ascii_mbtowc+0x16>

08007370 <__malloc_lock>:
 8007370:	4801      	ldr	r0, [pc, #4]	; (8007378 <__malloc_lock+0x8>)
 8007372:	f7fe bf5e 	b.w	8006232 <__retarget_lock_acquire_recursive>
 8007376:	bf00      	nop
 8007378:	2000047c 	.word	0x2000047c

0800737c <__malloc_unlock>:
 800737c:	4801      	ldr	r0, [pc, #4]	; (8007384 <__malloc_unlock+0x8>)
 800737e:	f7fe bf59 	b.w	8006234 <__retarget_lock_release_recursive>
 8007382:	bf00      	nop
 8007384:	2000047c 	.word	0x2000047c

08007388 <_read_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	4604      	mov	r4, r0
 800738c:	4608      	mov	r0, r1
 800738e:	4611      	mov	r1, r2
 8007390:	2200      	movs	r2, #0
 8007392:	4d05      	ldr	r5, [pc, #20]	; (80073a8 <_read_r+0x20>)
 8007394:	602a      	str	r2, [r5, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	f7fa fc6b 	bl	8001c72 <_read>
 800739c:	1c43      	adds	r3, r0, #1
 800739e:	d102      	bne.n	80073a6 <_read_r+0x1e>
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	b103      	cbz	r3, 80073a6 <_read_r+0x1e>
 80073a4:	6023      	str	r3, [r4, #0]
 80073a6:	bd38      	pop	{r3, r4, r5, pc}
 80073a8:	20000488 	.word	0x20000488

080073ac <__ascii_wctomb>:
 80073ac:	4603      	mov	r3, r0
 80073ae:	4608      	mov	r0, r1
 80073b0:	b141      	cbz	r1, 80073c4 <__ascii_wctomb+0x18>
 80073b2:	2aff      	cmp	r2, #255	; 0xff
 80073b4:	d904      	bls.n	80073c0 <__ascii_wctomb+0x14>
 80073b6:	228a      	movs	r2, #138	; 0x8a
 80073b8:	f04f 30ff 	mov.w	r0, #4294967295
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	4770      	bx	lr
 80073c0:	2001      	movs	r0, #1
 80073c2:	700a      	strb	r2, [r1, #0]
 80073c4:	4770      	bx	lr

080073c6 <abort>:
 80073c6:	2006      	movs	r0, #6
 80073c8:	b508      	push	{r3, lr}
 80073ca:	f000 f84d 	bl	8007468 <raise>
 80073ce:	2001      	movs	r0, #1
 80073d0:	f7fa fc45 	bl	8001c5e <_exit>

080073d4 <_fstat_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	2300      	movs	r3, #0
 80073d8:	4d06      	ldr	r5, [pc, #24]	; (80073f4 <_fstat_r+0x20>)
 80073da:	4604      	mov	r4, r0
 80073dc:	4608      	mov	r0, r1
 80073de:	4611      	mov	r1, r2
 80073e0:	602b      	str	r3, [r5, #0]
 80073e2:	f7fa fc8a 	bl	8001cfa <_fstat>
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	d102      	bne.n	80073f0 <_fstat_r+0x1c>
 80073ea:	682b      	ldr	r3, [r5, #0]
 80073ec:	b103      	cbz	r3, 80073f0 <_fstat_r+0x1c>
 80073ee:	6023      	str	r3, [r4, #0]
 80073f0:	bd38      	pop	{r3, r4, r5, pc}
 80073f2:	bf00      	nop
 80073f4:	20000488 	.word	0x20000488

080073f8 <_isatty_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	2300      	movs	r3, #0
 80073fc:	4d05      	ldr	r5, [pc, #20]	; (8007414 <_isatty_r+0x1c>)
 80073fe:	4604      	mov	r4, r0
 8007400:	4608      	mov	r0, r1
 8007402:	602b      	str	r3, [r5, #0]
 8007404:	f7fa fc88 	bl	8001d18 <_isatty>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	d102      	bne.n	8007412 <_isatty_r+0x1a>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	b103      	cbz	r3, 8007412 <_isatty_r+0x1a>
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	20000488 	.word	0x20000488

08007418 <_raise_r>:
 8007418:	291f      	cmp	r1, #31
 800741a:	b538      	push	{r3, r4, r5, lr}
 800741c:	4604      	mov	r4, r0
 800741e:	460d      	mov	r5, r1
 8007420:	d904      	bls.n	800742c <_raise_r+0x14>
 8007422:	2316      	movs	r3, #22
 8007424:	6003      	str	r3, [r0, #0]
 8007426:	f04f 30ff 	mov.w	r0, #4294967295
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800742e:	b112      	cbz	r2, 8007436 <_raise_r+0x1e>
 8007430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007434:	b94b      	cbnz	r3, 800744a <_raise_r+0x32>
 8007436:	4620      	mov	r0, r4
 8007438:	f000 f830 	bl	800749c <_getpid_r>
 800743c:	462a      	mov	r2, r5
 800743e:	4601      	mov	r1, r0
 8007440:	4620      	mov	r0, r4
 8007442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007446:	f000 b817 	b.w	8007478 <_kill_r>
 800744a:	2b01      	cmp	r3, #1
 800744c:	d00a      	beq.n	8007464 <_raise_r+0x4c>
 800744e:	1c59      	adds	r1, r3, #1
 8007450:	d103      	bne.n	800745a <_raise_r+0x42>
 8007452:	2316      	movs	r3, #22
 8007454:	6003      	str	r3, [r0, #0]
 8007456:	2001      	movs	r0, #1
 8007458:	e7e7      	b.n	800742a <_raise_r+0x12>
 800745a:	2400      	movs	r4, #0
 800745c:	4628      	mov	r0, r5
 800745e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007462:	4798      	blx	r3
 8007464:	2000      	movs	r0, #0
 8007466:	e7e0      	b.n	800742a <_raise_r+0x12>

08007468 <raise>:
 8007468:	4b02      	ldr	r3, [pc, #8]	; (8007474 <raise+0xc>)
 800746a:	4601      	mov	r1, r0
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	f7ff bfd3 	b.w	8007418 <_raise_r>
 8007472:	bf00      	nop
 8007474:	20000010 	.word	0x20000010

08007478 <_kill_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	2300      	movs	r3, #0
 800747c:	4d06      	ldr	r5, [pc, #24]	; (8007498 <_kill_r+0x20>)
 800747e:	4604      	mov	r4, r0
 8007480:	4608      	mov	r0, r1
 8007482:	4611      	mov	r1, r2
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	f7fa fbda 	bl	8001c3e <_kill>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	d102      	bne.n	8007494 <_kill_r+0x1c>
 800748e:	682b      	ldr	r3, [r5, #0]
 8007490:	b103      	cbz	r3, 8007494 <_kill_r+0x1c>
 8007492:	6023      	str	r3, [r4, #0]
 8007494:	bd38      	pop	{r3, r4, r5, pc}
 8007496:	bf00      	nop
 8007498:	20000488 	.word	0x20000488

0800749c <_getpid_r>:
 800749c:	f7fa bbc8 	b.w	8001c30 <_getpid>

080074a0 <log>:
 80074a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a2:	4604      	mov	r4, r0
 80074a4:	460d      	mov	r5, r1
 80074a6:	f000 f82f 	bl	8007508 <__ieee754_log>
 80074aa:	4622      	mov	r2, r4
 80074ac:	4606      	mov	r6, r0
 80074ae:	460f      	mov	r7, r1
 80074b0:	462b      	mov	r3, r5
 80074b2:	4620      	mov	r0, r4
 80074b4:	4629      	mov	r1, r5
 80074b6:	f7f9 fab3 	bl	8000a20 <__aeabi_dcmpun>
 80074ba:	b998      	cbnz	r0, 80074e4 <log+0x44>
 80074bc:	2200      	movs	r2, #0
 80074be:	2300      	movs	r3, #0
 80074c0:	4620      	mov	r0, r4
 80074c2:	4629      	mov	r1, r5
 80074c4:	f7f9 faa2 	bl	8000a0c <__aeabi_dcmpgt>
 80074c8:	b960      	cbnz	r0, 80074e4 <log+0x44>
 80074ca:	2200      	movs	r2, #0
 80074cc:	2300      	movs	r3, #0
 80074ce:	4620      	mov	r0, r4
 80074d0:	4629      	mov	r1, r5
 80074d2:	f7f9 fa73 	bl	80009bc <__aeabi_dcmpeq>
 80074d6:	b140      	cbz	r0, 80074ea <log+0x4a>
 80074d8:	f7fd fa8a 	bl	80049f0 <__errno>
 80074dc:	2322      	movs	r3, #34	; 0x22
 80074de:	2600      	movs	r6, #0
 80074e0:	4f06      	ldr	r7, [pc, #24]	; (80074fc <log+0x5c>)
 80074e2:	6003      	str	r3, [r0, #0]
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ea:	f7fd fa81 	bl	80049f0 <__errno>
 80074ee:	2321      	movs	r3, #33	; 0x21
 80074f0:	6003      	str	r3, [r0, #0]
 80074f2:	4803      	ldr	r0, [pc, #12]	; (8007500 <log+0x60>)
 80074f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80074f8:	f000 b9b8 	b.w	800786c <nan>
 80074fc:	fff00000 	.word	0xfff00000
 8007500:	08007bc8 	.word	0x08007bc8
 8007504:	00000000 	.word	0x00000000

08007508 <__ieee754_log>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	460d      	mov	r5, r1
 8007516:	b087      	sub	sp, #28
 8007518:	da24      	bge.n	8007564 <__ieee754_log+0x5c>
 800751a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800751e:	4304      	orrs	r4, r0
 8007520:	d108      	bne.n	8007534 <__ieee754_log+0x2c>
 8007522:	2200      	movs	r2, #0
 8007524:	2300      	movs	r3, #0
 8007526:	2000      	movs	r0, #0
 8007528:	49cb      	ldr	r1, [pc, #812]	; (8007858 <__ieee754_log+0x350>)
 800752a:	f7f9 f909 	bl	8000740 <__aeabi_ddiv>
 800752e:	b007      	add	sp, #28
 8007530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007534:	2900      	cmp	r1, #0
 8007536:	da04      	bge.n	8007542 <__ieee754_log+0x3a>
 8007538:	f7f8 fe20 	bl	800017c <__aeabi_dsub>
 800753c:	2200      	movs	r2, #0
 800753e:	2300      	movs	r3, #0
 8007540:	e7f3      	b.n	800752a <__ieee754_log+0x22>
 8007542:	2200      	movs	r2, #0
 8007544:	4bc5      	ldr	r3, [pc, #788]	; (800785c <__ieee754_log+0x354>)
 8007546:	f7f8 ffd1 	bl	80004ec <__aeabi_dmul>
 800754a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	460d      	mov	r5, r1
 8007554:	49c2      	ldr	r1, [pc, #776]	; (8007860 <__ieee754_log+0x358>)
 8007556:	428d      	cmp	r5, r1
 8007558:	dd06      	ble.n	8007568 <__ieee754_log+0x60>
 800755a:	4610      	mov	r0, r2
 800755c:	4619      	mov	r1, r3
 800755e:	f7f8 fe0f 	bl	8000180 <__adddf3>
 8007562:	e7e4      	b.n	800752e <__ieee754_log+0x26>
 8007564:	2600      	movs	r6, #0
 8007566:	e7f5      	b.n	8007554 <__ieee754_log+0x4c>
 8007568:	152c      	asrs	r4, r5, #20
 800756a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800756e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8007572:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007576:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800757a:	4426      	add	r6, r4
 800757c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8007580:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8007584:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8007588:	ea41 0305 	orr.w	r3, r1, r5
 800758c:	4610      	mov	r0, r2
 800758e:	4619      	mov	r1, r3
 8007590:	2200      	movs	r2, #0
 8007592:	4bb4      	ldr	r3, [pc, #720]	; (8007864 <__ieee754_log+0x35c>)
 8007594:	f7f8 fdf2 	bl	800017c <__aeabi_dsub>
 8007598:	1cab      	adds	r3, r5, #2
 800759a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800759e:	2b02      	cmp	r3, #2
 80075a0:	4682      	mov	sl, r0
 80075a2:	468b      	mov	fp, r1
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 80075ac:	dc53      	bgt.n	8007656 <__ieee754_log+0x14e>
 80075ae:	2300      	movs	r3, #0
 80075b0:	f7f9 fa04 	bl	80009bc <__aeabi_dcmpeq>
 80075b4:	b1d0      	cbz	r0, 80075ec <__ieee754_log+0xe4>
 80075b6:	2c00      	cmp	r4, #0
 80075b8:	f000 8122 	beq.w	8007800 <__ieee754_log+0x2f8>
 80075bc:	4620      	mov	r0, r4
 80075be:	f7f8 ff2b 	bl	8000418 <__aeabi_i2d>
 80075c2:	a391      	add	r3, pc, #580	; (adr r3, 8007808 <__ieee754_log+0x300>)
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	4606      	mov	r6, r0
 80075ca:	460f      	mov	r7, r1
 80075cc:	f7f8 ff8e 	bl	80004ec <__aeabi_dmul>
 80075d0:	a38f      	add	r3, pc, #572	; (adr r3, 8007810 <__ieee754_log+0x308>)
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	4604      	mov	r4, r0
 80075d8:	460d      	mov	r5, r1
 80075da:	4630      	mov	r0, r6
 80075dc:	4639      	mov	r1, r7
 80075de:	f7f8 ff85 	bl	80004ec <__aeabi_dmul>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4620      	mov	r0, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	e7b8      	b.n	800755e <__ieee754_log+0x56>
 80075ec:	a38a      	add	r3, pc, #552	; (adr r3, 8007818 <__ieee754_log+0x310>)
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	4650      	mov	r0, sl
 80075f4:	4659      	mov	r1, fp
 80075f6:	f7f8 ff79 	bl	80004ec <__aeabi_dmul>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	2000      	movs	r0, #0
 8007600:	4999      	ldr	r1, [pc, #612]	; (8007868 <__ieee754_log+0x360>)
 8007602:	f7f8 fdbb 	bl	800017c <__aeabi_dsub>
 8007606:	4652      	mov	r2, sl
 8007608:	4606      	mov	r6, r0
 800760a:	460f      	mov	r7, r1
 800760c:	465b      	mov	r3, fp
 800760e:	4650      	mov	r0, sl
 8007610:	4659      	mov	r1, fp
 8007612:	f7f8 ff6b 	bl	80004ec <__aeabi_dmul>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4630      	mov	r0, r6
 800761c:	4639      	mov	r1, r7
 800761e:	f7f8 ff65 	bl	80004ec <__aeabi_dmul>
 8007622:	4606      	mov	r6, r0
 8007624:	460f      	mov	r7, r1
 8007626:	b914      	cbnz	r4, 800762e <__ieee754_log+0x126>
 8007628:	4632      	mov	r2, r6
 800762a:	463b      	mov	r3, r7
 800762c:	e0a2      	b.n	8007774 <__ieee754_log+0x26c>
 800762e:	4620      	mov	r0, r4
 8007630:	f7f8 fef2 	bl	8000418 <__aeabi_i2d>
 8007634:	a374      	add	r3, pc, #464	; (adr r3, 8007808 <__ieee754_log+0x300>)
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	4680      	mov	r8, r0
 800763c:	4689      	mov	r9, r1
 800763e:	f7f8 ff55 	bl	80004ec <__aeabi_dmul>
 8007642:	a373      	add	r3, pc, #460	; (adr r3, 8007810 <__ieee754_log+0x308>)
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	4604      	mov	r4, r0
 800764a:	460d      	mov	r5, r1
 800764c:	4640      	mov	r0, r8
 800764e:	4649      	mov	r1, r9
 8007650:	f7f8 ff4c 	bl	80004ec <__aeabi_dmul>
 8007654:	e0a7      	b.n	80077a6 <__ieee754_log+0x29e>
 8007656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800765a:	f7f8 fd91 	bl	8000180 <__adddf3>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4650      	mov	r0, sl
 8007664:	4659      	mov	r1, fp
 8007666:	f7f9 f86b 	bl	8000740 <__aeabi_ddiv>
 800766a:	e9cd 0100 	strd	r0, r1, [sp]
 800766e:	4620      	mov	r0, r4
 8007670:	f7f8 fed2 	bl	8000418 <__aeabi_i2d>
 8007674:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800767c:	4610      	mov	r0, r2
 800767e:	4619      	mov	r1, r3
 8007680:	f7f8 ff34 	bl	80004ec <__aeabi_dmul>
 8007684:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8007688:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800768c:	4602      	mov	r2, r0
 800768e:	9305      	str	r3, [sp, #20]
 8007690:	460b      	mov	r3, r1
 8007692:	4606      	mov	r6, r0
 8007694:	460f      	mov	r7, r1
 8007696:	f7f8 ff29 	bl	80004ec <__aeabi_dmul>
 800769a:	a361      	add	r3, pc, #388	; (adr r3, 8007820 <__ieee754_log+0x318>)
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	4680      	mov	r8, r0
 80076a2:	4689      	mov	r9, r1
 80076a4:	f7f8 ff22 	bl	80004ec <__aeabi_dmul>
 80076a8:	a35f      	add	r3, pc, #380	; (adr r3, 8007828 <__ieee754_log+0x320>)
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	f7f8 fd67 	bl	8000180 <__adddf3>
 80076b2:	4642      	mov	r2, r8
 80076b4:	464b      	mov	r3, r9
 80076b6:	f7f8 ff19 	bl	80004ec <__aeabi_dmul>
 80076ba:	a35d      	add	r3, pc, #372	; (adr r3, 8007830 <__ieee754_log+0x328>)
 80076bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c0:	f7f8 fd5e 	bl	8000180 <__adddf3>
 80076c4:	4642      	mov	r2, r8
 80076c6:	464b      	mov	r3, r9
 80076c8:	f7f8 ff10 	bl	80004ec <__aeabi_dmul>
 80076cc:	a35a      	add	r3, pc, #360	; (adr r3, 8007838 <__ieee754_log+0x330>)
 80076ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d2:	f7f8 fd55 	bl	8000180 <__adddf3>
 80076d6:	4632      	mov	r2, r6
 80076d8:	463b      	mov	r3, r7
 80076da:	f7f8 ff07 	bl	80004ec <__aeabi_dmul>
 80076de:	a358      	add	r3, pc, #352	; (adr r3, 8007840 <__ieee754_log+0x338>)
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	4606      	mov	r6, r0
 80076e6:	460f      	mov	r7, r1
 80076e8:	4640      	mov	r0, r8
 80076ea:	4649      	mov	r1, r9
 80076ec:	f7f8 fefe 	bl	80004ec <__aeabi_dmul>
 80076f0:	a355      	add	r3, pc, #340	; (adr r3, 8007848 <__ieee754_log+0x340>)
 80076f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f6:	f7f8 fd43 	bl	8000180 <__adddf3>
 80076fa:	4642      	mov	r2, r8
 80076fc:	464b      	mov	r3, r9
 80076fe:	f7f8 fef5 	bl	80004ec <__aeabi_dmul>
 8007702:	a353      	add	r3, pc, #332	; (adr r3, 8007850 <__ieee754_log+0x348>)
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	f7f8 fd3a 	bl	8000180 <__adddf3>
 800770c:	4642      	mov	r2, r8
 800770e:	464b      	mov	r3, r9
 8007710:	f7f8 feec 	bl	80004ec <__aeabi_dmul>
 8007714:	460b      	mov	r3, r1
 8007716:	4602      	mov	r2, r0
 8007718:	4639      	mov	r1, r7
 800771a:	4630      	mov	r0, r6
 800771c:	f7f8 fd30 	bl	8000180 <__adddf3>
 8007720:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007724:	9b05      	ldr	r3, [sp, #20]
 8007726:	3551      	adds	r5, #81	; 0x51
 8007728:	431d      	orrs	r5, r3
 800772a:	2d00      	cmp	r5, #0
 800772c:	4680      	mov	r8, r0
 800772e:	4689      	mov	r9, r1
 8007730:	dd48      	ble.n	80077c4 <__ieee754_log+0x2bc>
 8007732:	2200      	movs	r2, #0
 8007734:	4b4c      	ldr	r3, [pc, #304]	; (8007868 <__ieee754_log+0x360>)
 8007736:	4650      	mov	r0, sl
 8007738:	4659      	mov	r1, fp
 800773a:	f7f8 fed7 	bl	80004ec <__aeabi_dmul>
 800773e:	4652      	mov	r2, sl
 8007740:	465b      	mov	r3, fp
 8007742:	f7f8 fed3 	bl	80004ec <__aeabi_dmul>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4606      	mov	r6, r0
 800774c:	460f      	mov	r7, r1
 800774e:	4640      	mov	r0, r8
 8007750:	4649      	mov	r1, r9
 8007752:	f7f8 fd15 	bl	8000180 <__adddf3>
 8007756:	e9dd 2300 	ldrd	r2, r3, [sp]
 800775a:	f7f8 fec7 	bl	80004ec <__aeabi_dmul>
 800775e:	4680      	mov	r8, r0
 8007760:	4689      	mov	r9, r1
 8007762:	b964      	cbnz	r4, 800777e <__ieee754_log+0x276>
 8007764:	4602      	mov	r2, r0
 8007766:	460b      	mov	r3, r1
 8007768:	4630      	mov	r0, r6
 800776a:	4639      	mov	r1, r7
 800776c:	f7f8 fd06 	bl	800017c <__aeabi_dsub>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4650      	mov	r0, sl
 8007776:	4659      	mov	r1, fp
 8007778:	f7f8 fd00 	bl	800017c <__aeabi_dsub>
 800777c:	e6d7      	b.n	800752e <__ieee754_log+0x26>
 800777e:	a322      	add	r3, pc, #136	; (adr r3, 8007808 <__ieee754_log+0x300>)
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007788:	f7f8 feb0 	bl	80004ec <__aeabi_dmul>
 800778c:	a320      	add	r3, pc, #128	; (adr r3, 8007810 <__ieee754_log+0x308>)
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	4604      	mov	r4, r0
 8007794:	460d      	mov	r5, r1
 8007796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800779a:	f7f8 fea7 	bl	80004ec <__aeabi_dmul>
 800779e:	4642      	mov	r2, r8
 80077a0:	464b      	mov	r3, r9
 80077a2:	f7f8 fced 	bl	8000180 <__adddf3>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4630      	mov	r0, r6
 80077ac:	4639      	mov	r1, r7
 80077ae:	f7f8 fce5 	bl	800017c <__aeabi_dsub>
 80077b2:	4652      	mov	r2, sl
 80077b4:	465b      	mov	r3, fp
 80077b6:	f7f8 fce1 	bl	800017c <__aeabi_dsub>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4620      	mov	r0, r4
 80077c0:	4629      	mov	r1, r5
 80077c2:	e7d9      	b.n	8007778 <__ieee754_log+0x270>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4650      	mov	r0, sl
 80077ca:	4659      	mov	r1, fp
 80077cc:	f7f8 fcd6 	bl	800017c <__aeabi_dsub>
 80077d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077d4:	f7f8 fe8a 	bl	80004ec <__aeabi_dmul>
 80077d8:	4606      	mov	r6, r0
 80077da:	460f      	mov	r7, r1
 80077dc:	2c00      	cmp	r4, #0
 80077de:	f43f af23 	beq.w	8007628 <__ieee754_log+0x120>
 80077e2:	a309      	add	r3, pc, #36	; (adr r3, 8007808 <__ieee754_log+0x300>)
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ec:	f7f8 fe7e 	bl	80004ec <__aeabi_dmul>
 80077f0:	a307      	add	r3, pc, #28	; (adr r3, 8007810 <__ieee754_log+0x308>)
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	4604      	mov	r4, r0
 80077f8:	460d      	mov	r5, r1
 80077fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077fe:	e727      	b.n	8007650 <__ieee754_log+0x148>
 8007800:	2000      	movs	r0, #0
 8007802:	2100      	movs	r1, #0
 8007804:	e693      	b.n	800752e <__ieee754_log+0x26>
 8007806:	bf00      	nop
 8007808:	fee00000 	.word	0xfee00000
 800780c:	3fe62e42 	.word	0x3fe62e42
 8007810:	35793c76 	.word	0x35793c76
 8007814:	3dea39ef 	.word	0x3dea39ef
 8007818:	55555555 	.word	0x55555555
 800781c:	3fd55555 	.word	0x3fd55555
 8007820:	df3e5244 	.word	0xdf3e5244
 8007824:	3fc2f112 	.word	0x3fc2f112
 8007828:	96cb03de 	.word	0x96cb03de
 800782c:	3fc74664 	.word	0x3fc74664
 8007830:	94229359 	.word	0x94229359
 8007834:	3fd24924 	.word	0x3fd24924
 8007838:	55555593 	.word	0x55555593
 800783c:	3fe55555 	.word	0x3fe55555
 8007840:	d078c69f 	.word	0xd078c69f
 8007844:	3fc39a09 	.word	0x3fc39a09
 8007848:	1d8e78af 	.word	0x1d8e78af
 800784c:	3fcc71c5 	.word	0x3fcc71c5
 8007850:	9997fa04 	.word	0x9997fa04
 8007854:	3fd99999 	.word	0x3fd99999
 8007858:	c3500000 	.word	0xc3500000
 800785c:	43500000 	.word	0x43500000
 8007860:	7fefffff 	.word	0x7fefffff
 8007864:	3ff00000 	.word	0x3ff00000
 8007868:	3fe00000 	.word	0x3fe00000

0800786c <nan>:
 800786c:	2000      	movs	r0, #0
 800786e:	4901      	ldr	r1, [pc, #4]	; (8007874 <nan+0x8>)
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	7ff80000 	.word	0x7ff80000

08007878 <_init>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr

08007884 <_fini>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	bf00      	nop
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr
